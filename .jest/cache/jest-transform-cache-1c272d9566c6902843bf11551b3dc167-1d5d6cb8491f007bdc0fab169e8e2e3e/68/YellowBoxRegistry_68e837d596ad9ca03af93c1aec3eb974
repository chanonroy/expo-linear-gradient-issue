74b987d1a44adc079a64920cf41bc700
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var YellowBoxWarning = require("./YellowBoxWarning");

var observers = new Set();
var ignorePatterns = new Set();
var registry = new Map();
var disabled = false;
var projection = new Map();
var updateTimeout = null;

function isWarningIgnored(warning) {
  for (var _iterator = _createForOfIteratorHelperLoose(ignorePatterns), _step; !(_step = _iterator()).done;) {
    var pattern = _step.value;

    if (pattern instanceof RegExp && pattern.test(warning.message.content)) {
      return true;
    } else if (typeof pattern === 'string' && warning.message.content.includes(pattern)) {
      return true;
    }
  }

  return false;
}

function handleUpdate() {
  projection = new Map();

  if (!disabled) {
    for (var _iterator2 = _createForOfIteratorHelperLoose(registry), _step2; !(_step2 = _iterator2()).done;) {
      var _ref = _step2.value;

      var _ref2 = (0, _slicedToArray2.default)(_ref, 2);

      var category = _ref2[0];
      var warnings = _ref2[1];
      var filtered = warnings.filter(function (warning) {
        return !isWarningIgnored(warning);
      });

      if (filtered.length > 0) {
        projection.set(category, filtered);
      }
    }
  }

  if (updateTimeout == null) {
    updateTimeout = setImmediate(function () {
      updateTimeout = null;

      for (var _iterator3 = _createForOfIteratorHelperLoose(observers), _step3; !(_step3 = _iterator3()).done;) {
        var _ref3 = _step3.value;
        var observer = _ref3.observer;
        observer(projection);
      }
    });
  }
}

var YellowBoxRegistry = {
  add: function add(_ref4) {
    var args = _ref4.args,
        framesToPop = _ref4.framesToPop;

    if (typeof args[0] === 'string' && args[0].startsWith('(ADVICE)')) {
      return;
    }

    var _YellowBoxWarning$par = YellowBoxWarning.parse({
      args: args,
      framesToPop: framesToPop + 1
    }),
        category = _YellowBoxWarning$par.category,
        message = _YellowBoxWarning$par.message,
        stack = _YellowBoxWarning$par.stack;

    var warnings = registry.get(category);

    if (warnings == null) {
      warnings = [];
    }

    warnings = [].concat((0, _toConsumableArray2.default)(warnings), [new YellowBoxWarning(message, stack)]);
    registry.delete(category);
    registry.set(category, warnings);
    handleUpdate();
  },
  delete: function _delete(category) {
    if (registry.has(category)) {
      registry.delete(category);
      handleUpdate();
    }
  },
  clear: function clear() {
    if (registry.size > 0) {
      registry.clear();
      handleUpdate();
    }
  },
  addIgnorePatterns: function addIgnorePatterns(patterns) {
    var newPatterns = patterns.filter(function (pattern) {
      if (pattern instanceof RegExp) {
        for (var _iterator4 = _createForOfIteratorHelperLoose(ignorePatterns.entries()), _step4; !(_step4 = _iterator4()).done;) {
          var existingPattern = _step4.value;

          if (existingPattern instanceof RegExp && existingPattern.toString() === pattern.toString()) {
            return false;
          }
        }

        return true;
      }

      return !ignorePatterns.has(pattern);
    });

    if (newPatterns.length === 0) {
      return;
    }

    for (var _iterator5 = _createForOfIteratorHelperLoose(newPatterns), _step5; !(_step5 = _iterator5()).done;) {
      var pattern = _step5.value;
      ignorePatterns.add(pattern);
    }

    handleUpdate();
  },
  setDisabled: function setDisabled(value) {
    if (value === disabled) {
      return;
    }

    disabled = value;
    handleUpdate();
  },
  isDisabled: function isDisabled() {
    return disabled;
  },
  observe: function observe(observer) {
    var subscription = {
      observer: observer
    };
    observers.add(subscription);
    observer(projection);
    return {
      unsubscribe: function unsubscribe() {
        observers.delete(subscription);
      }
    };
  }
};
module.exports = YellowBoxRegistry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,