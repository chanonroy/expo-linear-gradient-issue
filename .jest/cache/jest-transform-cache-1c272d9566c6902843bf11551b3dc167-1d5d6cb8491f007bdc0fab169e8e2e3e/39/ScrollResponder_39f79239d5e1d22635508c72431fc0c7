ad02e94a5272fe493aa239b9f0499fca
'use strict';

var Dimensions = require("../Utilities/Dimensions");

var FrameRateLogger = require("../Interaction/FrameRateLogger");

var Keyboard = require("./Keyboard/Keyboard");

var ReactNative = require("../Renderer/shims/ReactNative");

var TextInputState = require("./TextInput/TextInputState");

var UIManager = require("../ReactNative/UIManager");

var invariant = require('invariant');

var nullthrows = require('nullthrows');

var performanceNow = require('fbjs/lib/performanceNow');

var warning = require('fbjs/lib/warning');

var _require = require("../BatchedBridge/NativeModules"),
    ScrollViewManager = _require.ScrollViewManager;

var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;
var ScrollResponderMixin = {
  _subscriptionKeyboardWillShow: null,
  _subscriptionKeyboardWillHide: null,
  _subscriptionKeyboardDidShow: null,
  _subscriptionKeyboardDidHide: null,
  scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {
    return {
      isTouching: false,
      lastMomentumScrollBeginTime: 0,
      lastMomentumScrollEndTime: 0,
      observedScrollSinceBecomingResponder: false,
      becameResponderWhileAnimating: false
    };
  },
  scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {
    if (this.props.disableScrollViewPanResponder === true) {
      return false;
    }

    return this.state.isTouching;
  },
  scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder(e) {
    if (this.props.disableScrollViewPanResponder === true) {
      return false;
    }

    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

    if (this.props.keyboardShouldPersistTaps === 'handled' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput) {
      return true;
    }

    return false;
  },
  scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {
    if (this.scrollResponderIsAnimating()) {
      return true;
    }

    if (this.props.disableScrollViewPanResponder === true) {
      return false;
    }

    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();
    var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
    var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';

    if (keyboardNeverPersistTaps && currentlyFocusedTextInput != null && e.target && !TextInputState.isTextInput(e.target)) {
      return true;
    }

    return false;
  },
  scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {},
  scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {
    return !this.state.observedScrollSinceBecomingResponder;
  },
  scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {
    var nativeEvent = e.nativeEvent;
    this.state.isTouching = nativeEvent.touches.length !== 0;
    this.props.onTouchEnd && this.props.onTouchEnd(e);
  },
  scrollResponderHandleTouchCancel: function scrollResponderHandleTouchCancel(e) {
    this.state.isTouching = false;
    this.props.onTouchCancel && this.props.onTouchCancel(e);
  },
  scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {
    this.props.onResponderRelease && this.props.onResponderRelease(e);
    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

    if (this.props.keyboardShouldPersistTaps !== true && this.props.keyboardShouldPersistTaps !== 'always' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {
      this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);
      TextInputState.blurTextInput(currentlyFocusedTextInput);
    }
  },
  scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {
    this.state.observedScrollSinceBecomingResponder = true;
    this.props.onScroll && this.props.onScroll(e);
  },
  scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {
    this.state.observedScrollSinceBecomingResponder = false;
    this.props.onResponderGrant && this.props.onResponderGrant(e);
    this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();
  },
  scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {
    FrameRateLogger.beginScroll();
    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);
  },
  scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {
    var velocity = e.nativeEvent.velocity;

    if (!this.scrollResponderIsAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
      FrameRateLogger.endScroll();
    }

    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);
  },
  scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {
    this.state.lastMomentumScrollBeginTime = performanceNow();
    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);
  },
  scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {
    FrameRateLogger.endScroll();
    this.state.lastMomentumScrollEndTime = performanceNow();
    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);
  },
  scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {
    this.state.isTouching = true;
    this.props.onTouchStart && this.props.onTouchStart(e);
  },
  scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {
    this.props.onTouchMove && this.props.onTouchMove(e);
  },
  scrollResponderIsAnimating: function scrollResponderIsAnimating() {
    var now = performanceNow();
    var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;
    var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;
    return isAnimating;
  },
  scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {
    return this.getScrollableNode ? this.getScrollableNode() : ReactNative.findNodeHandle(this);
  },
  scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {
    if (typeof x === 'number') {
      console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');
    } else {
      var _ref = x || {};

      x = _ref.x;
      y = _ref.y;
      animated = _ref.animated;
    }

    UIManager.dispatchViewManagerCommand(nullthrows(this.scrollResponderGetScrollableNode()), UIManager.getViewManagerConfig('RCTScrollView').Commands.scrollTo, [x || 0, y || 0, animated !== false]);
  },
  scrollResponderScrollToEnd: function scrollResponderScrollToEnd(options) {
    var animated = (options && options.animated) !== false;
    UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.getViewManagerConfig('RCTScrollView').Commands.scrollToEnd, [animated]);
  },
  scrollResponderScrollWithoutAnimationTo: function scrollResponderScrollWithoutAnimationTo(offsetX, offsetY) {
    console.warn('`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead');
    this.scrollResponderScrollTo({
      x: offsetX,
      y: offsetY,
      animated: false
    });
  },
  scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {
    invariant(ScrollViewManager && ScrollViewManager.zoomToRect, 'zoomToRect is not implemented');

    if ('animated' in rect) {
      animated = rect.animated;
      delete rect.animated;
    } else if (typeof animated !== 'undefined') {
      console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
    }

    ScrollViewManager.zoomToRect(this.scrollResponderGetScrollableNode(), rect, animated !== false);
  },
  scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {
    UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.getViewManagerConfig('RCTScrollView').Commands.flashScrollIndicators, []);
  },
  scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {
    this.additionalScrollOffset = additionalOffset || 0;
    this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;
    UIManager.measureLayout(nodeHandle, ReactNative.findNodeHandle(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);
  },
  scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {
    var keyboardScreenY = Dimensions.get('window').height;

    if (this.keyboardWillOpenTo) {
      keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;
    }

    var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;

    if (this.preventNegativeScrollOffset) {
      scrollOffsetY = Math.max(0, scrollOffsetY);
    }

    this.scrollResponderScrollTo({
      x: 0,
      y: scrollOffsetY,
      animated: true
    });
    this.additionalOffset = 0;
    this.preventNegativeScrollOffset = false;
  },
  scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(msg) {
    console.error('Error measuring text field: ', msg);
  },
  UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
    var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
    warning(typeof keyboardShouldPersistTaps !== 'boolean', "'keyboardShouldPersistTaps={" + keyboardShouldPersistTaps + "}' is deprecated. " + ("Use 'keyboardShouldPersistTaps=\"" + (keyboardShouldPersistTaps ? 'always' : 'never') + "\"' instead"));
    this.keyboardWillOpenTo = null;
    this.additionalScrollOffset = 0;
    this._subscriptionKeyboardWillShow = Keyboard.addListener('keyboardWillShow', this.scrollResponderKeyboardWillShow);
    this._subscriptionKeyboardWillHide = Keyboard.addListener('keyboardWillHide', this.scrollResponderKeyboardWillHide);
    this._subscriptionKeyboardDidShow = Keyboard.addListener('keyboardDidShow', this.scrollResponderKeyboardDidShow);
    this._subscriptionKeyboardDidHide = Keyboard.addListener('keyboardDidHide', this.scrollResponderKeyboardDidHide);
  },
  componentWillUnmount: function componentWillUnmount() {
    if (this._subscriptionKeyboardWillShow != null) {
      this._subscriptionKeyboardWillShow.remove();
    }

    if (this._subscriptionKeyboardWillHide != null) {
      this._subscriptionKeyboardWillHide.remove();
    }

    if (this._subscriptionKeyboardDidShow != null) {
      this._subscriptionKeyboardDidShow.remove();
    }

    if (this._subscriptionKeyboardDidHide != null) {
      this._subscriptionKeyboardDidHide.remove();
    }
  },
  scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {
    this.keyboardWillOpenTo = e;
    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);
  },
  scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {
    this.keyboardWillOpenTo = null;
    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);
  },
  scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {
    if (e) {
      this.keyboardWillOpenTo = e;
    }

    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);
  },
  scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {
    this.keyboardWillOpenTo = null;
    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);
  }
};
var ScrollResponder = {
  Mixin: ScrollResponderMixin
};
module.exports = ScrollResponder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjcm9sbFJlc3BvbmRlci5qcyJdLCJuYW1lcyI6WyJEaW1lbnNpb25zIiwicmVxdWlyZSIsIkZyYW1lUmF0ZUxvZ2dlciIsIktleWJvYXJkIiwiUmVhY3ROYXRpdmUiLCJUZXh0SW5wdXRTdGF0ZSIsIlVJTWFuYWdlciIsImludmFyaWFudCIsIm51bGx0aHJvd3MiLCJwZXJmb3JtYW5jZU5vdyIsIndhcm5pbmciLCJTY3JvbGxWaWV3TWFuYWdlciIsIklTX0FOSU1BVElOR19UT1VDSF9TVEFSVF9USFJFU0hPTERfTVMiLCJTY3JvbGxSZXNwb25kZXJNaXhpbiIsIl9zdWJzY3JpcHRpb25LZXlib2FyZFdpbGxTaG93IiwiX3N1YnNjcmlwdGlvbktleWJvYXJkV2lsbEhpZGUiLCJfc3Vic2NyaXB0aW9uS2V5Ym9hcmREaWRTaG93IiwiX3N1YnNjcmlwdGlvbktleWJvYXJkRGlkSGlkZSIsInNjcm9sbFJlc3BvbmRlck1peGluR2V0SW5pdGlhbFN0YXRlIiwiaXNUb3VjaGluZyIsImxhc3RNb21lbnR1bVNjcm9sbEJlZ2luVGltZSIsImxhc3RNb21lbnR1bVNjcm9sbEVuZFRpbWUiLCJvYnNlcnZlZFNjcm9sbFNpbmNlQmVjb21pbmdSZXNwb25kZXIiLCJiZWNhbWVSZXNwb25kZXJXaGlsZUFuaW1hdGluZyIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbFNob3VsZFNldFJlc3BvbmRlciIsInByb3BzIiwiZGlzYWJsZVNjcm9sbFZpZXdQYW5SZXNwb25kZXIiLCJzdGF0ZSIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyIiwiZSIsImN1cnJlbnRseUZvY3VzZWRUZXh0SW5wdXQiLCJjdXJyZW50bHlGb2N1c2VkRmllbGQiLCJrZXlib2FyZFNob3VsZFBlcnNpc3RUYXBzIiwidGFyZ2V0Iiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlU3RhcnRTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlIiwic2Nyb2xsUmVzcG9uZGVySXNBbmltYXRpbmciLCJrZXlib2FyZE5ldmVyUGVyc2lzdFRhcHMiLCJpc1RleHRJbnB1dCIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVJlc3BvbmRlclJlamVjdCIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVRlcm1pbmF0aW9uUmVxdWVzdCIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVRvdWNoRW5kIiwibmF0aXZlRXZlbnQiLCJ0b3VjaGVzIiwibGVuZ3RoIiwib25Ub3VjaEVuZCIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVRvdWNoQ2FuY2VsIiwib25Ub3VjaENhbmNlbCIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVJlc3BvbmRlclJlbGVhc2UiLCJvblJlc3BvbmRlclJlbGVhc2UiLCJvblNjcm9sbFJlc3BvbmRlcktleWJvYXJkRGlzbWlzc2VkIiwiYmx1clRleHRJbnB1dCIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbCIsIm9uU2Nyb2xsIiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlUmVzcG9uZGVyR3JhbnQiLCJvblJlc3BvbmRlckdyYW50Iiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlU2Nyb2xsQmVnaW5EcmFnIiwiYmVnaW5TY3JvbGwiLCJvblNjcm9sbEJlZ2luRHJhZyIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbEVuZERyYWciLCJ2ZWxvY2l0eSIsIngiLCJ5IiwiZW5kU2Nyb2xsIiwib25TY3JvbGxFbmREcmFnIiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlTW9tZW50dW1TY3JvbGxCZWdpbiIsIm9uTW9tZW50dW1TY3JvbGxCZWdpbiIsInNjcm9sbFJlc3BvbmRlckhhbmRsZU1vbWVudHVtU2Nyb2xsRW5kIiwib25Nb21lbnR1bVNjcm9sbEVuZCIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVRvdWNoU3RhcnQiLCJvblRvdWNoU3RhcnQiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaE1vdmUiLCJvblRvdWNoTW92ZSIsIm5vdyIsInRpbWVTaW5jZUxhc3RNb21lbnR1bVNjcm9sbEVuZCIsImlzQW5pbWF0aW5nIiwic2Nyb2xsUmVzcG9uZGVyR2V0U2Nyb2xsYWJsZU5vZGUiLCJnZXRTY3JvbGxhYmxlTm9kZSIsImZpbmROb2RlSGFuZGxlIiwic2Nyb2xsUmVzcG9uZGVyU2Nyb2xsVG8iLCJhbmltYXRlZCIsImNvbnNvbGUiLCJ3YXJuIiwiZGlzcGF0Y2hWaWV3TWFuYWdlckNvbW1hbmQiLCJnZXRWaWV3TWFuYWdlckNvbmZpZyIsIkNvbW1hbmRzIiwic2Nyb2xsVG8iLCJzY3JvbGxSZXNwb25kZXJTY3JvbGxUb0VuZCIsIm9wdGlvbnMiLCJzY3JvbGxUb0VuZCIsInNjcm9sbFJlc3BvbmRlclNjcm9sbFdpdGhvdXRBbmltYXRpb25UbyIsIm9mZnNldFgiLCJvZmZzZXRZIiwic2Nyb2xsUmVzcG9uZGVyWm9vbVRvIiwicmVjdCIsInpvb21Ub1JlY3QiLCJzY3JvbGxSZXNwb25kZXJGbGFzaFNjcm9sbEluZGljYXRvcnMiLCJmbGFzaFNjcm9sbEluZGljYXRvcnMiLCJzY3JvbGxSZXNwb25kZXJTY3JvbGxOYXRpdmVIYW5kbGVUb0tleWJvYXJkIiwibm9kZUhhbmRsZSIsImFkZGl0aW9uYWxPZmZzZXQiLCJwcmV2ZW50TmVnYXRpdmVTY3JvbGxPZmZzZXQiLCJhZGRpdGlvbmFsU2Nyb2xsT2Zmc2V0IiwibWVhc3VyZUxheW91dCIsImdldElubmVyVmlld05vZGUiLCJzY3JvbGxSZXNwb25kZXJUZXh0SW5wdXRGb2N1c0Vycm9yIiwic2Nyb2xsUmVzcG9uZGVySW5wdXRNZWFzdXJlQW5kU2Nyb2xsVG9LZXlib2FyZCIsImxlZnQiLCJ0b3AiLCJ3aWR0aCIsImhlaWdodCIsImtleWJvYXJkU2NyZWVuWSIsImdldCIsImtleWJvYXJkV2lsbE9wZW5UbyIsImVuZENvb3JkaW5hdGVzIiwic2NyZWVuWSIsInNjcm9sbE9mZnNldFkiLCJNYXRoIiwibWF4IiwibXNnIiwiZXJyb3IiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiYWRkTGlzdGVuZXIiLCJzY3JvbGxSZXNwb25kZXJLZXlib2FyZFdpbGxTaG93Iiwic2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmRXaWxsSGlkZSIsInNjcm9sbFJlc3BvbmRlcktleWJvYXJkRGlkU2hvdyIsInNjcm9sbFJlc3BvbmRlcktleWJvYXJkRGlkSGlkZSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicmVtb3ZlIiwib25LZXlib2FyZFdpbGxTaG93Iiwib25LZXlib2FyZFdpbGxIaWRlIiwib25LZXlib2FyZERpZFNob3ciLCJvbktleWJvYXJkRGlkSGlkZSIsIlNjcm9sbFJlc3BvbmRlciIsIk1peGluIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7O0FBRUEsSUFBTUEsVUFBVSxHQUFHQyxPQUFPLDJCQUExQjs7QUFDQSxJQUFNQyxlQUFlLEdBQUdELE9BQU8sa0NBQS9COztBQUNBLElBQU1FLFFBQVEsR0FBR0YsT0FBTyx1QkFBeEI7O0FBQ0EsSUFBTUcsV0FBVyxHQUFHSCxPQUFPLGlDQUEzQjs7QUFDQSxJQUFNSSxjQUFjLEdBQUdKLE9BQU8sOEJBQTlCOztBQUNBLElBQU1LLFNBQVMsR0FBR0wsT0FBTyw0QkFBekI7O0FBRUEsSUFBTU0sU0FBUyxHQUFHTixPQUFPLENBQUMsV0FBRCxDQUF6Qjs7QUFDQSxJQUFNTyxVQUFVLEdBQUdQLE9BQU8sQ0FBQyxZQUFELENBQTFCOztBQUNBLElBQU1RLGNBQWMsR0FBR1IsT0FBTyxDQUFDLHlCQUFELENBQTlCOztBQUNBLElBQU1TLE9BQU8sR0FBR1QsT0FBTyxDQUFDLGtCQUFELENBQXZCOztlQUU0QkEsT0FBTyxrQztJQUE1QlUsaUIsWUFBQUEsaUI7O0FBb0ZQLElBQU1DLHFDQUFxQyxHQUFHLEVBQTlDO0FBVUEsSUFBTUMsb0JBQW9CLEdBQUc7QUFDM0JDLEVBQUFBLDZCQUE2QixFQUFHLElBREw7QUFFM0JDLEVBQUFBLDZCQUE2QixFQUFHLElBRkw7QUFHM0JDLEVBQUFBLDRCQUE0QixFQUFHLElBSEo7QUFJM0JDLEVBQUFBLDRCQUE0QixFQUFHLElBSko7QUFLM0JDLEVBQUFBLG1DQUFtQyxFQUFFLCtDQUFrQjtBQUNyRCxXQUFPO0FBQ0xDLE1BQUFBLFVBQVUsRUFBRSxLQURQO0FBRUxDLE1BQUFBLDJCQUEyQixFQUFFLENBRnhCO0FBR0xDLE1BQUFBLHlCQUF5QixFQUFFLENBSHRCO0FBVUxDLE1BQUFBLG9DQUFvQyxFQUFFLEtBVmpDO0FBV0xDLE1BQUFBLDZCQUE2QixFQUFFO0FBWDFCLEtBQVA7QUFhRCxHQW5CMEI7QUF3QjNCQyxFQUFBQSw2Q0FBNkMsRUFBRSx5REFBb0I7QUFFakUsUUFBSSxLQUFLQyxLQUFMLENBQVdDLDZCQUFYLEtBQTZDLElBQWpELEVBQXVEO0FBQ3JELGFBQU8sS0FBUDtBQUNEOztBQUNELFdBQU8sS0FBS0MsS0FBTCxDQUFXUixVQUFsQjtBQUNELEdBOUIwQjtBQXlEM0JTLEVBQUFBLDRDQUE0QyxFQUFFLHNEQUM1Q0MsQ0FENEMsRUFFbkM7QUFFVCxRQUFJLEtBQUtKLEtBQUwsQ0FBV0MsNkJBQVgsS0FBNkMsSUFBakQsRUFBdUQ7QUFDckQsYUFBTyxLQUFQO0FBQ0Q7O0FBRUQsUUFBTUkseUJBQXlCLEdBQUd6QixjQUFjLENBQUMwQixxQkFBZixFQUFsQzs7QUFFQSxRQUNFLEtBQUtOLEtBQUwsQ0FBV08seUJBQVgsS0FBeUMsU0FBekMsSUFDQUYseUJBQXlCLElBQUksSUFEN0IsSUFFQUQsQ0FBQyxDQUFDSSxNQUFGLEtBQWFILHlCQUhmLEVBSUU7QUFDQSxhQUFPLElBQVA7QUFDRDs7QUFDRCxXQUFPLEtBQVA7QUFDRCxHQTNFMEI7QUF3RjNCSSxFQUFBQSxtREFBbUQsRUFBRSw2REFDbkRMLENBRG1ELEVBRTFDO0FBR1QsUUFBSSxLQUFLTSwwQkFBTCxFQUFKLEVBQXVDO0FBQ3JDLGFBQU8sSUFBUDtBQUNEOztBQUdELFFBQUksS0FBS1YsS0FBTCxDQUFXQyw2QkFBWCxLQUE2QyxJQUFqRCxFQUF1RDtBQUNyRCxhQUFPLEtBQVA7QUFDRDs7QUFNRCxRQUFNSSx5QkFBeUIsR0FBR3pCLGNBQWMsQ0FBQzBCLHFCQUFmLEVBQWxDO0FBaEJTLFFBaUJGQyx5QkFqQkUsR0FpQjJCLEtBQUtQLEtBakJoQyxDQWlCRk8seUJBakJFO0FBa0JULFFBQU1JLHdCQUF3QixHQUM1QixDQUFDSix5QkFBRCxJQUE4QkEseUJBQXlCLEtBQUssT0FEOUQ7O0FBRUEsUUFDRUksd0JBQXdCLElBQ3hCTix5QkFBeUIsSUFBSSxJQUQ3QixJQUVBRCxDQUFDLENBQUNJLE1BRkYsSUFHQSxDQUFDNUIsY0FBYyxDQUFDZ0MsV0FBZixDQUEyQlIsQ0FBQyxDQUFDSSxNQUE3QixDQUpILEVBS0U7QUFDQSxhQUFPLElBQVA7QUFDRDs7QUFFRCxXQUFPLEtBQVA7QUFDRCxHQXhIMEI7QUFvSTNCSyxFQUFBQSxvQ0FBb0MsRUFBRSxnREFBVyxDQUFFLENBcEl4QjtBQXFKM0JDLEVBQUFBLHVDQUF1QyxFQUFFLG1EQUFvQjtBQUMzRCxXQUFPLENBQUMsS0FBS1osS0FBTCxDQUFXTCxvQ0FBbkI7QUFDRCxHQXZKMEI7QUE4SjNCa0IsRUFBQUEsNkJBQTZCLEVBQUUsdUNBQVNYLENBQVQsRUFBd0I7QUFDckQsUUFBTVksV0FBVyxHQUFHWixDQUFDLENBQUNZLFdBQXRCO0FBQ0EsU0FBS2QsS0FBTCxDQUFXUixVQUFYLEdBQXdCc0IsV0FBVyxDQUFDQyxPQUFaLENBQW9CQyxNQUFwQixLQUErQixDQUF2RDtBQUNBLFNBQUtsQixLQUFMLENBQVdtQixVQUFYLElBQXlCLEtBQUtuQixLQUFMLENBQVdtQixVQUFYLENBQXNCZixDQUF0QixDQUF6QjtBQUNELEdBbEswQjtBQXlLM0JnQixFQUFBQSxnQ0FBZ0MsRUFBRSwwQ0FBU2hCLENBQVQsRUFBd0I7QUFDeEQsU0FBS0YsS0FBTCxDQUFXUixVQUFYLEdBQXdCLEtBQXhCO0FBQ0EsU0FBS00sS0FBTCxDQUFXcUIsYUFBWCxJQUE0QixLQUFLckIsS0FBTCxDQUFXcUIsYUFBWCxDQUF5QmpCLENBQXpCLENBQTVCO0FBQ0QsR0E1SzBCO0FBaUwzQmtCLEVBQUFBLHFDQUFxQyxFQUFFLCtDQUFTbEIsQ0FBVCxFQUF3QjtBQUM3RCxTQUFLSixLQUFMLENBQVd1QixrQkFBWCxJQUFpQyxLQUFLdkIsS0FBTCxDQUFXdUIsa0JBQVgsQ0FBOEJuQixDQUE5QixDQUFqQztBQUlBLFFBQU1DLHlCQUF5QixHQUFHekIsY0FBYyxDQUFDMEIscUJBQWYsRUFBbEM7O0FBQ0EsUUFDRSxLQUFLTixLQUFMLENBQVdPLHlCQUFYLEtBQXlDLElBQXpDLElBQ0EsS0FBS1AsS0FBTCxDQUFXTyx5QkFBWCxLQUF5QyxRQUR6QyxJQUVBRix5QkFBeUIsSUFBSSxJQUY3QixJQUdBRCxDQUFDLENBQUNJLE1BQUYsS0FBYUgseUJBSGIsSUFJQSxDQUFDLEtBQUtILEtBQUwsQ0FBV0wsb0NBSlosSUFLQSxDQUFDLEtBQUtLLEtBQUwsQ0FBV0osNkJBTmQsRUFPRTtBQUNBLFdBQUtFLEtBQUwsQ0FBV3dCLGtDQUFYLElBQ0UsS0FBS3hCLEtBQUwsQ0FBV3dCLGtDQUFYLENBQThDcEIsQ0FBOUMsQ0FERjtBQUVBeEIsTUFBQUEsY0FBYyxDQUFDNkMsYUFBZixDQUE2QnBCLHlCQUE3QjtBQUNEO0FBQ0YsR0FuTTBCO0FBcU0zQnFCLEVBQUFBLDJCQUEyQixFQUFFLHFDQUFTdEIsQ0FBVCxFQUF5QjtBQUNwRCxTQUFLRixLQUFMLENBQVdMLG9DQUFYLEdBQWtELElBQWxEO0FBQ0EsU0FBS0csS0FBTCxDQUFXMkIsUUFBWCxJQUF1QixLQUFLM0IsS0FBTCxDQUFXMkIsUUFBWCxDQUFvQnZCLENBQXBCLENBQXZCO0FBQ0QsR0F4TTBCO0FBNk0zQndCLEVBQUFBLG1DQUFtQyxFQUFFLDZDQUFTeEIsQ0FBVCxFQUF5QjtBQUM1RCxTQUFLRixLQUFMLENBQVdMLG9DQUFYLEdBQWtELEtBQWxEO0FBQ0EsU0FBS0csS0FBTCxDQUFXNkIsZ0JBQVgsSUFBK0IsS0FBSzdCLEtBQUwsQ0FBVzZCLGdCQUFYLENBQTRCekIsQ0FBNUIsQ0FBL0I7QUFDQSxTQUFLRixLQUFMLENBQVdKLDZCQUFYLEdBQTJDLEtBQUtZLDBCQUFMLEVBQTNDO0FBQ0QsR0FqTjBCO0FBME4zQm9CLEVBQUFBLG9DQUFvQyxFQUFFLDhDQUFTMUIsQ0FBVCxFQUF5QjtBQUM3RDNCLElBQUFBLGVBQWUsQ0FBQ3NELFdBQWhCO0FBQ0EsU0FBSy9CLEtBQUwsQ0FBV2dDLGlCQUFYLElBQWdDLEtBQUtoQyxLQUFMLENBQVdnQyxpQkFBWCxDQUE2QjVCLENBQTdCLENBQWhDO0FBQ0QsR0E3TjBCO0FBa08zQjZCLEVBQUFBLGtDQUFrQyxFQUFFLDRDQUFTN0IsQ0FBVCxFQUF5QjtBQUFBLFFBQ3BEOEIsUUFEb0QsR0FDeEM5QixDQUFDLENBQUNZLFdBRHNDLENBQ3BEa0IsUUFEb0Q7O0FBTzNELFFBQ0UsQ0FBQyxLQUFLeEIsMEJBQUwsRUFBRCxLQUNDLENBQUN3QixRQUFELElBQWNBLFFBQVEsQ0FBQ0MsQ0FBVCxLQUFlLENBQWYsSUFBb0JELFFBQVEsQ0FBQ0UsQ0FBVCxLQUFlLENBRGxELENBREYsRUFHRTtBQUNBM0QsTUFBQUEsZUFBZSxDQUFDNEQsU0FBaEI7QUFDRDs7QUFDRCxTQUFLckMsS0FBTCxDQUFXc0MsZUFBWCxJQUE4QixLQUFLdEMsS0FBTCxDQUFXc0MsZUFBWCxDQUEyQmxDLENBQTNCLENBQTlCO0FBQ0QsR0FoUDBCO0FBcVAzQm1DLEVBQUFBLHdDQUF3QyxFQUFFLGtEQUFTbkMsQ0FBVCxFQUF5QjtBQUNqRSxTQUFLRixLQUFMLENBQVdQLDJCQUFYLEdBQXlDWCxjQUFjLEVBQXZEO0FBQ0EsU0FBS2dCLEtBQUwsQ0FBV3dDLHFCQUFYLElBQW9DLEtBQUt4QyxLQUFMLENBQVd3QyxxQkFBWCxDQUFpQ3BDLENBQWpDLENBQXBDO0FBQ0QsR0F4UDBCO0FBNlAzQnFDLEVBQUFBLHNDQUFzQyxFQUFFLGdEQUFTckMsQ0FBVCxFQUF5QjtBQUMvRDNCLElBQUFBLGVBQWUsQ0FBQzRELFNBQWhCO0FBQ0EsU0FBS25DLEtBQUwsQ0FBV04seUJBQVgsR0FBdUNaLGNBQWMsRUFBckQ7QUFDQSxTQUFLZ0IsS0FBTCxDQUFXMEMsbUJBQVgsSUFBa0MsS0FBSzFDLEtBQUwsQ0FBVzBDLG1CQUFYLENBQStCdEMsQ0FBL0IsQ0FBbEM7QUFDRCxHQWpRMEI7QUE4UTNCdUMsRUFBQUEsK0JBQStCLEVBQUUseUNBQVN2QyxDQUFULEVBQXdCO0FBQ3ZELFNBQUtGLEtBQUwsQ0FBV1IsVUFBWCxHQUF3QixJQUF4QjtBQUNBLFNBQUtNLEtBQUwsQ0FBVzRDLFlBQVgsSUFBMkIsS0FBSzVDLEtBQUwsQ0FBVzRDLFlBQVgsQ0FBd0J4QyxDQUF4QixDQUEzQjtBQUNELEdBalIwQjtBQThSM0J5QyxFQUFBQSw4QkFBOEIsRUFBRSx3Q0FBU3pDLENBQVQsRUFBd0I7QUFDdEQsU0FBS0osS0FBTCxDQUFXOEMsV0FBWCxJQUEwQixLQUFLOUMsS0FBTCxDQUFXOEMsV0FBWCxDQUF1QjFDLENBQXZCLENBQTFCO0FBQ0QsR0FoUzBCO0FBdVMzQk0sRUFBQUEsMEJBQTBCLEVBQUUsc0NBQW9CO0FBQzlDLFFBQU1xQyxHQUFHLEdBQUcvRCxjQUFjLEVBQTFCO0FBQ0EsUUFBTWdFLDhCQUE4QixHQUNsQ0QsR0FBRyxHQUFHLEtBQUs3QyxLQUFMLENBQVdOLHlCQURuQjtBQUVBLFFBQU1xRCxXQUFXLEdBQ2ZELDhCQUE4QixHQUFHN0QscUNBQWpDLElBQ0EsS0FBS2UsS0FBTCxDQUFXTix5QkFBWCxHQUNFLEtBQUtNLEtBQUwsQ0FBV1AsMkJBSGY7QUFJQSxXQUFPc0QsV0FBUDtBQUNELEdBaFQwQjtBQXVUM0JDLEVBQUFBLGdDQUFnQyxFQUFFLDRDQUFvQjtBQUNwRCxXQUFPLEtBQUtDLGlCQUFMLEdBQ0gsS0FBS0EsaUJBQUwsRUFERyxHQUVIeEUsV0FBVyxDQUFDeUUsY0FBWixDQUEyQixJQUEzQixDQUZKO0FBR0QsR0EzVDBCO0FBd1UzQkMsRUFBQUEsdUJBQXVCLEVBQUUsaUNBQ3ZCbEIsQ0FEdUIsRUFFdkJDLENBRnVCLEVBR3ZCa0IsUUFIdUIsRUFJdkI7QUFDQSxRQUFJLE9BQU9uQixDQUFQLEtBQWEsUUFBakIsRUFBMkI7QUFDekJvQixNQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FDRSwrSEFERjtBQUdELEtBSkQsTUFJTztBQUFBLGlCQUNlckIsQ0FBQyxJQUFJLEVBRHBCOztBQUNIQSxNQUFBQSxDQURHLFFBQ0hBLENBREc7QUFDQUMsTUFBQUEsQ0FEQSxRQUNBQSxDQURBO0FBQ0drQixNQUFBQSxRQURILFFBQ0dBLFFBREg7QUFFTjs7QUFDRHpFLElBQUFBLFNBQVMsQ0FBQzRFLDBCQUFWLENBQ0UxRSxVQUFVLENBQUMsS0FBS21FLGdDQUFMLEVBQUQsQ0FEWixFQUVFckUsU0FBUyxDQUFDNkUsb0JBQVYsQ0FBK0IsZUFBL0IsRUFBZ0RDLFFBQWhELENBQXlEQyxRQUYzRCxFQUdFLENBQUN6QixDQUFDLElBQUksQ0FBTixFQUFTQyxDQUFDLElBQUksQ0FBZCxFQUFpQmtCLFFBQVEsS0FBSyxLQUE5QixDQUhGO0FBS0QsR0F6VjBCO0FBbVczQk8sRUFBQUEsMEJBQTBCLEVBQUUsb0NBQVNDLE9BQVQsRUFBeUM7QUFFbkUsUUFBTVIsUUFBUSxHQUFHLENBQUNRLE9BQU8sSUFBSUEsT0FBTyxDQUFDUixRQUFwQixNQUFrQyxLQUFuRDtBQUNBekUsSUFBQUEsU0FBUyxDQUFDNEUsMEJBQVYsQ0FDRSxLQUFLUCxnQ0FBTCxFQURGLEVBRUVyRSxTQUFTLENBQUM2RSxvQkFBVixDQUErQixlQUEvQixFQUFnREMsUUFBaEQsQ0FBeURJLFdBRjNELEVBR0UsQ0FBQ1QsUUFBRCxDQUhGO0FBS0QsR0EzVzBCO0FBZ1gzQlUsRUFBQUEsdUNBQXVDLEVBQUUsaURBQ3ZDQyxPQUR1QyxFQUV2Q0MsT0FGdUMsRUFHdkM7QUFDQVgsSUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQ0UsZ0dBREY7QUFHQSxTQUFLSCx1QkFBTCxDQUE2QjtBQUFDbEIsTUFBQUEsQ0FBQyxFQUFFOEIsT0FBSjtBQUFhN0IsTUFBQUEsQ0FBQyxFQUFFOEIsT0FBaEI7QUFBeUJaLE1BQUFBLFFBQVEsRUFBRTtBQUFuQyxLQUE3QjtBQUNELEdBeFgwQjtBQWdZM0JhLEVBQUFBLHFCQUFxQixFQUFFLCtCQUNyQkMsSUFEcUIsRUFRckJkLFFBUnFCLEVBU3JCO0FBQ0F4RSxJQUFBQSxTQUFTLENBQ1BJLGlCQUFpQixJQUFJQSxpQkFBaUIsQ0FBQ21GLFVBRGhDLEVBRVAsK0JBRk8sQ0FBVDs7QUFJQSxRQUFJLGNBQWNELElBQWxCLEVBQXdCO0FBQ3RCZCxNQUFBQSxRQUFRLEdBQUdjLElBQUksQ0FBQ2QsUUFBaEI7QUFDQSxhQUFPYyxJQUFJLENBQUNkLFFBQVo7QUFDRCxLQUhELE1BR08sSUFBSSxPQUFPQSxRQUFQLEtBQW9CLFdBQXhCLEVBQXFDO0FBQzFDQyxNQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FDRSwyRkFERjtBQUdEOztBQUNEdEUsSUFBQUEsaUJBQWlCLENBQUNtRixVQUFsQixDQUNFLEtBQUtuQixnQ0FBTCxFQURGLEVBRUVrQixJQUZGLEVBR0VkLFFBQVEsS0FBSyxLQUhmO0FBS0QsR0EzWjBCO0FBZ2EzQmdCLEVBQUFBLG9DQUFvQyxFQUFFLGdEQUFXO0FBQy9DekYsSUFBQUEsU0FBUyxDQUFDNEUsMEJBQVYsQ0FDRSxLQUFLUCxnQ0FBTCxFQURGLEVBRUVyRSxTQUFTLENBQUM2RSxvQkFBVixDQUErQixlQUEvQixFQUFnREMsUUFBaEQsQ0FDR1kscUJBSEwsRUFJRSxFQUpGO0FBTUQsR0F2YTBCO0FBbWIzQkMsRUFBQUEsMkNBQTJDLEVBQUUscURBQzNDQyxVQUQyQyxFQUUzQ0MsZ0JBRjJDLEVBRzNDQywyQkFIMkMsRUFJM0M7QUFDQSxTQUFLQyxzQkFBTCxHQUE4QkYsZ0JBQWdCLElBQUksQ0FBbEQ7QUFDQSxTQUFLQywyQkFBTCxHQUFtQyxDQUFDLENBQUNBLDJCQUFyQztBQUNBOUYsSUFBQUEsU0FBUyxDQUFDZ0csYUFBVixDQUNFSixVQURGLEVBRUU5RixXQUFXLENBQUN5RSxjQUFaLENBQTJCLEtBQUswQixnQkFBTCxFQUEzQixDQUZGLEVBR0UsS0FBS0Msa0NBSFAsRUFJRSxLQUFLQyw4Q0FKUDtBQU1ELEdBaGMwQjtBQTRjM0JBLEVBQUFBLDhDQUE4QyxFQUFFLHdEQUM5Q0MsSUFEOEMsRUFFOUNDLEdBRjhDLEVBRzlDQyxLQUg4QyxFQUk5Q0MsTUFKOEMsRUFLOUM7QUFDQSxRQUFJQyxlQUFlLEdBQUc5RyxVQUFVLENBQUMrRyxHQUFYLENBQWUsUUFBZixFQUF5QkYsTUFBL0M7O0FBQ0EsUUFBSSxLQUFLRyxrQkFBVCxFQUE2QjtBQUMzQkYsTUFBQUEsZUFBZSxHQUFHLEtBQUtFLGtCQUFMLENBQXdCQyxjQUF4QixDQUF1Q0MsT0FBekQ7QUFDRDs7QUFDRCxRQUFJQyxhQUFhLEdBQ2ZSLEdBQUcsR0FBR0csZUFBTixHQUF3QkQsTUFBeEIsR0FBaUMsS0FBS1Isc0JBRHhDOztBQU9BLFFBQUksS0FBS0QsMkJBQVQsRUFBc0M7QUFDcENlLE1BQUFBLGFBQWEsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQVMsQ0FBVCxFQUFZRixhQUFaLENBQWhCO0FBQ0Q7O0FBQ0QsU0FBS3JDLHVCQUFMLENBQTZCO0FBQUNsQixNQUFBQSxDQUFDLEVBQUUsQ0FBSjtBQUFPQyxNQUFBQSxDQUFDLEVBQUVzRCxhQUFWO0FBQXlCcEMsTUFBQUEsUUFBUSxFQUFFO0FBQW5DLEtBQTdCO0FBRUEsU0FBS29CLGdCQUFMLEdBQXdCLENBQXhCO0FBQ0EsU0FBS0MsMkJBQUwsR0FBbUMsS0FBbkM7QUFDRCxHQXBlMEI7QUFzZTNCSSxFQUFBQSxrQ0FBa0MsRUFBRSw0Q0FBU2MsR0FBVCxFQUFzQjtBQUN4RHRDLElBQUFBLE9BQU8sQ0FBQ3VDLEtBQVIsQ0FBYyw4QkFBZCxFQUE4Q0QsR0FBOUM7QUFDRCxHQXhlMEI7QUFnZjNCRSxFQUFBQSx5QkFBeUIsRUFBRSxxQ0FBVztBQUFBLFFBQzdCeEYseUJBRDZCLEdBQ0EsS0FBS1AsS0FETCxDQUM3Qk8seUJBRDZCO0FBRXBDdEIsSUFBQUEsT0FBTyxDQUNMLE9BQU9zQix5QkFBUCxLQUFxQyxTQURoQyxFQUVMLGlDQUErQkEseUJBQS9CLGtFQUVJQSx5QkFBeUIsR0FBRyxRQUFILEdBQWMsT0FGM0Msa0JBRkssQ0FBUDtBQVFBLFNBQUtnRixrQkFBTCxHQUEwQixJQUExQjtBQUNBLFNBQUtYLHNCQUFMLEdBQThCLENBQTlCO0FBQ0EsU0FBS3ZGLDZCQUFMLEdBQXFDWCxRQUFRLENBQUNzSCxXQUFULENBQ25DLGtCQURtQyxFQUVuQyxLQUFLQywrQkFGOEIsQ0FBckM7QUFLQSxTQUFLM0csNkJBQUwsR0FBcUNaLFFBQVEsQ0FBQ3NILFdBQVQsQ0FDbkMsa0JBRG1DLEVBRW5DLEtBQUtFLCtCQUY4QixDQUFyQztBQUlBLFNBQUszRyw0QkFBTCxHQUFvQ2IsUUFBUSxDQUFDc0gsV0FBVCxDQUNsQyxpQkFEa0MsRUFFbEMsS0FBS0csOEJBRjZCLENBQXBDO0FBSUEsU0FBSzNHLDRCQUFMLEdBQW9DZCxRQUFRLENBQUNzSCxXQUFULENBQ2xDLGlCQURrQyxFQUVsQyxLQUFLSSw4QkFGNkIsQ0FBcEM7QUFJRCxHQTdnQjBCO0FBK2dCM0JDLEVBQUFBLG9CQUFvQixFQUFFLGdDQUFXO0FBQy9CLFFBQUksS0FBS2hILDZCQUFMLElBQXNDLElBQTFDLEVBQWdEO0FBQzlDLFdBQUtBLDZCQUFMLENBQW1DaUgsTUFBbkM7QUFDRDs7QUFDRCxRQUFJLEtBQUtoSCw2QkFBTCxJQUFzQyxJQUExQyxFQUFnRDtBQUM5QyxXQUFLQSw2QkFBTCxDQUFtQ2dILE1BQW5DO0FBQ0Q7O0FBQ0QsUUFBSSxLQUFLL0csNEJBQUwsSUFBcUMsSUFBekMsRUFBK0M7QUFDN0MsV0FBS0EsNEJBQUwsQ0FBa0MrRyxNQUFsQztBQUNEOztBQUNELFFBQUksS0FBSzlHLDRCQUFMLElBQXFDLElBQXpDLEVBQStDO0FBQzdDLFdBQUtBLDRCQUFMLENBQWtDOEcsTUFBbEM7QUFDRDtBQUNGLEdBNWhCMEI7QUEwakIzQkwsRUFBQUEsK0JBQStCLEVBQUUseUNBQVM3RixDQUFULEVBQTJCO0FBQzFELFNBQUttRixrQkFBTCxHQUEwQm5GLENBQTFCO0FBQ0EsU0FBS0osS0FBTCxDQUFXdUcsa0JBQVgsSUFBaUMsS0FBS3ZHLEtBQUwsQ0FBV3VHLGtCQUFYLENBQThCbkcsQ0FBOUIsQ0FBakM7QUFDRCxHQTdqQjBCO0FBK2pCM0I4RixFQUFBQSwrQkFBK0IsRUFBRSx5Q0FBUzlGLENBQVQsRUFBMkI7QUFDMUQsU0FBS21GLGtCQUFMLEdBQTBCLElBQTFCO0FBQ0EsU0FBS3ZGLEtBQUwsQ0FBV3dHLGtCQUFYLElBQWlDLEtBQUt4RyxLQUFMLENBQVd3RyxrQkFBWCxDQUE4QnBHLENBQTlCLENBQWpDO0FBQ0QsR0Fsa0IwQjtBQW9rQjNCK0YsRUFBQUEsOEJBQThCLEVBQUUsd0NBQVMvRixDQUFULEVBQTJCO0FBR3pELFFBQUlBLENBQUosRUFBTztBQUNMLFdBQUttRixrQkFBTCxHQUEwQm5GLENBQTFCO0FBQ0Q7O0FBQ0QsU0FBS0osS0FBTCxDQUFXeUcsaUJBQVgsSUFBZ0MsS0FBS3pHLEtBQUwsQ0FBV3lHLGlCQUFYLENBQTZCckcsQ0FBN0IsQ0FBaEM7QUFDRCxHQTNrQjBCO0FBNmtCM0JnRyxFQUFBQSw4QkFBOEIsRUFBRSx3Q0FBU2hHLENBQVQsRUFBMkI7QUFDekQsU0FBS21GLGtCQUFMLEdBQTBCLElBQTFCO0FBQ0EsU0FBS3ZGLEtBQUwsQ0FBVzBHLGlCQUFYLElBQWdDLEtBQUsxRyxLQUFMLENBQVcwRyxpQkFBWCxDQUE2QnRHLENBQTdCLENBQWhDO0FBQ0Q7QUFobEIwQixDQUE3QjtBQW1sQkEsSUFBTXVHLGVBQWUsR0FBRztBQUN0QkMsRUFBQUEsS0FBSyxFQUFFeEg7QUFEZSxDQUF4QjtBQUlBeUgsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSCxlQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IERpbWVuc2lvbnMgPSByZXF1aXJlKCcuLi9VdGlsaXRpZXMvRGltZW5zaW9ucycpO1xuY29uc3QgRnJhbWVSYXRlTG9nZ2VyID0gcmVxdWlyZSgnLi4vSW50ZXJhY3Rpb24vRnJhbWVSYXRlTG9nZ2VyJyk7XG5jb25zdCBLZXlib2FyZCA9IHJlcXVpcmUoJy4vS2V5Ym9hcmQvS2V5Ym9hcmQnKTtcbmNvbnN0IFJlYWN0TmF0aXZlID0gcmVxdWlyZSgnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmUnKTtcbmNvbnN0IFRleHRJbnB1dFN0YXRlID0gcmVxdWlyZSgnLi9UZXh0SW5wdXQvVGV4dElucHV0U3RhdGUnKTtcbmNvbnN0IFVJTWFuYWdlciA9IHJlcXVpcmUoJy4uL1JlYWN0TmF0aXZlL1VJTWFuYWdlcicpO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcbmNvbnN0IG51bGx0aHJvd3MgPSByZXF1aXJlKCdudWxsdGhyb3dzJyk7XG5jb25zdCBwZXJmb3JtYW5jZU5vdyA9IHJlcXVpcmUoJ2ZianMvbGliL3BlcmZvcm1hbmNlTm93Jyk7XG5jb25zdCB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG5jb25zdCB7U2Nyb2xsVmlld01hbmFnZXJ9ID0gcmVxdWlyZSgnLi4vQmF0Y2hlZEJyaWRnZS9OYXRpdmVNb2R1bGVzJyk7XG5cbmltcG9ydCB0eXBlIHtQcmVzc0V2ZW50LCBTY3JvbGxFdmVudH0gZnJvbSAnLi4vVHlwZXMvQ29yZUV2ZW50VHlwZXMnO1xuaW1wb3J0IHR5cGUge0tleWJvYXJkRXZlbnR9IGZyb20gJy4vS2V5Ym9hcmQvS2V5Ym9hcmQnO1xuaW1wb3J0IHR5cGUgRW1pdHRlclN1YnNjcmlwdGlvbiBmcm9tICcuLi92ZW5kb3IvZW1pdHRlci9FbWl0dGVyU3Vic2NyaXB0aW9uJztcblxuLyoqXG4gKiBNaXhpbiB0aGF0IGNhbiBiZSBpbnRlZ3JhdGVkIGluIG9yZGVyIHRvIGhhbmRsZSBzY3JvbGxpbmcgdGhhdCBwbGF5cyB3ZWxsXG4gKiB3aXRoIGBSZXNwb25kZXJFdmVudFBsdWdpbmAuIEludGVncmF0ZSB3aXRoIHlvdXIgcGxhdGZvcm0gc3BlY2lmaWMgc2Nyb2xsXG4gKiB2aWV3cywgb3IgZXZlbiB5b3VyIGN1c3RvbSBidWlsdCAoZXZlcnktZnJhbWUgYW5pbWF0aW5nKSBzY3JvbGwgdmlld3Mgc28gdGhhdFxuICogYWxsIG9mIHRoZXNlIHN5c3RlbXMgcGxheSB3ZWxsIHdpdGggdGhlIGBSZXNwb25kZXJFdmVudFBsdWdpbmAuXG4gKlxuICogaU9TIHNjcm9sbCBldmVudCB0aW1pbmcgbnVhbmNlczpcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKlxuICogU2Nyb2xsaW5nIHdpdGhvdXQgYm91bmNpbmcsIGlmIHlvdSB0b3VjaCBkb3duOlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIDEuIGBvbk1vbWVudHVtU2Nyb2xsQmVnaW5gICh3aGVuIGFuaW1hdGlvbiBiZWdpbnMgYWZ0ZXIgbGV0dGluZyB1cClcbiAqICAgIC4uLiBwaHlzaWNhbCB0b3VjaCBzdGFydHMgLi4uXG4gKiAyLiBgb25Ub3VjaFN0YXJ0Q2FwdHVyZWAgICAod2hlbiB5b3UgcHJlc3MgZG93biB0byBzdG9wIHRoZSBzY3JvbGwpXG4gKiAzLiBgb25Ub3VjaFN0YXJ0YCAgICAgICAgICAoc2FtZSwgYnV0IGJ1YmJsZSBwaGFzZSlcbiAqIDQuIGBvblJlc3BvbmRlclJlbGVhc2VgICAgICh3aGVuIGxpZnRpbmcgdXAgLSB5b3UgY291bGQgcGF1c2UgZm9yZXZlciBiZWZvcmUgKiBsaWZ0aW5nKVxuICogNS4gYG9uTW9tZW50dW1TY3JvbGxFbmRgXG4gKlxuICpcbiAqIFNjcm9sbGluZyB3aXRoIGJvdW5jaW5nLCBpZiB5b3UgdG91Y2ggZG93bjpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiAxLiBgb25Nb21lbnR1bVNjcm9sbEJlZ2luYCAod2hlbiBhbmltYXRpb24gYmVnaW5zIGFmdGVyIGxldHRpbmcgdXApXG4gKiAgICAuLi4gYm91bmNlIGJlZ2lucyAuLi5cbiAqICAgIC4uLiBzb21lIHRpbWUgZWxhcHNlcyAuLi5cbiAqICAgIC4uLiBwaHlzaWNhbCB0b3VjaCBkdXJpbmcgYm91bmNlIC4uLlxuICogMi4gYG9uTW9tZW50dW1TY3JvbGxFbmRgICAgKE1ha2VzIG5vIHNlbnNlIHdoeSB0aGlzIG9jY3VycyBmaXJzdCBkdXJpbmcgYm91bmNlKVxuICogMy4gYG9uVG91Y2hTdGFydENhcHR1cmVgICAgKGltbWVkaWF0ZWx5IGFmdGVyIGBvbk1vbWVudHVtU2Nyb2xsRW5kYClcbiAqIDQuIGBvblRvdWNoU3RhcnRgICAgICAgICAgIChzYW1lLCBidXQgYnViYmxlIHBoYXNlKVxuICogNS4gYG9uVG91Y2hFbmRgICAgICAgICAgICAgKFlvdSBjb3VsZCBob2xkIHRoZSB0b3VjaCBzdGFydCBmb3IgYSBsb25nIHRpbWUpXG4gKiA2LiBgb25Nb21lbnR1bVNjcm9sbEJlZ2luYCAoV2hlbiByZWxlYXNpbmcgdGhlIHZpZXcgc3RhcnRzIGJvdW5jaW5nIGJhY2spXG4gKlxuICogU28gd2hlbiB3ZSByZWNlaXZlIGFuIGBvblRvdWNoU3RhcnRgLCBob3cgY2FuIHdlIHRlbGwgaWYgd2UgYXJlIHRvdWNoaW5nXG4gKiAqZHVyaW5nKiBhbiBhbmltYXRpb24gKHdoaWNoIHRoZW4gY2F1c2VzIHRoZSBhbmltYXRpb24gdG8gc3RvcCk/IFRoZSBvbmx5IHdheVxuICogdG8gdGVsbCBpcyBpZiB0aGUgYHRvdWNoU3RhcnRgIG9jY3VycmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZVxuICogYG9uTW9tZW50dW1TY3JvbGxFbmRgLlxuICpcbiAqIFRoaXMgaXMgYWJzdHJhY3RlZCBvdXQgZm9yIHlvdSwgc28geW91IGNhbiBqdXN0IGNhbGwgdGhpcy5zY3JvbGxSZXNwb25kZXJJc0FuaW1hdGluZygpIGlmXG4gKiBuZWNlc3NhcnlcbiAqXG4gKiBgU2Nyb2xsUmVzcG9uZGVyYCBhbHNvIGluY2x1ZGVzIGxvZ2ljIGZvciBibHVycmluZyBhIGN1cnJlbnRseSBmb2N1c2VkIGlucHV0XG4gKiBpZiBvbmUgaXMgZm9jdXNlZCB3aGlsZSBzY3JvbGxpbmcuIFRoZSBgU2Nyb2xsUmVzcG9uZGVyYCBpcyBhIG5hdHVyYWwgcGxhY2VcbiAqIHRvIHB1dCB0aGlzIGxvZ2ljIHNpbmNlIGl0IGNhbiBzdXBwb3J0IG5vdCBkaXNtaXNzaW5nIHRoZSBrZXlib2FyZCB3aGlsZVxuICogc2Nyb2xsaW5nLCB1bmxlc3MgYSByZWNvZ25pemVkIFwidGFwXCItbGlrZSBnZXN0dXJlIGhhcyBvY2N1cnJlZC5cbiAqXG4gKiBUaGUgcHVibGljIGxpZmVjeWNsZSBBUEkgaW5jbHVkZXMgZXZlbnRzIGZvciBrZXlib2FyZCBpbnRlcmFjdGlvbiwgcmVzcG9uZGVyXG4gKiBpbnRlcmFjdGlvbiwgYW5kIHNjcm9sbGluZyAoYW1vbmcgb3RoZXJzKS4gVGhlIGtleWJvYXJkIGNhbGxiYWNrc1xuICogYG9uS2V5Ym9hcmRXaWxsL0RpZC8qYCBhcmUgKmdsb2JhbCogZXZlbnRzLCBidXQgYXJlIGludm9rZWQgb24gc2Nyb2xsXG4gKiByZXNwb25kZXIncyBwcm9wcyBzbyB0aGF0IHlvdSBjYW4gZ3VhcmFudGVlIHRoYXQgdGhlIHNjcm9sbCByZXNwb25kZXInc1xuICogaW50ZXJuYWwgc3RhdGUgaGFzIGJlZW4gdXBkYXRlZCBhY2NvcmRpbmdseSAoYW5kIGRldGVybWluaXN0aWNhbGx5KSBieVxuICogdGhlIHRpbWUgdGhlIHByb3BzIGNhbGxiYWNrcyBhcmUgaW52b2tlLiBPdGhlcndpc2UsIHlvdSB3b3VsZCBhbHdheXMgd29uZGVyXG4gKiBpZiB0aGUgc2Nyb2xsIHJlc3BvbmRlciBpcyBjdXJyZW50bHkgaW4gYSBzdGF0ZSB3aGVyZSBpdCByZWNvZ25pemVzIG5ld1xuICoga2V5Ym9hcmQgcG9zaXRpb25zIGV0Yy4gSWYgY29vcmRpbmF0aW5nIHNjcm9sbGluZyB3aXRoIGtleWJvYXJkIG1vdmVtZW50LFxuICogKmFsd2F5cyogdXNlIHRoZXNlIGhvb2tzIGluc3RlYWQgb2YgbGlzdGVuaW5nIHRvIHlvdXIgb3duIGdsb2JhbCBrZXlib2FyZFxuICogZXZlbnRzLlxuICpcbiAqIFB1YmxpYyBrZXlib2FyZCBsaWZlY3ljbGUgQVBJOiAocHJvcHMgY2FsbGJhY2tzKVxuICpcbiAqIFN0YW5kYXJkIEtleWJvYXJkIEFwcGVhcmFuY2UgU2VxdWVuY2U6XG4gKlxuICogICB0aGlzLnByb3BzLm9uS2V5Ym9hcmRXaWxsU2hvd1xuICogICB0aGlzLnByb3BzLm9uS2V5Ym9hcmREaWRTaG93XG4gKlxuICogYG9uU2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmREaXNtaXNzZWRgIHdpbGwgYmUgaW52b2tlZCBpZiBhbiBhcHByb3ByaWF0ZVxuICogdGFwIGluc2lkZSB0aGUgc2Nyb2xsIHJlc3BvbmRlcidzIHNjcm9sbGFibGUgcmVnaW9uIHdhcyByZXNwb25zaWJsZVxuICogZm9yIHRoZSBkaXNtaXNzYWwgb2YgdGhlIGtleWJvYXJkLiBUaGVyZSBhcmUgb3RoZXIgcmVhc29ucyB3aHkgdGhlXG4gKiBrZXlib2FyZCBjb3VsZCBiZSBkaXNtaXNzZWQuXG4gKlxuICogICB0aGlzLnByb3BzLm9uU2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmREaXNtaXNzZWRcbiAqXG4gKiBTdGFuZGFyZCBLZXlib2FyZCBIaWRlIFNlcXVlbmNlOlxuICpcbiAqICAgdGhpcy5wcm9wcy5vbktleWJvYXJkV2lsbEhpZGVcbiAqICAgdGhpcy5wcm9wcy5vbktleWJvYXJkRGlkSGlkZVxuICovXG5cbmNvbnN0IElTX0FOSU1BVElOR19UT1VDSF9TVEFSVF9USFJFU0hPTERfTVMgPSAxNjtcblxuZXhwb3J0IHR5cGUgU3RhdGUgPSB7fFxuICBpc1RvdWNoaW5nOiBib29sZWFuLFxuICBsYXN0TW9tZW50dW1TY3JvbGxCZWdpblRpbWU6IG51bWJlcixcbiAgbGFzdE1vbWVudHVtU2Nyb2xsRW5kVGltZTogbnVtYmVyLFxuICBvYnNlcnZlZFNjcm9sbFNpbmNlQmVjb21pbmdSZXNwb25kZXI6IGJvb2xlYW4sXG4gIGJlY2FtZVJlc3BvbmRlcldoaWxlQW5pbWF0aW5nOiBib29sZWFuLFxufH07XG5cbmNvbnN0IFNjcm9sbFJlc3BvbmRlck1peGluID0ge1xuICBfc3Vic2NyaXB0aW9uS2V5Ym9hcmRXaWxsU2hvdzogKG51bGw6ID9FbWl0dGVyU3Vic2NyaXB0aW9uKSxcbiAgX3N1YnNjcmlwdGlvbktleWJvYXJkV2lsbEhpZGU6IChudWxsOiA/RW1pdHRlclN1YnNjcmlwdGlvbiksXG4gIF9zdWJzY3JpcHRpb25LZXlib2FyZERpZFNob3c6IChudWxsOiA/RW1pdHRlclN1YnNjcmlwdGlvbiksXG4gIF9zdWJzY3JpcHRpb25LZXlib2FyZERpZEhpZGU6IChudWxsOiA/RW1pdHRlclN1YnNjcmlwdGlvbiksXG4gIHNjcm9sbFJlc3BvbmRlck1peGluR2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpOiBTdGF0ZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzVG91Y2hpbmc6IGZhbHNlLFxuICAgICAgbGFzdE1vbWVudHVtU2Nyb2xsQmVnaW5UaW1lOiAwLFxuICAgICAgbGFzdE1vbWVudHVtU2Nyb2xsRW5kVGltZTogMCxcblxuICAgICAgLy8gUmVzZXQgdG8gZmFsc2UgZXZlcnkgdGltZSBiZWNvbWVzIHJlc3BvbmRlci4gVGhpcyBpcyB1c2VkIHRvOlxuICAgICAgLy8gLSBEZXRlcm1pbmUgaWYgdGhlIHNjcm9sbCB2aWV3IGhhcyBiZWVuIHNjcm9sbGVkIGFuZCB0aGVyZWZvcmUgc2hvdWxkXG4gICAgICAvLyByZWZ1c2UgdG8gZ2l2ZSB1cCBpdHMgcmVzcG9uZGVyIGxvY2suXG4gICAgICAvLyAtIERldGVybWluZSBpZiByZWxlYXNpbmcgc2hvdWxkIGRpc21pc3MgdGhlIGtleWJvYXJkIHdoZW4gd2UgYXJlIGluXG4gICAgICAvLyB0YXAtdG8tZGlzbWlzcyBtb2RlICh0aGlzLnByb3BzLmtleWJvYXJkU2hvdWxkUGVyc2lzdFRhcHMgIT09ICdhbHdheXMnKS5cbiAgICAgIG9ic2VydmVkU2Nyb2xsU2luY2VCZWNvbWluZ1Jlc3BvbmRlcjogZmFsc2UsXG4gICAgICBiZWNhbWVSZXNwb25kZXJXaGlsZUFuaW1hdGluZzogZmFsc2UsXG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25TY3JvbGxgIGV2ZW50LlxuICAgKi9cbiAgc2Nyb2xsUmVzcG9uZGVySGFuZGxlU2Nyb2xsU2hvdWxkU2V0UmVzcG9uZGVyOiBmdW5jdGlvbigpOiBib29sZWFuIHtcbiAgICAvLyBBbGxvdyBhbnkgZXZlbnQgdG91Y2ggcGFzcyB0aHJvdWdoIGlmIHRoZSBkZWZhdWx0IHBhbiByZXNwb25kZXIgaXMgZGlzYWJsZWRcbiAgICBpZiAodGhpcy5wcm9wcy5kaXNhYmxlU2Nyb2xsVmlld1BhblJlc3BvbmRlciA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5pc1RvdWNoaW5nO1xuICB9LFxuXG4gIC8qKlxuICAgKiBNZXJlbHkgdG91Y2ggc3RhcnRpbmcgaXMgbm90IHN1ZmZpY2llbnQgZm9yIGEgc2Nyb2xsIHZpZXcgdG8gYmVjb21lIHRoZVxuICAgKiByZXNwb25kZXIuIEJlaW5nIHRoZSBcInJlc3BvbmRlclwiIG1lYW5zIHRoYXQgdGhlIHZlcnkgbmV4dCB0b3VjaCBtb3ZlL2VuZFxuICAgKiBldmVudCB3aWxsIHJlc3VsdCBpbiBhbiBhY3Rpb24vbW92ZW1lbnQuXG4gICAqXG4gICAqIEludm9rZSB0aGlzIGZyb20gYW4gYG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXJgIGV2ZW50LlxuICAgKlxuICAgKiBgb25TdGFydFNob3VsZFNldFJlc3BvbmRlcmAgaXMgdXNlZCB3aGVuIHRoZSBuZXh0IG1vdmUvZW5kIHdpbGwgdHJpZ2dlclxuICAgKiBzb21lIFVJIG1vdmVtZW50L2FjdGlvbiwgYnV0IHdoZW4geW91IHdhbnQgdG8geWllbGQgcHJpb3JpdHkgdG8gdmlld3NcbiAgICogbmVzdGVkIGluc2lkZSBvZiB0aGUgdmlldy5cbiAgICpcbiAgICogVGhlcmUgbWF5IGJlIHNvbWUgY2FzZXMgd2hlcmUgc2Nyb2xsIHZpZXdzIGFjdHVhbGx5IHNob3VsZCByZXR1cm4gYHRydWVgXG4gICAqIGZyb20gYG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXJgOiBBbnkgdGltZSB3ZSBhcmUgZGV0ZWN0aW5nIGEgc3RhbmRhcmQgdGFwXG4gICAqIHRoYXQgZ2l2ZXMgcHJpb3JpdHkgdG8gbmVzdGVkIHZpZXdzLlxuICAgKlxuICAgKiAtIElmIGEgc2luZ2xlIHRhcCBvbiB0aGUgc2Nyb2xsIHZpZXcgdHJpZ2dlcnMgYW4gYWN0aW9uIHN1Y2ggYXNcbiAgICogICByZWNlbnRlcmluZyBhIG1hcCBzdHlsZSB2aWV3IHlldCB3YW50cyB0byBnaXZlIHByaW9yaXR5IHRvIGludGVyYWN0aW9uXG4gICAqICAgdmlld3MgaW5zaWRlIChzdWNoIGFzIGRyb3BwZWQgcGlucyBvciBsYWJlbHMpLCB0aGVuIHdlIHdvdWxkIHJldHVybiB0cnVlXG4gICAqICAgZnJvbSB0aGlzIG1ldGhvZCB3aGVuIHRoZXJlIGlzIGEgc2luZ2xlIHRvdWNoLlxuICAgKlxuICAgKiAtIFNpbWlsYXIgdG8gdGhlIHByZXZpb3VzIGNhc2UsIGlmIGEgdHdvIGZpbmdlciBcInRhcFwiIHNob3VsZCB0cmlnZ2VyIGFcbiAgICogICB6b29tLCB3ZSB3b3VsZCBjaGVjayB0aGUgYHRvdWNoZXNgIGNvdW50LCBhbmQgaWYgYD49IDJgLCB3ZSB3b3VsZCByZXR1cm5cbiAgICogICB0cnVlLlxuICAgKlxuICAgKi9cbiAgc2Nyb2xsUmVzcG9uZGVySGFuZGxlU3RhcnRTaG91bGRTZXRSZXNwb25kZXI6IGZ1bmN0aW9uKFxuICAgIGU6IFByZXNzRXZlbnQsXG4gICk6IGJvb2xlYW4ge1xuICAgIC8vIEFsbG93IGFueSBldmVudCB0b3VjaCBwYXNzIHRocm91Z2ggaWYgdGhlIGRlZmF1bHQgcGFuIHJlc3BvbmRlciBpcyBkaXNhYmxlZFxuICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVTY3JvbGxWaWV3UGFuUmVzcG9uZGVyID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgY3VycmVudGx5Rm9jdXNlZFRleHRJbnB1dCA9IFRleHRJbnB1dFN0YXRlLmN1cnJlbnRseUZvY3VzZWRGaWVsZCgpO1xuXG4gICAgaWYgKFxuICAgICAgdGhpcy5wcm9wcy5rZXlib2FyZFNob3VsZFBlcnNpc3RUYXBzID09PSAnaGFuZGxlZCcgJiZcbiAgICAgIGN1cnJlbnRseUZvY3VzZWRUZXh0SW5wdXQgIT0gbnVsbCAmJlxuICAgICAgZS50YXJnZXQgIT09IGN1cnJlbnRseUZvY3VzZWRUZXh0SW5wdXRcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZXJlIGFyZSB0aW1lcyB3aGVuIHRoZSBzY3JvbGwgdmlldyB3YW50cyB0byBiZWNvbWUgdGhlIHJlc3BvbmRlclxuICAgKiAobWVhbmluZyByZXNwb25kIHRvIHRoZSBuZXh0IGltbWVkaWF0ZSBgdG91Y2hTdGFydC90b3VjaEVuZGApLCBpbiBhIHdheVxuICAgKiB0aGF0ICpkb2Vzbid0KiBnaXZlIHByaW9yaXR5IHRvIG5lc3RlZCB2aWV3cyAoaGVuY2UgdGhlIGNhcHR1cmUgcGhhc2UpOlxuICAgKlxuICAgKiAtIEN1cnJlbnRseSBhbmltYXRpbmcuXG4gICAqIC0gVGFwcGluZyBhbnl3aGVyZSB0aGF0IGlzIG5vdCBhIHRleHQgaW5wdXQsIHdoaWxlIHRoZSBrZXlib2FyZCBpc1xuICAgKiAgIHVwICh3aGljaCBzaG91bGQgZGlzbWlzcyB0aGUga2V5Ym9hcmQpLlxuICAgKlxuICAgKiBJbnZva2UgdGhpcyBmcm9tIGFuIGBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZWAgZXZlbnQuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJIYW5kbGVTdGFydFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmU6IGZ1bmN0aW9uKFxuICAgIGU6IFByZXNzRXZlbnQsXG4gICk6IGJvb2xlYW4ge1xuICAgIC8vIFRoZSBzY3JvbGwgdmlldyBzaG91bGQgcmVjZWl2ZSB0YXBzIGluc3RlYWQgb2YgaXRzIGRlc2NlbmRhbnRzIGlmOlxuICAgIC8vICogaXQgaXMgYWxyZWFkeSBhbmltYXRpbmcvZGVjZWxlcmF0aW5nXG4gICAgaWYgKHRoaXMuc2Nyb2xsUmVzcG9uZGVySXNBbmltYXRpbmcoKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gQWxsb3cgYW55IGV2ZW50IHRvdWNoIHBhc3MgdGhyb3VnaCBpZiB0aGUgZGVmYXVsdCBwYW4gcmVzcG9uZGVyIGlzIGRpc2FibGVkXG4gICAgaWYgKHRoaXMucHJvcHMuZGlzYWJsZVNjcm9sbFZpZXdQYW5SZXNwb25kZXIgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyAqIHRoZSBrZXlib2FyZCBpcyB1cCwga2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwcyBpcyAnbmV2ZXInICh0aGUgZGVmYXVsdCksXG4gICAgLy8gYW5kIGEgbmV3IHRvdWNoIHN0YXJ0cyB3aXRoIGEgbm9uLXRleHRpbnB1dCB0YXJnZXQgKGluIHdoaWNoIGNhc2UgdGhlXG4gICAgLy8gZmlyc3QgdGFwIHNob3VsZCBiZSBzZW50IHRvIHRoZSBzY3JvbGwgdmlldyBhbmQgZGlzbWlzcyB0aGUga2V5Ym9hcmQsXG4gICAgLy8gdGhlbiB0aGUgc2Vjb25kIHRhcCBnb2VzIHRvIHRoZSBhY3R1YWwgaW50ZXJpb3IgdmlldylcbiAgICBjb25zdCBjdXJyZW50bHlGb2N1c2VkVGV4dElucHV0ID0gVGV4dElucHV0U3RhdGUuY3VycmVudGx5Rm9jdXNlZEZpZWxkKCk7XG4gICAgY29uc3Qge2tleWJvYXJkU2hvdWxkUGVyc2lzdFRhcHN9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBrZXlib2FyZE5ldmVyUGVyc2lzdFRhcHMgPVxuICAgICAgIWtleWJvYXJkU2hvdWxkUGVyc2lzdFRhcHMgfHwga2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwcyA9PT0gJ25ldmVyJztcbiAgICBpZiAoXG4gICAgICBrZXlib2FyZE5ldmVyUGVyc2lzdFRhcHMgJiZcbiAgICAgIGN1cnJlbnRseUZvY3VzZWRUZXh0SW5wdXQgIT0gbnVsbCAmJlxuICAgICAgZS50YXJnZXQgJiZcbiAgICAgICFUZXh0SW5wdXRTdGF0ZS5pc1RleHRJbnB1dChlLnRhcmdldClcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25SZXNwb25kZXJSZWplY3RgIGV2ZW50LlxuICAgKlxuICAgKiBTb21lIG90aGVyIGVsZW1lbnQgaXMgbm90IHlpZWxkaW5nIGl0cyByb2xlIGFzIHJlc3BvbmRlci4gTm9ybWFsbHksIHdlJ2RcbiAgICoganVzdCBkaXNhYmxlIHRoZSBgVUlTY3JvbGxWaWV3YCwgYnV0IGEgdG91Y2ggaGFzIGFscmVhZHkgYmVnYW4gb24gaXQsIHRoZVxuICAgKiBgVUlTY3JvbGxWaWV3YCB3aWxsIG5vdCBhY2NlcHQgYmVpbmcgZGlzYWJsZWQgYWZ0ZXIgdGhhdC4gVGhlIGVhc2llc3RcbiAgICogc29sdXRpb24gZm9yIG5vdyBpcyB0byBhY2NlcHQgdGhlIGxpbWl0YXRpb24gb2YgZGlzYWxsb3dpbmcgdGhpc1xuICAgKiBhbHRvZ2V0aGVyLiBUbyBpbXByb3ZlIHRoaXMsIGZpbmQgYSB3YXkgdG8gZGlzYWJsZSB0aGUgYFVJU2Nyb2xsVmlld2AgYWZ0ZXJcbiAgICogYSB0b3VjaCBoYXMgYWxyZWFkeSBzdGFydGVkLlxuICAgKi9cbiAgc2Nyb2xsUmVzcG9uZGVySGFuZGxlUmVzcG9uZGVyUmVqZWN0OiBmdW5jdGlvbigpIHt9LFxuXG4gIC8qKlxuICAgKiBXZSB3aWxsIGFsbG93IHRoZSBzY3JvbGwgdmlldyB0byBnaXZlIHVwIGl0cyBsb2NrIGlmZiBpdCBhY3F1aXJlZCB0aGUgbG9ja1xuICAgKiBkdXJpbmcgYW4gYW5pbWF0aW9uLiBUaGlzIGlzIGEgdmVyeSB1c2VmdWwgZGVmYXVsdCB0aGF0IGhhcHBlbnMgdG8gc2F0aXNmeVxuICAgKiBtYW55IGNvbW1vbiB1c2VyIGV4cGVyaWVuY2VzLlxuICAgKlxuICAgKiAtIFN0b3AgYSBzY3JvbGwgb24gdGhlIGxlZnQgZWRnZSwgdGhlbiB0dXJuIHRoYXQgaW50byBhbiBvdXRlciB2aWV3J3NcbiAgICogICBiYWNrc3dpcGUuXG4gICAqIC0gU3RvcCBhIHNjcm9sbCBtaWQtYm91bmNlIGF0IHRoZSB0b3AsIGNvbnRpbnVlIHB1bGxpbmcgdG8gaGF2ZSB0aGUgb3V0ZXJcbiAgICogICB2aWV3IGRpc21pc3MuXG4gICAqIC0gSG93ZXZlciwgd2l0aG91dCBjYXRjaGluZyB0aGUgc2Nyb2xsIHZpZXcgbWlkLWJvdW5jZSAod2hpbGUgaXQgaXNcbiAgICogICBtb3Rpb25sZXNzKSwgaWYgeW91IGRyYWcgZmFyIGVub3VnaCBmb3IgdGhlIHNjcm9sbCB2aWV3IHRvIGJlY29tZVxuICAgKiAgIHJlc3BvbmRlciAoYW5kIHRoZXJlZm9yZSBkcmFnIHRoZSBzY3JvbGwgdmlldyBhIGJpdCksIGFueSBiYWNrc3dpcGVcbiAgICogICBuYXZpZ2F0aW9uIG9mIGEgc3dpcGUgZ2VzdHVyZSBoaWdoZXIgaW4gdGhlIHZpZXcgaGllcmFyY2h5LCBzaG91bGQgYmVcbiAgICogICByZWplY3RlZC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlckhhbmRsZVRlcm1pbmF0aW9uUmVxdWVzdDogZnVuY3Rpb24oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLnN0YXRlLm9ic2VydmVkU2Nyb2xsU2luY2VCZWNvbWluZ1Jlc3BvbmRlcjtcbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25Ub3VjaEVuZGAgZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UHJlc3NFdmVudH0gZSBFdmVudC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlckhhbmRsZVRvdWNoRW5kOiBmdW5jdGlvbihlOiBQcmVzc0V2ZW50KSB7XG4gICAgY29uc3QgbmF0aXZlRXZlbnQgPSBlLm5hdGl2ZUV2ZW50O1xuICAgIHRoaXMuc3RhdGUuaXNUb3VjaGluZyA9IG5hdGl2ZUV2ZW50LnRvdWNoZXMubGVuZ3RoICE9PSAwO1xuICAgIHRoaXMucHJvcHMub25Ub3VjaEVuZCAmJiB0aGlzLnByb3BzLm9uVG91Y2hFbmQoZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGlzIGZyb20gYW4gYG9uVG91Y2hDYW5jZWxgIGV2ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1ByZXNzRXZlbnR9IGUgRXZlbnQuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaENhbmNlbDogZnVuY3Rpb24oZTogUHJlc3NFdmVudCkge1xuICAgIHRoaXMuc3RhdGUuaXNUb3VjaGluZyA9IGZhbHNlO1xuICAgIHRoaXMucHJvcHMub25Ub3VjaENhbmNlbCAmJiB0aGlzLnByb3BzLm9uVG91Y2hDYW5jZWwoZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGlzIGZyb20gYW4gYG9uUmVzcG9uZGVyUmVsZWFzZWAgZXZlbnQuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJIYW5kbGVSZXNwb25kZXJSZWxlYXNlOiBmdW5jdGlvbihlOiBQcmVzc0V2ZW50KSB7XG4gICAgdGhpcy5wcm9wcy5vblJlc3BvbmRlclJlbGVhc2UgJiYgdGhpcy5wcm9wcy5vblJlc3BvbmRlclJlbGVhc2UoZSk7XG5cbiAgICAvLyBCeSBkZWZhdWx0IHNjcm9sbCB2aWV3cyB3aWxsIHVuZm9jdXMgYSB0ZXh0RmllbGRcbiAgICAvLyBpZiBhbm90aGVyIHRvdWNoIG9jY3VycyBvdXRzaWRlIG9mIGl0XG4gICAgY29uc3QgY3VycmVudGx5Rm9jdXNlZFRleHRJbnB1dCA9IFRleHRJbnB1dFN0YXRlLmN1cnJlbnRseUZvY3VzZWRGaWVsZCgpO1xuICAgIGlmIChcbiAgICAgIHRoaXMucHJvcHMua2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwcyAhPT0gdHJ1ZSAmJlxuICAgICAgdGhpcy5wcm9wcy5rZXlib2FyZFNob3VsZFBlcnNpc3RUYXBzICE9PSAnYWx3YXlzJyAmJlxuICAgICAgY3VycmVudGx5Rm9jdXNlZFRleHRJbnB1dCAhPSBudWxsICYmXG4gICAgICBlLnRhcmdldCAhPT0gY3VycmVudGx5Rm9jdXNlZFRleHRJbnB1dCAmJlxuICAgICAgIXRoaXMuc3RhdGUub2JzZXJ2ZWRTY3JvbGxTaW5jZUJlY29taW5nUmVzcG9uZGVyICYmXG4gICAgICAhdGhpcy5zdGF0ZS5iZWNhbWVSZXNwb25kZXJXaGlsZUFuaW1hdGluZ1xuICAgICkge1xuICAgICAgdGhpcy5wcm9wcy5vblNjcm9sbFJlc3BvbmRlcktleWJvYXJkRGlzbWlzc2VkICYmXG4gICAgICAgIHRoaXMucHJvcHMub25TY3JvbGxSZXNwb25kZXJLZXlib2FyZERpc21pc3NlZChlKTtcbiAgICAgIFRleHRJbnB1dFN0YXRlLmJsdXJUZXh0SW5wdXQoY3VycmVudGx5Rm9jdXNlZFRleHRJbnB1dCk7XG4gICAgfVxuICB9LFxuXG4gIHNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbDogZnVuY3Rpb24oZTogU2Nyb2xsRXZlbnQpIHtcbiAgICB0aGlzLnN0YXRlLm9ic2VydmVkU2Nyb2xsU2luY2VCZWNvbWluZ1Jlc3BvbmRlciA9IHRydWU7XG4gICAgdGhpcy5wcm9wcy5vblNjcm9sbCAmJiB0aGlzLnByb3BzLm9uU2Nyb2xsKGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2UgdGhpcyBmcm9tIGFuIGBvblJlc3BvbmRlckdyYW50YCBldmVudC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlckhhbmRsZVJlc3BvbmRlckdyYW50OiBmdW5jdGlvbihlOiBTY3JvbGxFdmVudCkge1xuICAgIHRoaXMuc3RhdGUub2JzZXJ2ZWRTY3JvbGxTaW5jZUJlY29taW5nUmVzcG9uZGVyID0gZmFsc2U7XG4gICAgdGhpcy5wcm9wcy5vblJlc3BvbmRlckdyYW50ICYmIHRoaXMucHJvcHMub25SZXNwb25kZXJHcmFudChlKTtcbiAgICB0aGlzLnN0YXRlLmJlY2FtZVJlc3BvbmRlcldoaWxlQW5pbWF0aW5nID0gdGhpcy5zY3JvbGxSZXNwb25kZXJJc0FuaW1hdGluZygpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVbmZvcnR1bmF0ZWx5LCBgb25TY3JvbGxCZWdpbkRyYWdgIGFsc28gZmlyZXMgd2hlbiAqc3RvcHBpbmcqIHRoZSBzY3JvbGxcbiAgICogYW5pbWF0aW9uLCBhbmQgdGhlcmUncyBub3QgYW4gZWFzeSB3YXkgdG8gZGlzdGluZ3Vpc2ggYSBkcmFnIHZzLiBzdG9wcGluZ1xuICAgKiBtb21lbnR1bS5cbiAgICpcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25TY3JvbGxCZWdpbkRyYWdgIGV2ZW50LlxuICAgKi9cbiAgc2Nyb2xsUmVzcG9uZGVySGFuZGxlU2Nyb2xsQmVnaW5EcmFnOiBmdW5jdGlvbihlOiBTY3JvbGxFdmVudCkge1xuICAgIEZyYW1lUmF0ZUxvZ2dlci5iZWdpblNjcm9sbCgpOyAvLyBUT0RPOiB0cmFjayBhbGwgc2Nyb2xscyBhZnRlciBpbXBsZW1lbnRpbmcgb25TY3JvbGxFbmRBbmltYXRpb25cbiAgICB0aGlzLnByb3BzLm9uU2Nyb2xsQmVnaW5EcmFnICYmIHRoaXMucHJvcHMub25TY3JvbGxCZWdpbkRyYWcoZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGlzIGZyb20gYW4gYG9uU2Nyb2xsRW5kRHJhZ2AgZXZlbnQuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJIYW5kbGVTY3JvbGxFbmREcmFnOiBmdW5jdGlvbihlOiBTY3JvbGxFdmVudCkge1xuICAgIGNvbnN0IHt2ZWxvY2l0eX0gPSBlLm5hdGl2ZUV2ZW50O1xuICAgIC8vIC0gSWYgd2UgYXJlIGFuaW1hdGluZywgdGhlbiB0aGlzIGlzIGEgXCJkcmFnXCIgdGhhdCBpcyBzdG9wcGluZyB0aGUgc2Nyb2xsdmlldyBhbmQgbW9tZW50dW0gZW5kXG4gICAgLy8gICB3aWxsIGZpcmUuXG4gICAgLy8gLSBJZiB2ZWxvY2l0eSBpcyBub24temVybywgdGhlbiB0aGUgaW50ZXJhY3Rpb24gd2lsbCBzdG9wIHdoZW4gbW9tZW50dW0gc2Nyb2xsIGVuZHMgb3JcbiAgICAvLyAgIGFub3RoZXIgZHJhZyBzdGFydHMgYW5kIGVuZHMuXG4gICAgLy8gLSBJZiB3ZSBkb24ndCBnZXQgdmVsb2NpdHksIGJldHRlciB0byBzdG9wIHRoZSBpbnRlcmFjdGlvbiB0d2ljZSB0aGFuIG5vdCBzdG9wIGl0LlxuICAgIGlmIChcbiAgICAgICF0aGlzLnNjcm9sbFJlc3BvbmRlcklzQW5pbWF0aW5nKCkgJiZcbiAgICAgICghdmVsb2NpdHkgfHwgKHZlbG9jaXR5LnggPT09IDAgJiYgdmVsb2NpdHkueSA9PT0gMCkpXG4gICAgKSB7XG4gICAgICBGcmFtZVJhdGVMb2dnZXIuZW5kU2Nyb2xsKCk7XG4gICAgfVxuICAgIHRoaXMucHJvcHMub25TY3JvbGxFbmREcmFnICYmIHRoaXMucHJvcHMub25TY3JvbGxFbmREcmFnKGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2UgdGhpcyBmcm9tIGFuIGBvbk1vbWVudHVtU2Nyb2xsQmVnaW5gIGV2ZW50LlxuICAgKi9cbiAgc2Nyb2xsUmVzcG9uZGVySGFuZGxlTW9tZW50dW1TY3JvbGxCZWdpbjogZnVuY3Rpb24oZTogU2Nyb2xsRXZlbnQpIHtcbiAgICB0aGlzLnN0YXRlLmxhc3RNb21lbnR1bVNjcm9sbEJlZ2luVGltZSA9IHBlcmZvcm1hbmNlTm93KCk7XG4gICAgdGhpcy5wcm9wcy5vbk1vbWVudHVtU2Nyb2xsQmVnaW4gJiYgdGhpcy5wcm9wcy5vbk1vbWVudHVtU2Nyb2xsQmVnaW4oZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGlzIGZyb20gYW4gYG9uTW9tZW50dW1TY3JvbGxFbmRgIGV2ZW50LlxuICAgKi9cbiAgc2Nyb2xsUmVzcG9uZGVySGFuZGxlTW9tZW50dW1TY3JvbGxFbmQ6IGZ1bmN0aW9uKGU6IFNjcm9sbEV2ZW50KSB7XG4gICAgRnJhbWVSYXRlTG9nZ2VyLmVuZFNjcm9sbCgpO1xuICAgIHRoaXMuc3RhdGUubGFzdE1vbWVudHVtU2Nyb2xsRW5kVGltZSA9IHBlcmZvcm1hbmNlTm93KCk7XG4gICAgdGhpcy5wcm9wcy5vbk1vbWVudHVtU2Nyb2xsRW5kICYmIHRoaXMucHJvcHMub25Nb21lbnR1bVNjcm9sbEVuZChlKTtcbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25Ub3VjaFN0YXJ0YCBldmVudC5cbiAgICpcbiAgICogU2luY2Ugd2Uga25vdyB0aGF0IHRoZSBgU2ltcGxlRXZlbnRQbHVnaW5gIG9jY3VycyBsYXRlciBpbiB0aGUgcGx1Z2luXG4gICAqIG9yZGVyLCBhZnRlciBgUmVzcG9uZGVyRXZlbnRQbHVnaW5gLCB3ZSBjYW4gZGV0ZWN0IHRoYXQgd2Ugd2VyZSAqbm90KlxuICAgKiBwZXJtaXR0ZWQgdG8gYmUgdGhlIHJlc3BvbmRlciAocHJlc3VtYWJseSBiZWNhdXNlIGEgY29udGFpbmVkIHZpZXcgYmVjYW1lXG4gICAqIHJlc3BvbmRlcikuIFRoZSBgb25SZXNwb25kZXJSZWplY3RgIHdvbid0IGZpcmUgaW4gdGhhdCBjYXNlIC0gaXQgb25seVxuICAgKiBmaXJlcyB3aGVuIGEgKmN1cnJlbnQqIHJlc3BvbmRlciByZWplY3RzIG91ciByZXF1ZXN0LlxuICAgKlxuICAgKiBAcGFyYW0ge1ByZXNzRXZlbnR9IGUgVG91Y2ggU3RhcnQgZXZlbnQuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaFN0YXJ0OiBmdW5jdGlvbihlOiBQcmVzc0V2ZW50KSB7XG4gICAgdGhpcy5zdGF0ZS5pc1RvdWNoaW5nID0gdHJ1ZTtcbiAgICB0aGlzLnByb3BzLm9uVG91Y2hTdGFydCAmJiB0aGlzLnByb3BzLm9uVG91Y2hTdGFydChlKTtcbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25Ub3VjaE1vdmVgIGV2ZW50LlxuICAgKlxuICAgKiBTaW5jZSB3ZSBrbm93IHRoYXQgdGhlIGBTaW1wbGVFdmVudFBsdWdpbmAgb2NjdXJzIGxhdGVyIGluIHRoZSBwbHVnaW5cbiAgICogb3JkZXIsIGFmdGVyIGBSZXNwb25kZXJFdmVudFBsdWdpbmAsIHdlIGNhbiBkZXRlY3QgdGhhdCB3ZSB3ZXJlICpub3QqXG4gICAqIHBlcm1pdHRlZCB0byBiZSB0aGUgcmVzcG9uZGVyIChwcmVzdW1hYmx5IGJlY2F1c2UgYSBjb250YWluZWQgdmlldyBiZWNhbWVcbiAgICogcmVzcG9uZGVyKS4gVGhlIGBvblJlc3BvbmRlclJlamVjdGAgd29uJ3QgZmlyZSBpbiB0aGF0IGNhc2UgLSBpdCBvbmx5XG4gICAqIGZpcmVzIHdoZW4gYSAqY3VycmVudCogcmVzcG9uZGVyIHJlamVjdHMgb3VyIHJlcXVlc3QuXG4gICAqXG4gICAqIEBwYXJhbSB7UHJlc3NFdmVudH0gZSBUb3VjaCBTdGFydCBldmVudC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlckhhbmRsZVRvdWNoTW92ZTogZnVuY3Rpb24oZTogUHJlc3NFdmVudCkge1xuICAgIHRoaXMucHJvcHMub25Ub3VjaE1vdmUgJiYgdGhpcy5wcm9wcy5vblRvdWNoTW92ZShlKTtcbiAgfSxcblxuICAvKipcbiAgICogQSBoZWxwZXIgZnVuY3Rpb24gZm9yIHRoaXMgY2xhc3MgdGhhdCBsZXRzIHVzIHF1aWNrbHkgZGV0ZXJtaW5lIGlmIHRoZVxuICAgKiB2aWV3IGlzIGN1cnJlbnRseSBhbmltYXRpbmcuIFRoaXMgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCB0byBrbm93IHdoZW5cbiAgICogYSB0b3VjaCBoYXMganVzdCBzdGFydGVkIG9yIGVuZGVkLlxuICAgKi9cbiAgc2Nyb2xsUmVzcG9uZGVySXNBbmltYXRpbmc6IGZ1bmN0aW9uKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vdyA9IHBlcmZvcm1hbmNlTm93KCk7XG4gICAgY29uc3QgdGltZVNpbmNlTGFzdE1vbWVudHVtU2Nyb2xsRW5kID1cbiAgICAgIG5vdyAtIHRoaXMuc3RhdGUubGFzdE1vbWVudHVtU2Nyb2xsRW5kVGltZTtcbiAgICBjb25zdCBpc0FuaW1hdGluZyA9XG4gICAgICB0aW1lU2luY2VMYXN0TW9tZW50dW1TY3JvbGxFbmQgPCBJU19BTklNQVRJTkdfVE9VQ0hfU1RBUlRfVEhSRVNIT0xEX01TIHx8XG4gICAgICB0aGlzLnN0YXRlLmxhc3RNb21lbnR1bVNjcm9sbEVuZFRpbWUgPFxuICAgICAgICB0aGlzLnN0YXRlLmxhc3RNb21lbnR1bVNjcm9sbEJlZ2luVGltZTtcbiAgICByZXR1cm4gaXNBbmltYXRpbmc7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG5vZGUgdGhhdCByZXByZXNlbnRzIG5hdGl2ZSB2aWV3IHRoYXQgY2FuIGJlIHNjcm9sbGVkLlxuICAgKiBDb21wb25lbnRzIGNhbiBwYXNzIHdoYXQgbm9kZSB0byB1c2UgYnkgZGVmaW5pbmcgYSBgZ2V0U2Nyb2xsYWJsZU5vZGVgXG4gICAqIGZ1bmN0aW9uIG90aGVyd2lzZSBgdGhpc2AgaXMgdXNlZC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlckdldFNjcm9sbGFibGVOb2RlOiBmdW5jdGlvbigpOiA/bnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTY3JvbGxhYmxlTm9kZVxuICAgICAgPyB0aGlzLmdldFNjcm9sbGFibGVOb2RlKClcbiAgICAgIDogUmVhY3ROYXRpdmUuZmluZE5vZGVIYW5kbGUodGhpcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEEgaGVscGVyIGZ1bmN0aW9uIHRvIHNjcm9sbCB0byBhIHNwZWNpZmljIHBvaW50IGluIHRoZSBTY3JvbGxWaWV3LlxuICAgKiBUaGlzIGlzIGN1cnJlbnRseSB1c2VkIHRvIGhlbHAgZm9jdXMgY2hpbGQgVGV4dFZpZXdzLCBidXQgY2FuIGFsc29cbiAgICogYmUgdXNlZCB0byBxdWlja2x5IHNjcm9sbCB0byBhbnkgZWxlbWVudCB3ZSB3YW50IHRvIGZvY3VzLiBTeW50YXg6XG4gICAqXG4gICAqIGBzY3JvbGxSZXNwb25kZXJTY3JvbGxUbyhvcHRpb25zOiB7eDogbnVtYmVyID0gMDsgeTogbnVtYmVyID0gMDsgYW5pbWF0ZWQ6IGJvb2xlYW4gPSB0cnVlfSlgXG4gICAqXG4gICAqIE5vdGU6IFRoZSB3ZWlyZCBhcmd1bWVudCBzaWduYXR1cmUgaXMgZHVlIHRvIHRoZSBmYWN0IHRoYXQsIGZvciBoaXN0b3JpY2FsIHJlYXNvbnMsXG4gICAqIHRoZSBmdW5jdGlvbiBhbHNvIGFjY2VwdHMgc2VwYXJhdGUgYXJndW1lbnRzIGFzIGFzIGFsdGVybmF0aXZlIHRvIHRoZSBvcHRpb25zIG9iamVjdC5cbiAgICogVGhpcyBpcyBkZXByZWNhdGVkIGR1ZSB0byBhbWJpZ3VpdHkgKHkgYmVmb3JlIHgpLCBhbmQgU0hPVUxEIE5PVCBCRSBVU0VELlxuICAgKi9cbiAgc2Nyb2xsUmVzcG9uZGVyU2Nyb2xsVG86IGZ1bmN0aW9uKFxuICAgIHg/OiBudW1iZXIgfCB7eD86IG51bWJlciwgeT86IG51bWJlciwgYW5pbWF0ZWQ/OiBib29sZWFufSxcbiAgICB5PzogbnVtYmVyLFxuICAgIGFuaW1hdGVkPzogYm9vbGVhbixcbiAgKSB7XG4gICAgaWYgKHR5cGVvZiB4ID09PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnYHNjcm9sbFJlc3BvbmRlclNjcm9sbFRvKHgsIHksIGFuaW1hdGVkKWAgaXMgZGVwcmVjYXRlZC4gVXNlIGBzY3JvbGxSZXNwb25kZXJTY3JvbGxUbyh7eDogNSwgeTogNSwgYW5pbWF0ZWQ6IHRydWV9KWAgaW5zdGVhZC4nLFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgKHt4LCB5LCBhbmltYXRlZH0gPSB4IHx8IHt9KTtcbiAgICB9XG4gICAgVUlNYW5hZ2VyLmRpc3BhdGNoVmlld01hbmFnZXJDb21tYW5kKFxuICAgICAgbnVsbHRocm93cyh0aGlzLnNjcm9sbFJlc3BvbmRlckdldFNjcm9sbGFibGVOb2RlKCkpLFxuICAgICAgVUlNYW5hZ2VyLmdldFZpZXdNYW5hZ2VyQ29uZmlnKCdSQ1RTY3JvbGxWaWV3JykuQ29tbWFuZHMuc2Nyb2xsVG8sXG4gICAgICBbeCB8fCAwLCB5IHx8IDAsIGFuaW1hdGVkICE9PSBmYWxzZV0sXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogU2Nyb2xscyB0byB0aGUgZW5kIG9mIHRoZSBTY3JvbGxWaWV3LCBlaXRoZXIgaW1tZWRpYXRlbHkgb3Igd2l0aCBhIHNtb290aFxuICAgKiBhbmltYXRpb24uXG4gICAqXG4gICAqIEV4YW1wbGU6XG4gICAqXG4gICAqIGBzY3JvbGxSZXNwb25kZXJTY3JvbGxUb0VuZCh7YW5pbWF0ZWQ6IHRydWV9KWBcbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlclNjcm9sbFRvRW5kOiBmdW5jdGlvbihvcHRpb25zPzoge2FuaW1hdGVkPzogYm9vbGVhbn0pIHtcbiAgICAvLyBEZWZhdWx0IHRvIHRydWVcbiAgICBjb25zdCBhbmltYXRlZCA9IChvcHRpb25zICYmIG9wdGlvbnMuYW5pbWF0ZWQpICE9PSBmYWxzZTtcbiAgICBVSU1hbmFnZXIuZGlzcGF0Y2hWaWV3TWFuYWdlckNvbW1hbmQoXG4gICAgICB0aGlzLnNjcm9sbFJlc3BvbmRlckdldFNjcm9sbGFibGVOb2RlKCksXG4gICAgICBVSU1hbmFnZXIuZ2V0Vmlld01hbmFnZXJDb25maWcoJ1JDVFNjcm9sbFZpZXcnKS5Db21tYW5kcy5zY3JvbGxUb0VuZCxcbiAgICAgIFthbmltYXRlZF0sXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogRGVwcmVjYXRlZCwgZG8gbm90IHVzZS5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlclNjcm9sbFdpdGhvdXRBbmltYXRpb25UbzogZnVuY3Rpb24oXG4gICAgb2Zmc2V0WDogbnVtYmVyLFxuICAgIG9mZnNldFk6IG51bWJlcixcbiAgKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ2BzY3JvbGxSZXNwb25kZXJTY3JvbGxXaXRob3V0QW5pbWF0aW9uVG9gIGlzIGRlcHJlY2F0ZWQuIFVzZSBgc2Nyb2xsUmVzcG9uZGVyU2Nyb2xsVG9gIGluc3RlYWQnLFxuICAgICk7XG4gICAgdGhpcy5zY3JvbGxSZXNwb25kZXJTY3JvbGxUbyh7eDogb2Zmc2V0WCwgeTogb2Zmc2V0WSwgYW5pbWF0ZWQ6IGZhbHNlfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEEgaGVscGVyIGZ1bmN0aW9uIHRvIHpvb20gdG8gYSBzcGVjaWZpYyByZWN0IGluIHRoZSBzY3JvbGx2aWV3LiBUaGUgYXJndW1lbnQgaGFzIHRoZSBzaGFwZVxuICAgKiB7eDogbnVtYmVyOyB5OiBudW1iZXI7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyOyBhbmltYXRlZDogYm9vbGVhbiA9IHRydWV9XG4gICAqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlclpvb21UbzogZnVuY3Rpb24oXG4gICAgcmVjdDoge3xcbiAgICAgIHg6IG51bWJlcixcbiAgICAgIHk6IG51bWJlcixcbiAgICAgIHdpZHRoOiBudW1iZXIsXG4gICAgICBoZWlnaHQ6IG51bWJlcixcbiAgICAgIGFuaW1hdGVkPzogYm9vbGVhbixcbiAgICB8fSxcbiAgICBhbmltYXRlZD86IGJvb2xlYW4sIC8vIGRlcHJlY2F0ZWQsIHB1dCB0aGlzIGluc2lkZSB0aGUgcmVjdCBhcmd1bWVudCBpbnN0ZWFkXG4gICkge1xuICAgIGludmFyaWFudChcbiAgICAgIFNjcm9sbFZpZXdNYW5hZ2VyICYmIFNjcm9sbFZpZXdNYW5hZ2VyLnpvb21Ub1JlY3QsXG4gICAgICAnem9vbVRvUmVjdCBpcyBub3QgaW1wbGVtZW50ZWQnLFxuICAgICk7XG4gICAgaWYgKCdhbmltYXRlZCcgaW4gcmVjdCkge1xuICAgICAgYW5pbWF0ZWQgPSByZWN0LmFuaW1hdGVkO1xuICAgICAgZGVsZXRlIHJlY3QuYW5pbWF0ZWQ7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYW5pbWF0ZWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdgc2Nyb2xsUmVzcG9uZGVyWm9vbVRvYCBgYW5pbWF0ZWRgIGFyZ3VtZW50IGlzIGRlcHJlY2F0ZWQuIFVzZSBgb3B0aW9ucy5hbmltYXRlZGAgaW5zdGVhZCcsXG4gICAgICApO1xuICAgIH1cbiAgICBTY3JvbGxWaWV3TWFuYWdlci56b29tVG9SZWN0KFxuICAgICAgdGhpcy5zY3JvbGxSZXNwb25kZXJHZXRTY3JvbGxhYmxlTm9kZSgpLFxuICAgICAgcmVjdCxcbiAgICAgIGFuaW1hdGVkICE9PSBmYWxzZSxcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEaXNwbGF5cyB0aGUgc2Nyb2xsIGluZGljYXRvcnMgbW9tZW50YXJpbHkuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJGbGFzaFNjcm9sbEluZGljYXRvcnM6IGZ1bmN0aW9uKCkge1xuICAgIFVJTWFuYWdlci5kaXNwYXRjaFZpZXdNYW5hZ2VyQ29tbWFuZChcbiAgICAgIHRoaXMuc2Nyb2xsUmVzcG9uZGVyR2V0U2Nyb2xsYWJsZU5vZGUoKSxcbiAgICAgIFVJTWFuYWdlci5nZXRWaWV3TWFuYWdlckNvbmZpZygnUkNUU2Nyb2xsVmlldycpLkNvbW1hbmRzXG4gICAgICAgIC5mbGFzaFNjcm9sbEluZGljYXRvcnMsXG4gICAgICBbXSxcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgdXNlZCBhcyB0aGUgY2FsbGJhY2sgdG8gb25Gb2N1cyBpbiBhIFRleHRJbnB1dHMnXG4gICAqIHBhcmVudCB2aWV3LiBOb3RlIHRoYXQgYW55IG1vZHVsZSB1c2luZyB0aGlzIG1peGluIG5lZWRzIHRvIHJldHVyblxuICAgKiB0aGUgcGFyZW50IHZpZXcncyByZWYgaW4gZ2V0U2Nyb2xsVmlld1JlZigpIGluIG9yZGVyIHRvIHVzZSB0aGlzIG1ldGhvZC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG5vZGVIYW5kbGUgVGhlIFRleHRJbnB1dCBub2RlIGhhbmRsZVxuICAgKiBAcGFyYW0ge251bWJlcn0gYWRkaXRpb25hbE9mZnNldCBUaGUgc2Nyb2xsIHZpZXcncyBib3R0b20gXCJjb250ZW50SW5zZXRcIi5cbiAgICogICAgICAgIERlZmF1bHQgaXMgMC5cbiAgICogQHBhcmFtIHtib29sfSBwcmV2ZW50TmVnYXRpdmVTY3JvbGxpbmcgV2hldGhlciB0byBhbGxvdyBwdWxsaW5nIHRoZSBjb250ZW50XG4gICAqICAgICAgICBkb3duIHRvIG1ha2UgaXQgbWVldCB0aGUga2V5Ym9hcmQncyB0b3AuIERlZmF1bHQgaXMgZmFsc2UuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJTY3JvbGxOYXRpdmVIYW5kbGVUb0tleWJvYXJkOiBmdW5jdGlvbihcbiAgICBub2RlSGFuZGxlOiBudW1iZXIsXG4gICAgYWRkaXRpb25hbE9mZnNldD86IG51bWJlcixcbiAgICBwcmV2ZW50TmVnYXRpdmVTY3JvbGxPZmZzZXQ/OiBib29sZWFuLFxuICApIHtcbiAgICB0aGlzLmFkZGl0aW9uYWxTY3JvbGxPZmZzZXQgPSBhZGRpdGlvbmFsT2Zmc2V0IHx8IDA7XG4gICAgdGhpcy5wcmV2ZW50TmVnYXRpdmVTY3JvbGxPZmZzZXQgPSAhIXByZXZlbnROZWdhdGl2ZVNjcm9sbE9mZnNldDtcbiAgICBVSU1hbmFnZXIubWVhc3VyZUxheW91dChcbiAgICAgIG5vZGVIYW5kbGUsXG4gICAgICBSZWFjdE5hdGl2ZS5maW5kTm9kZUhhbmRsZSh0aGlzLmdldElubmVyVmlld05vZGUoKSksXG4gICAgICB0aGlzLnNjcm9sbFJlc3BvbmRlclRleHRJbnB1dEZvY3VzRXJyb3IsXG4gICAgICB0aGlzLnNjcm9sbFJlc3BvbmRlcklucHV0TWVhc3VyZUFuZFNjcm9sbFRvS2V5Ym9hcmQsXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGNhbGN1bGF0aW9ucyBwZXJmb3JtZWQgaGVyZSBhc3N1bWUgdGhlIHNjcm9sbCB2aWV3IHRha2VzIHVwIHRoZSBlbnRpcmVcbiAgICogc2NyZWVuIC0gZXZlbiBpZiBoYXMgc29tZSBjb250ZW50IGluc2V0LiBXZSB0aGVuIG1lYXN1cmUgdGhlIG9mZnNldHMgb2YgdGhlXG4gICAqIGtleWJvYXJkLCBhbmQgY29tcGVuc2F0ZSBib3RoIGZvciB0aGUgc2Nyb2xsIHZpZXcncyBcImNvbnRlbnRJbnNldFwiLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVmdCBQb3NpdGlvbiBvZiBpbnB1dCB3LnIudC4gdGFibGUgdmlldy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHRvcCBQb3NpdGlvbiBvZiBpbnB1dCB3LnIudC4gdGFibGUgdmlldy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIFdpZHRoIG9mIHRoZSB0ZXh0IGlucHV0LlxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IEhlaWdodCBvZiB0aGUgdGV4dCBpbnB1dC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlcklucHV0TWVhc3VyZUFuZFNjcm9sbFRvS2V5Ym9hcmQ6IGZ1bmN0aW9uKFxuICAgIGxlZnQ6IG51bWJlcixcbiAgICB0b3A6IG51bWJlcixcbiAgICB3aWR0aDogbnVtYmVyLFxuICAgIGhlaWdodDogbnVtYmVyLFxuICApIHtcbiAgICBsZXQga2V5Ym9hcmRTY3JlZW5ZID0gRGltZW5zaW9ucy5nZXQoJ3dpbmRvdycpLmhlaWdodDtcbiAgICBpZiAodGhpcy5rZXlib2FyZFdpbGxPcGVuVG8pIHtcbiAgICAgIGtleWJvYXJkU2NyZWVuWSA9IHRoaXMua2V5Ym9hcmRXaWxsT3BlblRvLmVuZENvb3JkaW5hdGVzLnNjcmVlblk7XG4gICAgfVxuICAgIGxldCBzY3JvbGxPZmZzZXRZID1cbiAgICAgIHRvcCAtIGtleWJvYXJkU2NyZWVuWSArIGhlaWdodCArIHRoaXMuYWRkaXRpb25hbFNjcm9sbE9mZnNldDtcblxuICAgIC8vIEJ5IGRlZmF1bHQsIHRoaXMgY2FuIHNjcm9sbCB3aXRoIG5lZ2F0aXZlIG9mZnNldCwgcHVsbGluZyB0aGUgY29udGVudFxuICAgIC8vIGRvd24gc28gdGhhdCB0aGUgdGFyZ2V0IGNvbXBvbmVudCdzIGJvdHRvbSBtZWV0cyB0aGUga2V5Ym9hcmQncyB0b3AuXG4gICAgLy8gSWYgcmVxdWVzdGVkIG90aGVyd2lzZSwgY2FwIHRoZSBvZmZzZXQgYXQgMCBtaW5pbXVtIHRvIGF2b2lkIGNvbnRlbnRcbiAgICAvLyBzaGlmdGluZyBkb3duLlxuICAgIGlmICh0aGlzLnByZXZlbnROZWdhdGl2ZVNjcm9sbE9mZnNldCkge1xuICAgICAgc2Nyb2xsT2Zmc2V0WSA9IE1hdGgubWF4KDAsIHNjcm9sbE9mZnNldFkpO1xuICAgIH1cbiAgICB0aGlzLnNjcm9sbFJlc3BvbmRlclNjcm9sbFRvKHt4OiAwLCB5OiBzY3JvbGxPZmZzZXRZLCBhbmltYXRlZDogdHJ1ZX0pO1xuXG4gICAgdGhpcy5hZGRpdGlvbmFsT2Zmc2V0ID0gMDtcbiAgICB0aGlzLnByZXZlbnROZWdhdGl2ZVNjcm9sbE9mZnNldCA9IGZhbHNlO1xuICB9LFxuXG4gIHNjcm9sbFJlc3BvbmRlclRleHRJbnB1dEZvY3VzRXJyb3I6IGZ1bmN0aW9uKG1zZzogc3RyaW5nKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgbWVhc3VyaW5nIHRleHQgZmllbGQ6ICcsIG1zZyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGBjb21wb25lbnRXaWxsTW91bnRgIGlzIHRoZSBjbG9zZXN0IHRoaW5nIHRvIGEgIHN0YW5kYXJkIFwiY29uc3RydWN0b3JcIiBmb3JcbiAgICogUmVhY3QgY29tcG9uZW50cy5cbiAgICpcbiAgICogVGhlIGBrZXlib2FyZFdpbGxTaG93YCBpcyBjYWxsZWQgYmVmb3JlIGlucHV0IGZvY3VzLlxuICAgKi9cbiAgVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgY29uc3Qge2tleWJvYXJkU2hvdWxkUGVyc2lzdFRhcHN9ID0gdGhpcy5wcm9wcztcbiAgICB3YXJuaW5nKFxuICAgICAgdHlwZW9mIGtleWJvYXJkU2hvdWxkUGVyc2lzdFRhcHMgIT09ICdib29sZWFuJyxcbiAgICAgIGAna2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwcz17JHtrZXlib2FyZFNob3VsZFBlcnNpc3RUYXBzfX0nIGlzIGRlcHJlY2F0ZWQuIGAgK1xuICAgICAgICBgVXNlICdrZXlib2FyZFNob3VsZFBlcnNpc3RUYXBzPVwiJHtcbiAgICAgICAgICBrZXlib2FyZFNob3VsZFBlcnNpc3RUYXBzID8gJ2Fsd2F5cycgOiAnbmV2ZXInXG4gICAgICAgIH1cIicgaW5zdGVhZGAsXG4gICAgKTtcblxuICAgIHRoaXMua2V5Ym9hcmRXaWxsT3BlblRvID0gbnVsbDtcbiAgICB0aGlzLmFkZGl0aW9uYWxTY3JvbGxPZmZzZXQgPSAwO1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbktleWJvYXJkV2lsbFNob3cgPSBLZXlib2FyZC5hZGRMaXN0ZW5lcihcbiAgICAgICdrZXlib2FyZFdpbGxTaG93JyxcbiAgICAgIHRoaXMuc2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmRXaWxsU2hvdyxcbiAgICApO1xuXG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uS2V5Ym9hcmRXaWxsSGlkZSA9IEtleWJvYXJkLmFkZExpc3RlbmVyKFxuICAgICAgJ2tleWJvYXJkV2lsbEhpZGUnLFxuICAgICAgdGhpcy5zY3JvbGxSZXNwb25kZXJLZXlib2FyZFdpbGxIaWRlLFxuICAgICk7XG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uS2V5Ym9hcmREaWRTaG93ID0gS2V5Ym9hcmQuYWRkTGlzdGVuZXIoXG4gICAgICAna2V5Ym9hcmREaWRTaG93JyxcbiAgICAgIHRoaXMuc2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmREaWRTaG93LFxuICAgICk7XG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uS2V5Ym9hcmREaWRIaWRlID0gS2V5Ym9hcmQuYWRkTGlzdGVuZXIoXG4gICAgICAna2V5Ym9hcmREaWRIaWRlJyxcbiAgICAgIHRoaXMuc2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmREaWRIaWRlLFxuICAgICk7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb25LZXlib2FyZFdpbGxTaG93ICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbktleWJvYXJkV2lsbFNob3cucmVtb3ZlKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb25LZXlib2FyZFdpbGxIaWRlICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbktleWJvYXJkV2lsbEhpZGUucmVtb3ZlKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb25LZXlib2FyZERpZFNob3cgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uS2V5Ym9hcmREaWRTaG93LnJlbW92ZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fc3Vic2NyaXB0aW9uS2V5Ym9hcmREaWRIaWRlICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbktleWJvYXJkRGlkSGlkZS5yZW1vdmUoKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdhcm5pbmcsIHRoaXMgbWF5IGJlIGNhbGxlZCBzZXZlcmFsIHRpbWVzIGZvciBhIHNpbmdsZSBrZXlib2FyZCBvcGVuaW5nLlxuICAgKiBJdCdzIGJlc3QgdG8gc3RvcmUgdGhlIGluZm9ybWF0aW9uIGluIHRoaXMgbWV0aG9kIGFuZCB0aGVuIHRha2UgYW55IGFjdGlvblxuICAgKiBhdCBhIGxhdGVyIHBvaW50IChlaXRoZXIgaW4gYGtleWJvYXJkRGlkU2hvd2Agb3Igb3RoZXIpLlxuICAgKlxuICAgKiBIZXJlJ3MgdGhlIG9yZGVyIHRoYXQgZXZlbnRzIG9jY3VyIGluOlxuICAgKiAtIGZvY3VzXG4gICAqIC0gd2lsbFNob3cge3N0YXJ0Q29vcmRpbmF0ZXMsIGVuZENvb3JkaW5hdGVzfSBzZXZlcmFsIHRpbWVzXG4gICAqIC0gZGlkU2hvdyBzZXZlcmFsIHRpbWVzXG4gICAqIC0gYmx1clxuICAgKiAtIHdpbGxIaWRlIHtzdGFydENvb3JkaW5hdGVzLCBlbmRDb29yZGluYXRlc30gc2V2ZXJhbCB0aW1lc1xuICAgKiAtIGRpZEhpZGUgc2V2ZXJhbCB0aW1lc1xuICAgKlxuICAgKiBUaGUgYFNjcm9sbFJlc3BvbmRlcmAgbW9kdWxlIGNhbGxiYWNrcyBmb3IgZWFjaCBvZiB0aGVzZSBldmVudHMuXG4gICAqIEV2ZW4gdGhvdWdoIGFueSB1c2VyIGNvdWxkIGhhdmUgZWFzaWx5IGxpc3RlbmVkIHRvIGtleWJvYXJkIGV2ZW50c1xuICAgKiB0aGVtc2VsdmVzLCB1c2luZyB0aGVzZSBgcHJvcHNgIGNhbGxiYWNrcyBlbnN1cmVzIHRoYXQgb3JkZXJpbmcgb2YgZXZlbnRzXG4gICAqIGlzIGNvbnNpc3RlbnQgLSBhbmQgbm90IGRlcGVuZGVudCBvbiB0aGUgb3JkZXIgdGhhdCB0aGUga2V5Ym9hcmQgZXZlbnRzIGFyZVxuICAgKiBzdWJzY3JpYmVkIHRvLiBUaGlzIG1hdHRlcnMgd2hlbiB0ZWxsaW5nIHRoZSBzY3JvbGwgdmlldyB0byBzY3JvbGwgdG8gd2hlcmVcbiAgICogdGhlIGtleWJvYXJkIGlzIGhlYWRlZCAtIHRoZSBzY3JvbGwgcmVzcG9uZGVyIGJldHRlciBoYXZlIGJlZW4gbm90aWZpZWQgb2ZcbiAgICogdGhlIGtleWJvYXJkIGRlc3RpbmF0aW9uIGJlZm9yZSBiZWluZyBpbnN0cnVjdGVkIHRvIHNjcm9sbCB0byB3aGVyZSB0aGVcbiAgICoga2V5Ym9hcmQgd2lsbCBiZS4gU3RpY2sgdG8gdGhlIGBTY3JvbGxSZXNwb25kZXJgIGNhbGxiYWNrcywgYW5kIGV2ZXJ5dGhpbmdcbiAgICogd2lsbCB3b3JrLlxuICAgKlxuICAgKiBXQVJOSU5HOiBUaGVzZSBjYWxsYmFja3Mgd2lsbCBmaXJlIGV2ZW4gaWYgYSBrZXlib2FyZCBpcyBkaXNwbGF5ZWQgaW4gYVxuICAgKiBkaWZmZXJlbnQgbmF2aWdhdGlvbiBwYW5lLiBGaWx0ZXIgb3V0IHRoZSBldmVudHMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gICAqIHJlbGV2YW50IHRvIHlvdS4gKEZvciBleGFtcGxlLCBvbmx5IGlmIHlvdSByZWNlaXZlIHRoZXNlIGNhbGxiYWNrcyBhZnRlclxuICAgKiB5b3UgaGFkIGV4cGxpY2l0bHkgZm9jdXNlZCBhIG5vZGUgZXRjKS5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlcktleWJvYXJkV2lsbFNob3c6IGZ1bmN0aW9uKGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICB0aGlzLmtleWJvYXJkV2lsbE9wZW5UbyA9IGU7XG4gICAgdGhpcy5wcm9wcy5vbktleWJvYXJkV2lsbFNob3cgJiYgdGhpcy5wcm9wcy5vbktleWJvYXJkV2lsbFNob3coZSk7XG4gIH0sXG5cbiAgc2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmRXaWxsSGlkZTogZnVuY3Rpb24oZTogS2V5Ym9hcmRFdmVudCkge1xuICAgIHRoaXMua2V5Ym9hcmRXaWxsT3BlblRvID0gbnVsbDtcbiAgICB0aGlzLnByb3BzLm9uS2V5Ym9hcmRXaWxsSGlkZSAmJiB0aGlzLnByb3BzLm9uS2V5Ym9hcmRXaWxsSGlkZShlKTtcbiAgfSxcblxuICBzY3JvbGxSZXNwb25kZXJLZXlib2FyZERpZFNob3c6IGZ1bmN0aW9uKGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAvLyBUT0RPKDc2OTM5NjEpOiBUaGUgZXZlbnQgZm9yIERpZFNob3cgaXMgbm90IGF2YWlsYWJsZSBvbiBpT1MgeWV0LlxuICAgIC8vIFVzZSB0aGUgb25lIGZyb20gV2lsbFNob3cgYW5kIGRvIG5vdCBhc3NpZ24uXG4gICAgaWYgKGUpIHtcbiAgICAgIHRoaXMua2V5Ym9hcmRXaWxsT3BlblRvID0gZTtcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5vbktleWJvYXJkRGlkU2hvdyAmJiB0aGlzLnByb3BzLm9uS2V5Ym9hcmREaWRTaG93KGUpO1xuICB9LFxuXG4gIHNjcm9sbFJlc3BvbmRlcktleWJvYXJkRGlkSGlkZTogZnVuY3Rpb24oZTogS2V5Ym9hcmRFdmVudCkge1xuICAgIHRoaXMua2V5Ym9hcmRXaWxsT3BlblRvID0gbnVsbDtcbiAgICB0aGlzLnByb3BzLm9uS2V5Ym9hcmREaWRIaWRlICYmIHRoaXMucHJvcHMub25LZXlib2FyZERpZEhpZGUoZSk7XG4gIH0sXG59O1xuXG5jb25zdCBTY3JvbGxSZXNwb25kZXIgPSB7XG4gIE1peGluOiBTY3JvbGxSZXNwb25kZXJNaXhpbixcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2Nyb2xsUmVzcG9uZGVyO1xuIl19