4a547c02898c449de15c9c25b0fceaa3
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var invariant = require('invariant');

var ViewabilityHelper = function () {
  function ViewabilityHelper() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      viewAreaCoveragePercentThreshold: 0
    };
    (0, _classCallCheck2.default)(this, ViewabilityHelper);
    this._hasInteracted = false;
    this._timers = new Set();
    this._viewableIndices = [];
    this._viewableItems = new Map();
    this._config = config;
  }

  (0, _createClass2.default)(ViewabilityHelper, [{
    key: "dispose",
    value: function dispose() {
      this._timers.forEach(clearTimeout);
    }
  }, {
    key: "computeViewableItems",
    value: function computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange) {
      var _this$_config = this._config,
          itemVisiblePercentThreshold = _this$_config.itemVisiblePercentThreshold,
          viewAreaCoveragePercentThreshold = _this$_config.viewAreaCoveragePercentThreshold;
      var viewAreaMode = viewAreaCoveragePercentThreshold != null;
      var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;
      invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');
      var viewableIndices = [];

      if (itemCount === 0) {
        return viewableIndices;
      }

      var firstVisible = -1;

      var _ref = renderRange || {
        first: 0,
        last: itemCount - 1
      },
          first = _ref.first,
          last = _ref.last;

      if (last >= itemCount) {
        console.warn('Invalid render range computing viewability ' + JSON.stringify({
          renderRange: renderRange,
          itemCount: itemCount
        }));
        return [];
      }

      for (var idx = first; idx <= last; idx++) {
        var metrics = getFrameMetrics(idx);

        if (!metrics) {
          continue;
        }

        var top = metrics.offset - scrollOffset;
        var bottom = top + metrics.length;

        if (top < viewportHeight && bottom > 0) {
          firstVisible = idx;

          if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {
            viewableIndices.push(idx);
          }
        } else if (firstVisible >= 0) {
          break;
        }
      }

      return viewableIndices;
    }
  }, {
    key: "onUpdate",
    value: function onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange) {
      var _this = this;

      if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {
        return;
      }

      var viewableIndices = [];

      if (itemCount) {
        viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);
      }

      if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every(function (v, ii) {
        return v === viewableIndices[ii];
      })) {
        return;
      }

      this._viewableIndices = viewableIndices;

      if (this._config.minimumViewTime) {
        var handle = setTimeout(function () {
          _this._timers.delete(handle);

          _this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
        }, this._config.minimumViewTime);

        this._timers.add(handle);
      } else {
        this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
      }
    }
  }, {
    key: "resetViewableIndices",
    value: function resetViewableIndices() {
      this._viewableIndices = [];
    }
  }, {
    key: "recordInteraction",
    value: function recordInteraction() {
      this._hasInteracted = true;
    }
  }, {
    key: "_onUpdateSync",
    value: function _onUpdateSync(viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {
      var _this2 = this;

      viewableIndicesToCheck = viewableIndicesToCheck.filter(function (ii) {
        return _this2._viewableIndices.includes(ii);
      });
      var prevItems = this._viewableItems;
      var nextItems = new Map(viewableIndicesToCheck.map(function (ii) {
        var viewable = createViewToken(ii, true);
        return [viewable.key, viewable];
      }));
      var changed = [];

      for (var _iterator = _createForOfIteratorHelperLoose(nextItems), _step; !(_step = _iterator()).done;) {
        var _ref2 = _step.value;

        var _ref3 = (0, _slicedToArray2.default)(_ref2, 2);

        var key = _ref3[0];
        var viewable = _ref3[1];

        if (!prevItems.has(key)) {
          changed.push(viewable);
        }
      }

      for (var _iterator2 = _createForOfIteratorHelperLoose(prevItems), _step2; !(_step2 = _iterator2()).done;) {
        var _ref4 = _step2.value;

        var _ref5 = (0, _slicedToArray2.default)(_ref4, 2);

        var _key = _ref5[0];
        var _viewable = _ref5[1];

        if (!nextItems.has(_key)) {
          changed.push(_objectSpread(_objectSpread({}, _viewable), {}, {
            isViewable: false
          }));
        }
      }

      if (changed.length > 0) {
        this._viewableItems = nextItems;
        onViewableItemsChanged({
          viewableItems: Array.from(nextItems.values()),
          changed: changed,
          viewabilityConfig: this._config
        });
      }
    }
  }]);
  return ViewabilityHelper;
}();

function _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {
  if (_isEntirelyVisible(top, bottom, viewportHeight)) {
    return true;
  } else {
    var pixels = _getPixelsVisible(top, bottom, viewportHeight);

    var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);
    return percent >= viewablePercentThreshold;
  }
}

function _getPixelsVisible(top, bottom, viewportHeight) {
  var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);
  return Math.max(0, visibleHeight);
}

function _isEntirelyVisible(top, bottom, viewportHeight) {
  return top >= 0 && bottom <= viewportHeight && bottom > top;
}

module.exports = ViewabilityHelper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlZpZXdhYmlsaXR5SGVscGVyLmpzIl0sIm5hbWVzIjpbImludmFyaWFudCIsInJlcXVpcmUiLCJWaWV3YWJpbGl0eUhlbHBlciIsImNvbmZpZyIsInZpZXdBcmVhQ292ZXJhZ2VQZXJjZW50VGhyZXNob2xkIiwiX2hhc0ludGVyYWN0ZWQiLCJfdGltZXJzIiwiU2V0IiwiX3ZpZXdhYmxlSW5kaWNlcyIsIl92aWV3YWJsZUl0ZW1zIiwiTWFwIiwiX2NvbmZpZyIsImZvckVhY2giLCJjbGVhclRpbWVvdXQiLCJpdGVtQ291bnQiLCJzY3JvbGxPZmZzZXQiLCJ2aWV3cG9ydEhlaWdodCIsImdldEZyYW1lTWV0cmljcyIsInJlbmRlclJhbmdlIiwiaXRlbVZpc2libGVQZXJjZW50VGhyZXNob2xkIiwidmlld0FyZWFNb2RlIiwidmlld2FibGVQZXJjZW50VGhyZXNob2xkIiwidmlld2FibGVJbmRpY2VzIiwiZmlyc3RWaXNpYmxlIiwiZmlyc3QiLCJsYXN0IiwiY29uc29sZSIsIndhcm4iLCJKU09OIiwic3RyaW5naWZ5IiwiaWR4IiwibWV0cmljcyIsInRvcCIsIm9mZnNldCIsImJvdHRvbSIsImxlbmd0aCIsIl9pc1ZpZXdhYmxlIiwicHVzaCIsImNyZWF0ZVZpZXdUb2tlbiIsIm9uVmlld2FibGVJdGVtc0NoYW5nZWQiLCJ3YWl0Rm9ySW50ZXJhY3Rpb24iLCJjb21wdXRlVmlld2FibGVJdGVtcyIsImV2ZXJ5IiwidiIsImlpIiwibWluaW11bVZpZXdUaW1lIiwiaGFuZGxlIiwic2V0VGltZW91dCIsImRlbGV0ZSIsIl9vblVwZGF0ZVN5bmMiLCJhZGQiLCJ2aWV3YWJsZUluZGljZXNUb0NoZWNrIiwiZmlsdGVyIiwiaW5jbHVkZXMiLCJwcmV2SXRlbXMiLCJuZXh0SXRlbXMiLCJtYXAiLCJ2aWV3YWJsZSIsImtleSIsImNoYW5nZWQiLCJoYXMiLCJpc1ZpZXdhYmxlIiwidmlld2FibGVJdGVtcyIsIkFycmF5IiwiZnJvbSIsInZhbHVlcyIsInZpZXdhYmlsaXR5Q29uZmlnIiwiaXRlbUxlbmd0aCIsIl9pc0VudGlyZWx5VmlzaWJsZSIsInBpeGVscyIsIl9nZXRQaXhlbHNWaXNpYmxlIiwicGVyY2VudCIsInZpc2libGVIZWlnaHQiLCJNYXRoIiwibWluIiwibWF4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBU0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQXpCOztJQTJETUMsaUI7QUFVSiwrQkFFRTtBQUFBLFFBREFDLE1BQ0EsdUVBRDRCO0FBQUNDLE1BQUFBLGdDQUFnQyxFQUFFO0FBQW5DLEtBQzVCO0FBQUE7QUFBQSxTQVZGQyxjQVVFLEdBVndCLEtBVXhCO0FBQUEsU0FORkMsT0FNRSxHQU5xQixJQUFJQyxHQUFKLEVBTXJCO0FBQUEsU0FMRkMsZ0JBS0UsR0FMZ0MsRUFLaEM7QUFBQSxTQUpGQyxjQUlFLEdBSnVDLElBQUlDLEdBQUosRUFJdkM7QUFDQSxTQUFLQyxPQUFMLEdBQWVSLE1BQWY7QUFDRDs7Ozs4QkFLUztBQUNSLFdBQUtHLE9BQUwsQ0FBYU0sT0FBYixDQUFxQkMsWUFBckI7QUFDRDs7O3lDQU1DQyxTLEVBQ0FDLFksRUFDQUMsYyxFQUNBQyxlLEVBQ0FDLFcsRUFDZTtBQUFBLDBCQUlYLEtBQUtQLE9BSk07QUFBQSxVQUViUSwyQkFGYSxpQkFFYkEsMkJBRmE7QUFBQSxVQUdiZixnQ0FIYSxpQkFHYkEsZ0NBSGE7QUFLZixVQUFNZ0IsWUFBWSxHQUFHaEIsZ0NBQWdDLElBQUksSUFBekQ7QUFDQSxVQUFNaUIsd0JBQXdCLEdBQUdELFlBQVksR0FDekNoQixnQ0FEeUMsR0FFekNlLDJCQUZKO0FBR0FuQixNQUFBQSxTQUFTLENBQ1BxQix3QkFBd0IsSUFBSSxJQUE1QixJQUNHRiwyQkFBMkIsSUFBSSxJQUFoQyxNQUNHZixnQ0FBZ0MsSUFBSSxJQUR2QyxDQUZLLEVBSVAseUZBSk8sQ0FBVDtBQU1BLFVBQU1rQixlQUFlLEdBQUcsRUFBeEI7O0FB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RUVFLE1BRkYsRUFHRWxCLGNBSEYsRUFJVTtBQUNSLE1BQU13RCxhQUFhLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxDQUFTeEMsTUFBVCxFQUFpQmxCLGNBQWpCLElBQW1DeUQsSUFBSSxDQUFDRSxHQUFMLENBQVMzQyxHQUFULEVBQWMsQ0FBZCxDQUF6RDtBQUNBLFNBQU95QyxJQUFJLENBQUNFLEdBQUwsQ0FBUyxDQUFULEVBQVlILGFBQVosQ0FBUDtBQUNEOztBQUVELFNBQVNKLGtCQUFULENBQ0VwQyxHQURGLEVBRUVFLE1BRkYsRUFHRWxCLGNBSEYsRUFJVztBQUNULFNBQU9nQixHQUFHLElBQUksQ0FBUCxJQUFZRSxNQUFNLElBQUlsQixjQUF0QixJQUF3Q2tCLE1BQU0sR0FBR0YsR0FBeEQ7QUFDRDs7QUFFRDRDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjNFLGlCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxuZXhwb3J0IHR5cGUgVmlld1Rva2VuID0ge1xuICBpdGVtOiBhbnksXG4gIGtleTogc3RyaW5nLFxuICBpbmRleDogP251bWJlcixcbiAgaXNWaWV3YWJsZTogYm9vbGVhbixcbiAgc2VjdGlvbj86IGFueSxcbn07XG5cbmV4cG9ydCB0eXBlIFZpZXdhYmlsaXR5Q29uZmlnQ2FsbGJhY2tQYWlyID0ge1xuICB2aWV3YWJpbGl0eUNvbmZpZzogVmlld2FiaWxpdHlDb25maWcsXG4gIG9uVmlld2FibGVJdGVtc0NoYW5nZWQ6IChpbmZvOiB7XG4gICAgdmlld2FibGVJdGVtczogQXJyYXk8Vmlld1Rva2VuPixcbiAgICBjaGFuZ2VkOiBBcnJheTxWaWV3VG9rZW4+LFxuICB9KSA9PiB2b2lkLFxufTtcblxuZXhwb3J0IHR5cGUgVmlld2FiaWxpdHlDb25maWcgPSB7fFxuICAvKipcbiAgICogTWluaW11bSBhbW91bnQgb2YgdGltZSAoaW4gbWlsbGlzZWNvbmRzKSB0aGF0IGFuIGl0ZW0gbXVzdCBiZSBwaHlzaWNhbGx5IHZpZXdhYmxlIGJlZm9yZSB0aGVcbiAgICogdmlld2FiaWxpdHkgY2FsbGJhY2sgd2lsbCBiZSBmaXJlZC4gQSBoaWdoIG51bWJlciBtZWFucyB0aGF0IHNjcm9sbGluZyB0aHJvdWdoIGNvbnRlbnQgd2l0aG91dFxuICAgKiBzdG9wcGluZyB3aWxsIG5vdCBtYXJrIHRoZSBjb250ZW50IGFzIHZpZXdhYmxlLlxuICAgKi9cbiAgbWluaW11bVZpZXdUaW1lPzogbnVtYmVyLFxuXG4gIC8qKlxuICAgKiBQZXJjZW50IG9mIHZpZXdwb3J0IHRoYXQgbXVzdCBiZSBjb3ZlcmVkIGZvciBhIHBhcnRpYWxseSBvY2NsdWRlZCBpdGVtIHRvIGNvdW50IGFzXG4gICAqIFwidmlld2FibGVcIiwgMC0xMDAuIEZ1bGx5IHZpc2libGUgaXRlbXMgYXJlIGFsd2F5cyBjb25zaWRlcmVkIHZpZXdhYmxlLiBBIHZhbHVlIG9mIDAgbWVhbnNcbiAgICogdGhhdCBhIHNpbmdsZSBwaXhlbCBpbiB0aGUgdmlld3BvcnQgbWFrZXMgdGhlIGl0ZW0gdmlld2FibGUsIGFuZCBhIHZhbHVlIG9mIDEwMCBtZWFucyB0aGF0XG4gICAqIGFuIGl0ZW0gbXVzdCBiZSBlaXRoZXIgZW50aXJlbHkgdmlzaWJsZSBvciBjb3ZlciB0aGUgZW50aXJlIHZpZXdwb3J0IHRvIGNvdW50IGFzIHZpZXdhYmxlLlxuICAgKi9cbiAgdmlld0FyZWFDb3ZlcmFnZVBlcmNlbnRUaHJlc2hvbGQ/OiBudW1iZXIsXG5cbiAgLyoqXG4gICAqIFNpbWlsYXIgdG8gYHZpZXdBcmVhUGVyY2VudFRocmVzaG9sZGAsIGJ1dCBjb25zaWRlcnMgdGhlIHBlcmNlbnQgb2YgdGhlIGl0ZW0gdGhhdCBpcyB2aXNpYmxlLFxuICAgKiByYXRoZXIgdGhhbiB0aGUgZnJhY3Rpb24gb2YgdGhlIHZpZXdhYmxlIGFyZWEgaXQgY292ZXJzLlxuICAgKi9cbiAgaXRlbVZpc2libGVQZXJjZW50VGhyZXNob2xkPzogbnVtYmVyLFxuXG4gIC8qKlxuICAgKiBOb3RoaW5nIGlzIGNvbnNpZGVyZWQgdmlld2FibGUgdW50aWwgdGhlIHVzZXIgc2Nyb2xscyBvciBgcmVjb3JkSW50ZXJhY3Rpb25gIGlzIGNhbGxlZCBhZnRlclxuICAgKiByZW5kZXIuXG4gICAqL1xuICB3YWl0Rm9ySW50ZXJhY3Rpb24/OiBib29sZWFuLFxufH07XG5cbi8qKlxuICogQSBVdGlsaXR5IGNsYXNzIGZvciBjYWxjdWxhdGluZyB2aWV3YWJsZSBpdGVtcyBiYXNlZCBvbiBjdXJyZW50IG1ldHJpY3MgbGlrZSBzY3JvbGwgcG9zaXRpb24gYW5kXG4gKiBsYXlvdXQuXG4gKlxuICogQW4gaXRlbSBpcyBzYWlkIHRvIGJlIGluIGEgXCJ2aWV3YWJsZVwiIHN0YXRlIHdoZW4gYW55IG9mIHRoZSBmb2xsb3dpbmdcbiAqIGlzIHRydWUgZm9yIGxvbmdlciB0aGFuIGBtaW5pbXVtVmlld1RpbWVgIG1pbGxpc2Vjb25kcyAoYWZ0ZXIgYW4gaW50ZXJhY3Rpb24gaWYgYHdhaXRGb3JJbnRlcmFjdGlvbmBcbiAqIGlzIHRydWUpOlxuICpcbiAqIC0gT2NjdXB5aW5nID49IGB2aWV3QXJlYUNvdmVyYWdlUGVyY2VudFRocmVzaG9sZGAgb2YgdGhlIHZpZXcgYXJlYSBYT1IgZnJhY3Rpb24gb2YgdGhlIGl0ZW1cbiAqICAgdmlzaWJsZSBpbiB0aGUgdmlldyBhcmVhID49IGBpdGVtVmlzaWJsZVBlcmNlbnRUaHJlc2hvbGRgLlxuICogLSBFbnRpcmVseSB2aXNpYmxlIG9uIHNjcmVlblxuICovXG5jbGFzcyBWaWV3YWJpbGl0eUhlbHBlciB7XG4gIF9jb25maWc6IFZpZXdhYmlsaXR5Q29uZmlnO1xuICBfaGFzSW50ZXJhY3RlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAvKiAkRmxvd0ZpeE1lKD49MC42My4wIHNpdGU9cmVhY3RfbmF0aXZlX2ZiKSBUaGlzIGNvbW1lbnQgc3VwcHJlc3NlcyBhbiBlcnJvclxuICAgKiBmb3VuZCB3aGVuIEZsb3cgdjAuNjMgd2FzIGRlcGxveWVkLiBUbyBzZWUgdGhlIGVycm9yIGRlbGV0ZSB0aGlzIGNvbW1lbnRcbiAgICogYW5kIHJ1biBGbG93LiAqL1xuICBfdGltZXJzOiBTZXQ8bnVtYmVyPiA9IG5ldyBTZXQoKTtcbiAgX3ZpZXdhYmxlSW5kaWNlczogQXJyYXk8bnVtYmVyPiA9IFtdO1xuICBfdmlld2FibGVJdGVtczogTWFwPHN0cmluZywgVmlld1Rva2VuPiA9IG5ldyBNYXAoKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBjb25maWc6IFZpZXdhYmlsaXR5Q29uZmlnID0ge3ZpZXdBcmVhQ292ZXJhZ2VQZXJjZW50VGhyZXNob2xkOiAwfSxcbiAgKSB7XG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFudXAsIGUuZy4gb24gdW5tb3VudC4gQ2xlYXJzIGFueSBwZW5kaW5nIHRpbWVycy5cbiAgICovXG4gIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5fdGltZXJzLmZvckVhY2goY2xlYXJUaW1lb3V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoaWNoIGl0ZW1zIGFyZSB2aWV3YWJsZSBiYXNlZCBvbiB0aGUgY3VycmVudCBtZXRyaWNzIGFuZCBjb25maWcuXG4gICAqL1xuICBjb21wdXRlVmlld2FibGVJdGVtcyhcbiAgICBpdGVtQ291bnQ6IG51bWJlcixcbiAgICBzY3JvbGxPZmZzZXQ6IG51bWJlcixcbiAgICB2aWV3cG9ydEhlaWdodDogbnVtYmVyLFxuICAgIGdldEZyYW1lTWV0cmljczogKGluZGV4OiBudW1iZXIpID0+ID97bGVuZ3RoOiBudW1iZXIsIG9mZnNldDogbnVtYmVyfSxcbiAgICByZW5kZXJSYW5nZT86IHtmaXJzdDogbnVtYmVyLCBsYXN0OiBudW1iZXJ9LCAvLyBPcHRpb25hbCBvcHRpbWl6YXRpb24gdG8gcmVkdWNlIHRoZSBzY2FuIHNpemVcbiAgKTogQXJyYXk8bnVtYmVyPiB7XG4gICAgY29uc3Qge1xuICAgICAgaXRlbVZpc2libGVQZXJjZW50VGhyZXNob2xkLFxuICAgICAgdmlld0FyZWFDb3ZlcmFnZVBlcmNlbnRUaHJlc2hvbGQsXG4gICAgfSA9IHRoaXMuX2NvbmZpZztcbiAgICBjb25zdCB2aWV3QXJlYU1vZGUgPSB2aWV3QXJlYUNvdmVyYWdlUGVyY2VudFRocmVzaG9sZCAhPSBudWxsO1xuICAgIGNvbnN0IHZpZXdhYmxlUGVyY2VudFRocmVzaG9sZCA9IHZpZXdBcmVhTW9kZVxuICAgICAgPyB2aWV3QXJlYUNvdmVyYWdlUGVyY2VudFRocmVzaG9sZFxuICAgICAgOiBpdGVtVmlzaWJsZVBlcmNlbnRUaHJlc2hvbGQ7XG4gICAgaW52YXJpYW50KFxuICAgICAgdmlld2FibGVQZXJjZW50VGhyZXNob2xkICE9IG51bGwgJiZcbiAgICAgICAgKGl0ZW1WaXNpYmxlUGVyY2VudFRocmVzaG9sZCAhPSBudWxsKSAhPT1cbiAgICAgICAgICAodmlld0FyZWFDb3ZlcmFnZVBlcmNlbnRUaHJlc2hvbGQgIT0gbnVsbCksXG4gICAgICAnTXVzdCBzZXQgZXhhY3RseSBvbmUgb2YgaXRlbVZpc2libGVQZXJjZW50VGhyZXNob2xkIG9yIHZpZXdBcmVhQ292ZXJhZ2VQZXJjZW50VGhyZXNob2xkJyxcbiAgICApO1xuICAgIGNvbnN0IHZpZXdhYmxlSW5kaWNlcyA9IFtdO1xuICAgIGlmIChpdGVtQ291bnQgPT09IDApIHtcbiAgICAgIHJldHVybiB2aWV3YWJsZUluZGljZXM7XG4gICAgfVxuICAgIGxldCBmaXJzdFZpc2libGUgPSAtMTtcbiAgICBjb25zdCB7Zmlyc3QsIGxhc3R9ID0gcmVuZGVyUmFuZ2UgfHwge2ZpcnN0OiAwLCBsYXN0OiBpdGVtQ291bnQgLSAxfTtcbiAgICBpZiAobGFzdCA+PSBpdGVtQ291bnQpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ0ludmFsaWQgcmVuZGVyIHJhbmdlIGNvbXB1dGluZyB2aWV3YWJpbGl0eSAnICtcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeSh7cmVuZGVyUmFuZ2UsIGl0ZW1Db3VudH0pLFxuICAgICAgKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgZm9yIChsZXQgaWR4ID0gZmlyc3Q7IGlkeCA8PSBsYXN0OyBpZHgrKykge1xuICAgICAgY29uc3QgbWV0cmljcyA9IGdldEZyYW1lTWV0cmljcyhpZHgpO1xuICAgICAgaWYgKCFtZXRyaWNzKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgdG9wID0gbWV0cmljcy5vZmZzZXQgLSBzY3JvbGxPZmZzZXQ7XG4gICAgICBjb25zdCBib3R0b20gPSB0b3AgKyBtZXRyaWNzLmxlbmd0aDtcbiAgICAgIGlmICh0b3AgPCB2aWV3cG9ydEhlaWdodCAmJiBib3R0b20gPiAwKSB7XG4gICAgICAgIGZpcnN0VmlzaWJsZSA9IGlkeDtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIF9pc1ZpZXdhYmxlKFxuICAgICAgICAgICAgdmlld0FyZWFNb2RlLFxuICAgICAgICAgICAgdmlld2FibGVQZXJjZW50VGhyZXNob2xkLFxuICAgICAgICAgICAgdG9wLFxuICAgICAgICAgICAgYm90dG9tLFxuICAgICAgICAgICAgdmlld3BvcnRIZWlnaHQsXG4gICAgICAgICAgICBtZXRyaWNzLmxlbmd0aCxcbiAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgIHZpZXdhYmxlSW5kaWNlcy5wdXNoKGlkeCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZmlyc3RWaXNpYmxlID49IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2aWV3YWJsZUluZGljZXM7XG4gIH1cblxuICAvKipcbiAgICogRmlndXJlcyBvdXQgd2hpY2ggaXRlbXMgYXJlIHZpZXdhYmxlIGFuZCBob3cgdGhhdCBoYXMgY2hhbmdlZCBmcm9tIGJlZm9yZSBhbmQgY2FsbHNcbiAgICogYG9uVmlld2FibGVJdGVtc0NoYW5nZWRgIGFzIGFwcHJvcHJpYXRlLlxuICAgKi9cbiAgb25VcGRhdGUoXG4gICAgaXRlbUNvdW50OiBudW1iZXIsXG4gICAgc2Nyb2xsT2Zmc2V0OiBudW1iZXIsXG4gICAgdmlld3BvcnRIZWlnaHQ6IG51bWJlcixcbiAgICBnZXRGcmFtZU1ldHJpY3M6IChpbmRleDogbnVtYmVyKSA9PiA/e2xlbmd0aDogbnVtYmVyLCBvZmZzZXQ6IG51bWJlcn0sXG4gICAgY3JlYXRlVmlld1Rva2VuOiAoaW5kZXg6IG51bWJlciwgaXNWaWV3YWJsZTogYm9vbGVhbikgPT4gVmlld1Rva2VuLFxuICAgIG9uVmlld2FibGVJdGVtc0NoYW5nZWQ6ICh7XG4gICAgICB2aWV3YWJsZUl0ZW1zOiBBcnJheTxWaWV3VG9rZW4+LFxuICAgICAgY2hhbmdlZDogQXJyYXk8Vmlld1Rva2VuPixcbiAgICB9KSA9PiB2b2lkLFxuICAgIHJlbmRlclJhbmdlPzoge2ZpcnN0OiBudW1iZXIsIGxhc3Q6IG51bWJlcn0sIC8vIE9wdGlvbmFsIG9wdGltaXphdGlvbiB0byByZWR1Y2UgdGhlIHNjYW4gc2l6ZVxuICApOiB2b2lkIHtcbiAgICBpZiAoXG4gICAgICAodGhpcy5fY29uZmlnLndhaXRGb3JJbnRlcmFjdGlvbiAmJiAhdGhpcy5faGFzSW50ZXJhY3RlZCkgfHxcbiAgICAgIGl0ZW1Db3VudCA9PT0gMCB8fFxuICAgICAgIWdldEZyYW1lTWV0cmljcygwKVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdmlld2FibGVJbmRpY2VzID0gW107XG4gICAgaWYgKGl0ZW1Db3VudCkge1xuICAgICAgdmlld2FibGVJbmRpY2VzID0gdGhpcy5jb21wdXRlVmlld2FibGVJdGVtcyhcbiAgICAgICAgaXRlbUNvdW50LFxuICAgICAgICBzY3JvbGxPZmZzZXQsXG4gICAgICAgIHZpZXdwb3J0SGVpZ2h0LFxuICAgICAgICBnZXRGcmFtZU1ldHJpY3MsXG4gICAgICAgIHJlbmRlclJhbmdlLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgdGhpcy5fdmlld2FibGVJbmRpY2VzLmxlbmd0aCA9PT0gdmlld2FibGVJbmRpY2VzLmxlbmd0aCAmJlxuICAgICAgdGhpcy5fdmlld2FibGVJbmRpY2VzLmV2ZXJ5KCh2LCBpaSkgPT4gdiA9PT0gdmlld2FibGVJbmRpY2VzW2lpXSlcbiAgICApIHtcbiAgICAgIC8vIFdlIG1pZ2h0IGdldCBhIGxvdCBvZiBzY3JvbGwgZXZlbnRzIHdoZXJlIHZpc2liaWxpdHkgZG9lc24ndCBjaGFuZ2UgYW5kIHdlIGRvbid0IHdhbnQgdG8gZG9cbiAgICAgIC8vIGV4dHJhIHdvcmsgaW4gdGhvc2UgY2FzZXMuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3ZpZXdhYmxlSW5kaWNlcyA9IHZpZXdhYmxlSW5kaWNlcztcbiAgICBpZiAodGhpcy5fY29uZmlnLm1pbmltdW1WaWV3VGltZSkge1xuICAgICAgY29uc3QgaGFuZGxlID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuX3RpbWVycy5kZWxldGUoaGFuZGxlKTtcbiAgICAgICAgdGhpcy5fb25VcGRhdGVTeW5jKFxuICAgICAgICAgIHZpZXdhYmxlSW5kaWNlcyxcbiAgICAgICAgICBvblZpZXdhYmxlSXRlbXNDaGFuZ2VkLFxuICAgICAgICAgIGNyZWF0ZVZpZXdUb2tlbixcbiAgICAgICAgKTtcbiAgICAgIH0sIHRoaXMuX2NvbmZpZy5taW5pbXVtVmlld1RpbWUpO1xuICAgICAgdGhpcy5fdGltZXJzLmFkZChoYW5kbGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9vblVwZGF0ZVN5bmMoXG4gICAgICAgIHZpZXdhYmxlSW5kaWNlcyxcbiAgICAgICAgb25WaWV3YWJsZUl0ZW1zQ2hhbmdlZCxcbiAgICAgICAgY3JlYXRlVmlld1Rva2VuLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogY2xlYW4tdXAgY2FjaGVkIF92aWV3YWJsZUluZGljZXMgdG8gZXZhbHVhdGUgY2hhbmdlZCBpdGVtcyBvbiBuZXh0IHVwZGF0ZVxuICAgKi9cbiAgcmVzZXRWaWV3YWJsZUluZGljZXMoKSB7XG4gICAgdGhpcy5fdmlld2FibGVJbmRpY2VzID0gW107XG4gIH1cblxuICAvKipcbiAgICogUmVjb3JkcyB0aGF0IGFuIGludGVyYWN0aW9uIGhhcyBoYXBwZW5lZCBldmVuIGlmIHRoZXJlIGhhcyBiZWVuIG5vIHNjcm9sbC5cbiAgICovXG4gIHJlY29yZEludGVyYWN0aW9uKCkge1xuICAgIHRoaXMuX2hhc0ludGVyYWN0ZWQgPSB0cnVlO1xuICB9XG5cbiAgX29uVXBkYXRlU3luYyhcbiAgICB2aWV3YWJsZUluZGljZXNUb0NoZWNrLFxuICAgIG9uVmlld2FibGVJdGVtc0NoYW5nZWQsXG4gICAgY3JlYXRlVmlld1Rva2VuLFxuICApIHtcbiAgICAvLyBGaWx0ZXIgb3V0IGluZGljZXMgdGhhdCBoYXZlIGdvbmUgb3V0IG9mIHZpZXcgc2luY2UgdGhpcyBjYWxsIHdhcyBzY2hlZHVsZWQuXG4gICAgdmlld2FibGVJbmRpY2VzVG9DaGVjayA9IHZpZXdhYmxlSW5kaWNlc1RvQ2hlY2suZmlsdGVyKGlpID0+XG4gICAgICB0aGlzLl92aWV3YWJsZUluZGljZXMuaW5jbHVkZXMoaWkpLFxuICAgICk7XG4gICAgY29uc3QgcHJldkl0ZW1zID0gdGhpcy5fdmlld2FibGVJdGVtcztcbiAgICBjb25zdCBuZXh0SXRlbXMgPSBuZXcgTWFwKFxuICAgICAgdmlld2FibGVJbmRpY2VzVG9DaGVjay5tYXAoaWkgPT4ge1xuICAgICAgICBjb25zdCB2aWV3YWJsZSA9IGNyZWF0ZVZpZXdUb2tlbihpaSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBbdmlld2FibGUua2V5LCB2aWV3YWJsZV07XG4gICAgICB9KSxcbiAgICApO1xuXG4gICAgY29uc3QgY2hhbmdlZCA9IFtdO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmlld2FibGVdIG9mIG5leHRJdGVtcykge1xuICAgICAgaWYgKCFwcmV2SXRlbXMuaGFzKGtleSkpIHtcbiAgICAgICAgY2hhbmdlZC5wdXNoKHZpZXdhYmxlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBba2V5LCB2aWV3YWJsZV0gb2YgcHJldkl0ZW1zKSB7XG4gICAgICBpZiAoIW5leHRJdGVtcy5oYXMoa2V5KSkge1xuICAgICAgICBjaGFuZ2VkLnB1c2goey4uLnZpZXdhYmxlLCBpc1ZpZXdhYmxlOiBmYWxzZX0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY2hhbmdlZC5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLl92aWV3YWJsZUl0ZW1zID0gbmV4dEl0ZW1zO1xuICAgICAgb25WaWV3YWJsZUl0ZW1zQ2hhbmdlZCh7XG4gICAgICAgIHZpZXdhYmxlSXRlbXM6IEFycmF5LmZyb20obmV4dEl0ZW1zLnZhbHVlcygpKSxcbiAgICAgICAgY2hhbmdlZCxcbiAgICAgICAgdmlld2FiaWxpdHlDb25maWc6IHRoaXMuX2NvbmZpZyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfaXNWaWV3YWJsZShcbiAgdmlld0FyZWFNb2RlOiBib29sZWFuLFxuICB2aWV3YWJsZVBlcmNlbnRUaHJlc2hvbGQ6IG51bWJlcixcbiAgdG9wOiBudW1iZXIsXG4gIGJvdHRvbTogbnVtYmVyLFxuICB2aWV3cG9ydEhlaWdodDogbnVtYmVyLFxuICBpdGVtTGVuZ3RoOiBudW1iZXIsXG4pOiBib29sZWFuIHtcbiAgaWYgKF9pc0VudGlyZWx5VmlzaWJsZSh0b3AsIGJvdHRvbSwgdmlld3BvcnRIZWlnaHQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcGl4ZWxzID0gX2dldFBpeGVsc1Zpc2libGUodG9wLCBib3R0b20sIHZpZXdwb3J0SGVpZ2h0KTtcbiAgICBjb25zdCBwZXJjZW50ID1cbiAgICAgIDEwMCAqICh2aWV3QXJlYU1vZGUgPyBwaXhlbHMgLyB2aWV3cG9ydEhlaWdodCA6IHBpeGVscyAvIGl0ZW1MZW5ndGgpO1xuICAgIHJldHVybiBwZXJjZW50ID49IHZpZXdhYmxlUGVyY2VudFRocmVzaG9sZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZ2V0UGl4ZWxzVmlzaWJsZShcbiAgdG9wOiBudW1iZXIsXG4gIGJvdHRvbTogbnVtYmVyLFxuICB2aWV3cG9ydEhlaWdodDogbnVtYmVyLFxuKTogbnVtYmVyIHtcbiAgY29uc3QgdmlzaWJsZUhlaWdodCA9IE1hdGgubWluKGJvdHRvbSwgdmlld3BvcnRIZWlnaHQpIC0gTWF0aC5tYXgodG9wLCAwKTtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIHZpc2libGVIZWlnaHQpO1xufVxuXG5mdW5jdGlvbiBfaXNFbnRpcmVseVZpc2libGUoXG4gIHRvcDogbnVtYmVyLFxuICBib3R0b206IG51bWJlcixcbiAgdmlld3BvcnRIZWlnaHQ6IG51bWJlcixcbik6IGJvb2xlYW4ge1xuICByZXR1cm4gdG9wID49IDAgJiYgYm90dG9tIDw9IHZpZXdwb3J0SGVpZ2h0ICYmIGJvdHRvbSA+IHRvcDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBWaWV3YWJpbGl0eUhlbHBlcjtcbiJdfQ==