d40fdc1f68e559fdcad967a5f05a1f41
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var Platform = require("../../Utilities/Platform");

var React = require('react');

var ScrollView = require("../../Components/ScrollView/ScrollView");

var StyleSheet = require("../../StyleSheet/StyleSheet");

var Text = require("../../Text/Text");

var View = require("../../Components/View/View");

var YellowBoxCategory = require("../Data/YellowBoxCategory");

var YellowBoxInspectorFooter = require("./YellowBoxInspectorFooter");

var YellowBoxInspectorHeader = require("./YellowBoxInspectorHeader");

var YellowBoxInspectorSourceMapStatus = require("./YellowBoxInspectorSourceMapStatus");

var YellowBoxInspectorStackFrame = require("./YellowBoxInspectorStackFrame");

var YellowBoxStyle = require("./YellowBoxStyle");

var openFileInEditor = require("../../Core/Devtools/openFileInEditor");

var YellowBoxInspector = function (_React$Component) {
  (0, _inherits2.default)(YellowBoxInspector, _React$Component);

  var _super = _createSuper(YellowBoxInspector);

  function YellowBoxInspector() {
    var _this;

    (0, _classCallCheck2.default)(this, YellowBoxInspector);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      selectedIndex: 0
    };

    _this._handleRetrySymbolication = function () {
      _this._cancelSymbolication();

      _this.forceUpdate(function () {
        var warning = _this.props.warnings[_this.state.selectedIndex];
        _this._symbolication = warning.retrySymbolicate(function () {
          _this.forceUpdate();
        });
      });
    };

    _this._handleSelectIndex = function (selectedIndex) {
      _this.setState({
        selectedIndex: selectedIndex
      });
    };

    return _this;
  }

  (0, _createClass2.default)(YellowBoxInspector, [{
    key: "render",
    value: function render() {
      var warnings = this.props.warnings;
      var selectedIndex = this.state.selectedIndex;
      var warning = warnings[selectedIndex];
      return React.createElement(View, {
        style: styles.root
      }, React.createElement(YellowBoxInspectorHeader, {
        onSelectIndex: this._handleSelectIndex,
        selectedIndex: selectedIndex,
        warnings: warnings
      }), React.createElement(ScrollView, {
        contentContainerStyle: styles.bodyContent,
        key: selectedIndex,
        style: styles.body
      }, React.createElement(View, null, React.createElement(View, {
        style: styles.bodyHeading
      }, React.createElement(Text, {
        style: styles.bodyHeadingText
      }, "Warning")), React.createElement(Text, {
        style: styles.bodyText
      }, YellowBoxCategory.render(warning.message, styles.substitutionText))), React.createElement(View, {
        style: styles.bodySection
      }, React.createElement(View, {
        style: styles.bodyHeading
      }, React.createElement(Text, {
        style: styles.bodyHeadingText
      }, "Stack"), React.createElement(YellowBoxInspectorSourceMapStatus, {
        onPress: warning.symbolicated.status === 'FAILED' ? this._handleRetrySymbolication : null,
        status: warning.symbolicated.status
      })), warning.getAvailableStack().map(function (frame, index) {
        var file = frame.file,
            lineNumber = frame.lineNumber;
        return React.createElement(YellowBoxInspectorStackFrame, {
          key: index,
          frame: frame,
          onPress: warning.symbolicated.status === 'COMPLETE' && file != null && lineNumber != null ? function () {
            openFileInEditor(file, lineNumber);
          } : null
        });
      }))), React.createElement(YellowBoxInspectorFooter, {
        onDismiss: this.props.onDismiss,
        onMinimize: this.props.onMinimize
      }));
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this._handleSymbolication();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (prevProps.warnings !== this.props.warnings || prevState.selectedIndex !== this.state.selectedIndex) {
        this._cancelSymbolication();

        this._handleSymbolication();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._cancelSymbolication();
    }
  }, {
    key: "_handleSymbolication",
    value: function _handleSymbolication() {
      var _this2 = this;

      var warning = this.props.warnings[this.state.selectedIndex];

      if (warning.symbolicated.status !== 'COMPLETE') {
        this._symbolication = warning.symbolicate(function () {
          _this2.forceUpdate();
        });
      }
    }
  }, {
    key: "_cancelSymbolication",
    value: function _cancelSymbolication() {
      if (this._symbolication != null) {
        this._symbolication.abort();

        this._symbolication = null;
      }
    }
  }]);
  return YellowBoxInspector;
}(React.Component);

var styles = StyleSheet.create({
  root: {
    elevation: Platform.OS === 'android' ? Number.MAX_SAFE_INTEGER : undefined,
    height: '100%'
  },
  body: {
    backgroundColor: YellowBoxStyle.getBackgroundColor(0.95),
    borderBottomColor: YellowBoxStyle.getDividerColor(0.95),
    borderBottomWidth: StyleSheet.hairlineWidth,
    borderTopColor: YellowBoxStyle.getDividerColor(0.95),
    borderTopWidth: StyleSheet.hairlineWidth,
    flex: 1
  },
  bodyContent: {
    paddingVertical: 12
  },
  bodyHeading: {
    alignItems: 'center',
    flexDirection: 'row',
    marginBottom: 6,
    paddingHorizontal: 12
  },
  bodyHeadingText: {
    color: YellowBoxStyle.getTextColor(1),
    flex: 1,
    fontSize: 20,
    fontWeight: '600',
    includeFontPadding: false,
    lineHeight: 28
  },
  bodyText: {
    color: YellowBoxStyle.getTextColor(1),
    fontSize: 14,
    includeFontPadding: false,
    lineHeight: 18,
    paddingHorizontal: 12
  },
  substitutionText: {
    color: YellowBoxStyle.getTextColor(0.6)
  },
  bodySection: {
    marginTop: 20
  }
});
module.exports = YellowBoxInspector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlllbGxvd0JveEluc3BlY3Rvci5qcyJdLCJuYW1lcyI6WyJQbGF0Zm9ybSIsInJlcXVpcmUiLCJSZWFjdCIsIlNjcm9sbFZpZXciLCJTdHlsZVNoZWV0IiwiVGV4dCIsIlZpZXciLCJZZWxsb3dCb3hDYXRlZ29yeSIsIlllbGxvd0JveEluc3BlY3RvckZvb3RlciIsIlllbGxvd0JveEluc3BlY3RvckhlYWRlciIsIlllbGxvd0JveEluc3BlY3RvclNvdXJjZU1hcFN0YXR1cyIsIlllbGxvd0JveEluc3BlY3RvclN0YWNrRnJhbWUiLCJZZWxsb3dCb3hTdHlsZSIsIm9wZW5GaWxlSW5FZGl0b3IiLCJZZWxsb3dCb3hJbnNwZWN0b3IiLCJzdGF0ZSIsInNlbGVjdGVkSW5kZXgiLCJfaGFuZGxlUmV0cnlTeW1ib2xpY2F0aW9uIiwiX2NhbmNlbFN5bWJvbGljYXRpb24iLCJmb3JjZVVwZGF0ZSIsIndhcm5pbmciLCJwcm9wcyIsIndhcm5pbmdzIiwiX3N5bWJvbGljYXRpb24iLCJyZXRyeVN5bWJvbGljYXRlIiwiX2hhbmRsZVNlbGVjdEluZGV4Iiwic2V0U3RhdGUiLCJzdHlsZXMiLCJyb290IiwiYm9keUNvbnRlbnQiLCJib2R5IiwiYm9keUhlYWRpbmciLCJib2R5SGVhZGluZ1RleHQiLCJib2R5VGV4dCIsInJlbmRlciIsIm1lc3NhZ2UiLCJzdWJzdGl0dXRpb25UZXh0IiwiYm9keVNlY3Rpb24iLCJzeW1ib2xpY2F0ZWQiLCJzdGF0dXMiLCJnZXRBdmFpbGFibGVTdGFjayIsIm1hcCIsImZyYW1lIiwiaW5kZXgiLCJmaWxlIiwibGluZU51bWJlciIsIm9uRGlzbWlzcyIsIm9uTWluaW1pemUiLCJfaGFuZGxlU3ltYm9saWNhdGlvbiIsInByZXZQcm9wcyIsInByZXZTdGF0ZSIsInN5bWJvbGljYXRlIiwiYWJvcnQiLCJDb21wb25lbnQiLCJjcmVhdGUiLCJlbGV2YXRpb24iLCJPUyIsIk51bWJlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJ1bmRlZmluZWQiLCJoZWlnaHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJnZXRCYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJCb3R0b21Db2xvciIsImdldERpdmlkZXJDb2xvciIsImJvcmRlckJvdHRvbVdpZHRoIiwiaGFpcmxpbmVXaWR0aCIsImJvcmRlclRvcENvbG9yIiwiYm9yZGVyVG9wV2lkdGgiLCJmbGV4IiwicGFkZGluZ1ZlcnRpY2FsIiwiYWxpZ25JdGVtcyIsImZsZXhEaXJlY3Rpb24iLCJtYXJnaW5Cb3R0b20iLCJwYWRkaW5nSG9yaXpvbnRhbCIsImNvbG9yIiwiZ2V0VGV4dENvbG9yIiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwiaW5jbHVkZUZvbnRQYWRkaW5nIiwibGluZUhlaWdodCIsIm1hcmdpblRvcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxRQUFRLEdBQUdDLE9BQU8sNEJBQXhCOztBQUNBLElBQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsSUFBTUUsVUFBVSxHQUFHRixPQUFPLDBDQUExQjs7QUFDQSxJQUFNRyxVQUFVLEdBQUdILE9BQU8sK0JBQTFCOztBQUNBLElBQU1JLElBQUksR0FBR0osT0FBTyxtQkFBcEI7O0FBQ0EsSUFBTUssSUFBSSxHQUFHTCxPQUFPLDhCQUFwQjs7QUFDQSxJQUFNTSxpQkFBaUIsR0FBR04sT0FBTyw2QkFBakM7O0FBQ0EsSUFBTU8sd0JBQXdCLEdBQUdQLE9BQU8sOEJBQXhDOztBQUNBLElBQU1RLHdCQUF3QixHQUFHUixPQUFPLDhCQUF4Qzs7QUFDQSxJQUFNUyxpQ0FBaUMsR0FBR1QsT0FBTyx1Q0FBakQ7O0FBQ0EsSUFBTVUsNEJBQTRCLEdBQUdWLE9BQU8sa0NBQTVDOztBQUNBLElBQU1XLGNBQWMsR0FBR1gsT0FBTyxvQkFBOUI7O0FBRUEsSUFBTVksZ0JBQWdCLEdBQUdaLE9BQU8sd0NBQWhDOztJQWVNYSxrQjs7Ozs7Ozs7Ozs7Ozs7O1VBR0pDLEssR0FBZTtBQUNiQyxNQUFBQSxhQUFhLEVBQUU7QUFERixLOztVQTBGZkMseUIsR0FBNEIsWUFBTTtBQUNoQyxZQUFLQyxvQkFBTDs7QUFDQSxZQUFLQyxXQUFMLENBQWlCLFlBQU07QUFDckIsWUFBTUMsT0FBTyxHQUFHLE1BQUtDLEtBQUwsQ0FBV0MsUUFBWCxDQUFvQixNQUFLUCxLQUFMLENBQVdDLGFBQS9CLENBQWhCO0FBQ0EsY0FBS08sY0FBTCxHQUFzQkgsT0FBTyxDQUFDSSxnQkFBUixDQUF5QixZQUFNO0FBQ25ELGdCQUFLTCxXQUFMO0FBQ0QsU0FGcUIsQ0FBdEI7QUFHRCxPQUxEO0FBTUQsSzs7VUFrQkRNLGtCLEdBQXFCLFVBQUNULGFBQUQsRUFBaUM7QUFDcEQsWUFBS1UsUUFBTCxDQUFjO0FBQUNWLFFBQUFBLGFBQWEsRUFBYkE7QUFBRCxPQUFkO0FBQ0QsSzs7Ozs7Ozs2QkFsSG9CO0FBQUEsVUFDWk0sUUFEWSxHQUNBLEtBQUtELEtBREwsQ0FDWkMsUUFEWTtBQUFBLFVBRVpOLGFBRlksR0FFSyxLQUFLRCxLQUZWLENBRVpDLGFBRlk7QUFJbkIsVUFBTUksT0FBTyxHQUFHRSxRQUFRLENBQUNOLGFBQUQsQ0FBeEI7QUFFQSxhQUNFLG9CQUFDLElBQUQ7QUFBTSxRQUFBLEtBQUssRUFBRVcsTUFBTSxDQUFDQztBQUFwQixTQUNFLG9CQUFDLHdCQUFEO0FBQ0UsUUFBQSxhQUFhLEVBQUUsS0FBS0gsa0JBRHRCO0FBRUUsUUFBQSxhQUFhLEVBQUVULGFBRmpCO0FBR0UsUUFBQSxRQUFRLEVBQUVNO0FBSFosUUFERixFQU1FLG9CQUFDLFVBQUQ7QUFDRSxRQUFBLHFCQUFxQixFQUFFSyxNQUFNLENBQUNFLFdBRGhDO0FBRUUsUUFBQSxHQUFHLEVBQUViLGFBRlA7QUFHRSxRQUFBLEtBQUssRUFBRVcsTUFBTSxDQUFDRztBQUhoQixTQUlFLG9CQUFDLElBQUQsUUFDRSxvQkFBQyxJQUFEO0FBQU0sUUFBQSxLQUFLLEVBQUVILE1BQU0sQ0FBQ0k7QUFBcEIsU0FDRSxvQkFBQyxJQUFEO0FBQU0sUUFBQSxLQUFLLEVBQUVKLE1BQU0sQ0FBQ0s7QUFBcEIsbUJBREYsQ0FERixFQUlFLG9CQUFDLElBQUQ7QUFBTSxRQUFBLEtBQUssRUFBRUwsTUFBTSxDQUFDTTtBQUFwQixTQUNHMUIsaUJBQWlCLENBQUMyQixNQUFsQixDQUNDZCxPQUFPLENBQUNlLE9BRFQsRUFFQ1IsTUFBTSxDQUFDUyxnQkFGUixDQURILENBSkYsQ0FKRixFQWVFLG9CQUFDLElBQUQ7QUFBTSxRQUFBLEtBQUssRUFBRVQsTUFBTSxDQUFDVTtBQUFwQixTQUNFLG9CQUFDLElBQUQ7QUFBTSxRQUFBLEtBQUssRUFBRVYsTUFBTSxDQUFDSTtBQUFwQixTQUNFLG9CQUFDLElBQUQ7QUFBTSxRQUFBLEtBQUssRUFBRUosTUFBTSxDQUFDSztBQUFwQixpQkFERixFQUVFLG9CQUFDLGlDQUFEO0FBQ0UsUUFBQSxPQUFPLEVBQ0xaLE9BQU8sQ0FBQ2tCLFlBQVIsQ0FBcUJDLE1BQXJCLEtBQWdDLFFBQWhDLEdBQ0ksS0FBS3RCLHlCQURULEdBRUksSUFKUjtBQU1FLFFBQUEsTUFBTSxFQUFFRyxPQUFPLENBQUNrQixZQUFSLENBQXFCQztBQU4vQixRQUZGLENBREYsRUFZR25CLE9BQU8sQ0FBQ29CLGlCQUFSLEdBQTRCQyxHQUE1QixDQUFnQyxVQUFDQyxLQUFELEVBQVFDLEtBQVIsRUFBa0I7QUFBQSxZQUMxQ0MsSUFEMEMsR0FDdEJGLEtBRHNCLENBQzFDRSxJQUQwQztBQUFBLFlBQ3BDQyxVQURvQyxHQUN0QkgsS0FEc0IsQ0FDcENHLFVBRG9DO0FBRWpELGVBQ0Usb0JBQUMsNEJBQUQ7QUFDRSxVQUFBLEdBQUcsRUFBRUYsS0FEUDtBQUVFLFVBQUEsS0FBSyxFQUFFRCxLQUZUO0FBR0UsVUFBQSxPQUFPLEVBQ0x0QixPQUFPLENBQUNrQixZQUFSLENBQXFCQyxNQUFyQixLQUFnQyxVQUFoQyxJQUNBSyxJQUFJLElBQUksSUFEUixJQUVBQyxVQUFVLElBQUksSUFGZCxHQUdJLFlBQU07QUFDSmhDLFlBQUFBLGdCQUFnQixDQUFDK0IsSUFBRCxFQUFPQyxVQUFQLENBQWhCO0FBQ0QsV0FMTCxHQU1JO0FBVlIsVUFERjtBQWVELE9BakJBLENBWkgsQ0FmRixDQU5GLEVBcURFLG9CQUFDLHdCQUFEO0FBQ0UsUUFBQSxTQUFTLEVBQUUsS0FBS3hCLEtBQUwsQ0FBV3lCLFNBRHhCO0FBRUUsUUFBQSxVQUFVLEVBQUUsS0FBS3pCLEtBQUwsQ0FBVzBCO0FBRnpCLFFBckRGLENBREY7QUE0REQ7Ozt3Q0FFeUI7QUFDeEIsV0FBS0Msb0JBQUw7QUFDRDs7O3VDQUVrQkMsUyxFQUFrQkMsUyxFQUF3QjtBQUMzRCxVQUNFRCxTQUFTLENBQUMzQixRQUFWLEtBQXVCLEtBQUtELEtBQUwsQ0FBV0MsUUFBbEMsSUFDQTRCLFNBQVMsQ0FBQ2xDLGFBQVYsS0FBNEIsS0FBS0QsS0FBTCxDQUFXQyxhQUZ6QyxFQUdFO0FBQ0EsYUFBS0Usb0JBQUw7O0FBQ0EsYUFBSzhCLG9CQUFMO0FBQ0Q7QUFDRjs7OzJDQUU0QjtBQUMzQixXQUFLOUIsb0JBQUw7QUFDRDs7OzJDQVk0QjtBQUFBOztBQUMzQixVQUFNRSxPQUFPLEdBQUcsS0FBS0MsS0FBTCxDQUFXQyxRQUFYLENBQW9CLEtBQUtQLEtBQUwsQ0FBV0MsYUFBL0IsQ0FBaEI7O0FBQ0EsVUFBSUksT0FBTyxDQUFDa0IsWUFBUixDQUFxQkMsTUFBckIsS0FBZ0MsVUFBcEMsRUFBZ0Q7QUFDOUMsYUFBS2hCLGNBQUwsR0FBc0JILE9BQU8sQ0FBQytCLFdBQVIsQ0FBb0IsWUFBTTtBQUM5QyxVQUFBLE1BQUksQ0FBQ2hDLFdBQUw7QUFDRCxTQUZxQixDQUF0QjtBQUdEO0FBQ0Y7OzsyQ0FFNEI7QUFDM0IsVUFBSSxLQUFLSSxjQUFMLElBQXVCLElBQTNCLEVBQWlDO0FBQy9CLGFBQUtBLGNBQUwsQ0FBb0I2QixLQUFwQjs7QUFDQSxhQUFLN0IsY0FBTCxHQUFzQixJQUF0QjtBQUNEO0FBQ0Y7OztFQXJIOEJyQixLQUFLLENBQUNtRCxTOztBQTRIdkMsSUFBTTFCLE1BQU0sR0FBR3ZCLFVBQVUsQ0FBQ2tELE1BQVgsQ0FBa0I7QUFDL0IxQixFQUFBQSxJQUFJLEVBQUU7QUFDSjJCLElBQUFBLFNBQVMsRUFBRXZELFFBQVEsQ0FBQ3dELEVBQVQsS0FBZ0IsU0FBaEIsR0FBNEJDLE1BQU0sQ0FBQ0MsZ0JBQW5DLEdBQXNEQyxTQUQ3RDtBQUVKQyxJQUFBQSxNQUFNLEVBQUU7QUFGSixHQUR5QjtBQUsvQjlCLEVBQUFBLElBQUksRUFBRTtBQUNKK0IsSUFBQUEsZUFBZSxFQUFFakQsY0FBYyxDQUFDa0Qsa0JBQWYsQ0FBa0MsSUFBbEMsQ0FEYjtBQUVKQyxJQUFBQSxpQkFBaUIsRUFBRW5ELGNBQWMsQ0FBQ29ELGVBQWYsQ0FBK0IsSUFBL0IsQ0FGZjtBQUdKQyxJQUFBQSxpQkFBaUIsRUFBRTdELFVBQVUsQ0FBQzhELGFBSDFCO0FBSUpDLElBQUFBLGNBQWMsRUFBRXZELGNBQWMsQ0FBQ29ELGVBQWYsQ0FBK0IsSUFBL0IsQ0FKWjtBQUtKSSxJQUFBQSxjQUFjLEVBQUVoRSxVQUFVLENBQUM4RCxhQUx2QjtBQU1KRyxJQUFBQSxJQUFJLEVBQUU7QUFORixHQUx5QjtBQWEvQnhDLEVBQUFBLFdBQVcsRUFBRTtBQUNYeUMsSUFBQUEsZUFBZSxFQUFFO0FBRE4sR0Fia0I7QUFnQi9CdkMsRUFBQUEsV0FBVyxFQUFFO0FBQ1h3QyxJQUFBQSxVQUFVLEVBQUUsUUFERDtBQUVYQyxJQUFBQSxhQUFhLEVBQUUsS0FGSjtBQUdYQyxJQUFBQSxZQUFZLEVBQUUsQ0FISDtBQUlYQyxJQUFBQSxpQkFBaUIsRUFBRTtBQUpSLEdBaEJrQjtBQXNCL0IxQyxFQUFBQSxlQUFlLEVBQUU7QUFDZjJDLElBQUFBLEtBQUssRUFBRS9ELGNBQWMsQ0FBQ2dFLFlBQWYsQ0FBNEIsQ0FBNUIsQ0FEUTtBQUVmUCxJQUFBQSxJQUFJLEVBQUUsQ0FGUztBQUdmUSxJQUFBQSxRQUFRLEVBQUUsRUFISztBQUlmQyxJQUFBQSxVQUFVLEVBQUUsS0FKRztBQUtmQyxJQUFBQSxrQkFBa0IsRUFBRSxLQUxMO0FBTWZDLElBQUFBLFVBQVUsRUFBRTtBQU5HLEdBdEJjO0FBOEIvQi9DLEVBQUFBLFFBQVEsRUFBRTtBQUNSMEMsSUFBQUEsS0FBSyxFQUFFL0QsY0FBYyxDQUFDZ0UsWUFBZixDQUE0QixDQUE1QixDQURDO0FBRVJDLElBQUFBLFFBQVEsRUFBRSxFQUZGO0FBR1JFLElBQUFBLGtCQUFrQixFQUFFLEtBSFo7QUFJUkMsSUFBQUEsVUFBVSxFQUFFLEVBSko7QUFLUk4sSUFBQUEsaUJBQWlCLEVBQUU7QUFMWCxHQTlCcUI7QUFxQy9CdEMsRUFBQUEsZ0JBQWdCLEVBQUU7QUFDaEJ1QyxJQUFBQSxLQUFLLEVBQUUvRCxjQUFjLENBQUNnRSxZQUFmLENBQTRCLEdBQTVCO0FBRFMsR0FyQ2E7QUF3Qy9CdkMsRUFBQUEsV0FBVyxFQUFFO0FBQ1g0QyxJQUFBQSxTQUFTLEVBQUU7QUFEQTtBQXhDa0IsQ0FBbEIsQ0FBZjtBQTZDQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCckUsa0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IFBsYXRmb3JtID0gcmVxdWlyZSgnLi4vLi4vVXRpbGl0aWVzL1BsYXRmb3JtJyk7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBTY3JvbGxWaWV3ID0gcmVxdWlyZSgnLi4vLi4vQ29tcG9uZW50cy9TY3JvbGxWaWV3L1Njcm9sbFZpZXcnKTtcbmNvbnN0IFN0eWxlU2hlZXQgPSByZXF1aXJlKCcuLi8uLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnKTtcbmNvbnN0IFRleHQgPSByZXF1aXJlKCcuLi8uLi9UZXh0L1RleHQnKTtcbmNvbnN0IFZpZXcgPSByZXF1aXJlKCcuLi8uLi9Db21wb25lbnRzL1ZpZXcvVmlldycpO1xuY29uc3QgWWVsbG93Qm94Q2F0ZWdvcnkgPSByZXF1aXJlKCcuLi9EYXRhL1llbGxvd0JveENhdGVnb3J5Jyk7XG5jb25zdCBZZWxsb3dCb3hJbnNwZWN0b3JGb290ZXIgPSByZXF1aXJlKCcuL1llbGxvd0JveEluc3BlY3RvckZvb3RlcicpO1xuY29uc3QgWWVsbG93Qm94SW5zcGVjdG9ySGVhZGVyID0gcmVxdWlyZSgnLi9ZZWxsb3dCb3hJbnNwZWN0b3JIZWFkZXInKTtcbmNvbnN0IFllbGxvd0JveEluc3BlY3RvclNvdXJjZU1hcFN0YXR1cyA9IHJlcXVpcmUoJy4vWWVsbG93Qm94SW5zcGVjdG9yU291cmNlTWFwU3RhdHVzJyk7XG5jb25zdCBZZWxsb3dCb3hJbnNwZWN0b3JTdGFja0ZyYW1lID0gcmVxdWlyZSgnLi9ZZWxsb3dCb3hJbnNwZWN0b3JTdGFja0ZyYW1lJyk7XG5jb25zdCBZZWxsb3dCb3hTdHlsZSA9IHJlcXVpcmUoJy4vWWVsbG93Qm94U3R5bGUnKTtcblxuY29uc3Qgb3BlbkZpbGVJbkVkaXRvciA9IHJlcXVpcmUoJy4uLy4uL0NvcmUvRGV2dG9vbHMvb3BlbkZpbGVJbkVkaXRvcicpO1xuXG5pbXBvcnQgdHlwZSBZZWxsb3dCb3hXYXJuaW5nIGZyb20gJy4uL0RhdGEvWWVsbG93Qm94V2FybmluZyc7XG5pbXBvcnQgdHlwZSB7U3ltYm9saWNhdGlvblJlcXVlc3R9IGZyb20gJy4uL0RhdGEvWWVsbG93Qm94V2FybmluZyc7XG5cbnR5cGUgUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgb25EaXNtaXNzOiAoKSA9PiB2b2lkLFxuICBvbk1pbmltaXplOiAoKSA9PiB2b2lkLFxuICB3YXJuaW5nczogJFJlYWRPbmx5QXJyYXk8WWVsbG93Qm94V2FybmluZz4sXG58fT47XG5cbnR5cGUgU3RhdGUgPSB7fFxuICBzZWxlY3RlZEluZGV4OiBudW1iZXIsXG58fTtcblxuY2xhc3MgWWVsbG93Qm94SW5zcGVjdG9yIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuICBfc3ltYm9saWNhdGlvbjogP1N5bWJvbGljYXRpb25SZXF1ZXN0O1xuXG4gIHN0YXRlOiBTdGF0ZSA9IHtcbiAgICBzZWxlY3RlZEluZGV4OiAwLFxuICB9O1xuXG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHtcbiAgICBjb25zdCB7d2FybmluZ3N9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7c2VsZWN0ZWRJbmRleH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgY29uc3Qgd2FybmluZyA9IHdhcm5pbmdzW3NlbGVjdGVkSW5kZXhdO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMucm9vdH0+XG4gICAgICAgIDxZZWxsb3dCb3hJbnNwZWN0b3JIZWFkZXJcbiAgICAgICAgICBvblNlbGVjdEluZGV4PXt0aGlzLl9oYW5kbGVTZWxlY3RJbmRleH1cbiAgICAgICAgICBzZWxlY3RlZEluZGV4PXtzZWxlY3RlZEluZGV4fVxuICAgICAgICAgIHdhcm5pbmdzPXt3YXJuaW5nc31cbiAgICAgICAgLz5cbiAgICAgICAgPFNjcm9sbFZpZXdcbiAgICAgICAgICBjb250ZW50Q29udGFpbmVyU3R5bGU9e3N0eWxlcy5ib2R5Q29udGVudH1cbiAgICAgICAgICBrZXk9e3NlbGVjdGVkSW5kZXh9XG4gICAgICAgICAgc3R5bGU9e3N0eWxlcy5ib2R5fT5cbiAgICAgICAgICA8Vmlldz5cbiAgICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuYm9keUhlYWRpbmd9PlxuICAgICAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLmJvZHlIZWFkaW5nVGV4dH0+V2FybmluZzwvVGV4dD5cbiAgICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuYm9keVRleHR9PlxuICAgICAgICAgICAgICB7WWVsbG93Qm94Q2F0ZWdvcnkucmVuZGVyKFxuICAgICAgICAgICAgICAgIHdhcm5pbmcubWVzc2FnZSxcbiAgICAgICAgICAgICAgICBzdHlsZXMuc3Vic3RpdHV0aW9uVGV4dCxcbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5ib2R5U2VjdGlvbn0+XG4gICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmJvZHlIZWFkaW5nfT5cbiAgICAgICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5ib2R5SGVhZGluZ1RleHR9PlN0YWNrPC9UZXh0PlxuICAgICAgICAgICAgICA8WWVsbG93Qm94SW5zcGVjdG9yU291cmNlTWFwU3RhdHVzXG4gICAgICAgICAgICAgICAgb25QcmVzcz17XG4gICAgICAgICAgICAgICAgICB3YXJuaW5nLnN5bWJvbGljYXRlZC5zdGF0dXMgPT09ICdGQUlMRUQnXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5faGFuZGxlUmV0cnlTeW1ib2xpY2F0aW9uXG4gICAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdGF0dXM9e3dhcm5pbmcuc3ltYm9saWNhdGVkLnN0YXR1c31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgICAgIHt3YXJuaW5nLmdldEF2YWlsYWJsZVN0YWNrKCkubWFwKChmcmFtZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgY29uc3Qge2ZpbGUsIGxpbmVOdW1iZXJ9ID0gZnJhbWU7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPFllbGxvd0JveEluc3BlY3RvclN0YWNrRnJhbWVcbiAgICAgICAgICAgICAgICAgIGtleT17aW5kZXh9XG4gICAgICAgICAgICAgICAgICBmcmFtZT17ZnJhbWV9XG4gICAgICAgICAgICAgICAgICBvblByZXNzPXtcbiAgICAgICAgICAgICAgICAgICAgd2FybmluZy5zeW1ib2xpY2F0ZWQuc3RhdHVzID09PSAnQ09NUExFVEUnICYmXG4gICAgICAgICAgICAgICAgICAgIGZpbGUgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyICE9IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICA/ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkZpbGVJbkVkaXRvcihmaWxlLCBsaW5lTnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC9WaWV3PlxuICAgICAgICA8L1Njcm9sbFZpZXc+XG4gICAgICAgIDxZZWxsb3dCb3hJbnNwZWN0b3JGb290ZXJcbiAgICAgICAgICBvbkRpc21pc3M9e3RoaXMucHJvcHMub25EaXNtaXNzfVxuICAgICAgICAgIG9uTWluaW1pemU9e3RoaXMucHJvcHMub25NaW5pbWl6ZX1cbiAgICAgICAgLz5cbiAgICAgIDwvVmlldz5cbiAgICApO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKTogdm9pZCB7XG4gICAgdGhpcy5faGFuZGxlU3ltYm9saWNhdGlvbigpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wczogUHJvcHMsIHByZXZTdGF0ZTogU3RhdGUpOiB2b2lkIHtcbiAgICBpZiAoXG4gICAgICBwcmV2UHJvcHMud2FybmluZ3MgIT09IHRoaXMucHJvcHMud2FybmluZ3MgfHxcbiAgICAgIHByZXZTdGF0ZS5zZWxlY3RlZEluZGV4ICE9PSB0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXhcbiAgICApIHtcbiAgICAgIHRoaXMuX2NhbmNlbFN5bWJvbGljYXRpb24oKTtcbiAgICAgIHRoaXMuX2hhbmRsZVN5bWJvbGljYXRpb24oKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpOiB2b2lkIHtcbiAgICB0aGlzLl9jYW5jZWxTeW1ib2xpY2F0aW9uKCk7XG4gIH1cblxuICBfaGFuZGxlUmV0cnlTeW1ib2xpY2F0aW9uID0gKCkgPT4ge1xuICAgIHRoaXMuX2NhbmNlbFN5bWJvbGljYXRpb24oKTtcbiAgICB0aGlzLmZvcmNlVXBkYXRlKCgpID0+IHtcbiAgICAgIGNvbnN0IHdhcm5pbmcgPSB0aGlzLnByb3BzLndhcm5pbmdzW3RoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleF07XG4gICAgICB0aGlzLl9zeW1ib2xpY2F0aW9uID0gd2FybmluZy5yZXRyeVN5bWJvbGljYXRlKCgpID0+IHtcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX2hhbmRsZVN5bWJvbGljYXRpb24oKTogdm9pZCB7XG4gICAgY29uc3Qgd2FybmluZyA9IHRoaXMucHJvcHMud2FybmluZ3NbdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4XTtcbiAgICBpZiAod2FybmluZy5zeW1ib2xpY2F0ZWQuc3RhdHVzICE9PSAnQ09NUExFVEUnKSB7XG4gICAgICB0aGlzLl9zeW1ib2xpY2F0aW9uID0gd2FybmluZy5zeW1ib2xpY2F0ZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIF9jYW5jZWxTeW1ib2xpY2F0aW9uKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9zeW1ib2xpY2F0aW9uICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3N5bWJvbGljYXRpb24uYWJvcnQoKTtcbiAgICAgIHRoaXMuX3N5bWJvbGljYXRpb24gPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVTZWxlY3RJbmRleCA9IChzZWxlY3RlZEluZGV4OiBudW1iZXIpOiB2b2lkID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHtzZWxlY3RlZEluZGV4fSk7XG4gIH07XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgcm9vdDoge1xuICAgIGVsZXZhdGlvbjogUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJyA/IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIDogdW5kZWZpbmVkLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICB9LFxuICBib2R5OiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBZZWxsb3dCb3hTdHlsZS5nZXRCYWNrZ3JvdW5kQ29sb3IoMC45NSksXG4gICAgYm9yZGVyQm90dG9tQ29sb3I6IFllbGxvd0JveFN0eWxlLmdldERpdmlkZXJDb2xvcigwLjk1KSxcbiAgICBib3JkZXJCb3R0b21XaWR0aDogU3R5bGVTaGVldC5oYWlybGluZVdpZHRoLFxuICAgIGJvcmRlclRvcENvbG9yOiBZZWxsb3dCb3hTdHlsZS5nZXREaXZpZGVyQ29sb3IoMC45NSksXG4gICAgYm9yZGVyVG9wV2lkdGg6IFN0eWxlU2hlZXQuaGFpcmxpbmVXaWR0aCxcbiAgICBmbGV4OiAxLFxuICB9LFxuICBib2R5Q29udGVudDoge1xuICAgIHBhZGRpbmdWZXJ0aWNhbDogMTIsXG4gIH0sXG4gIGJvZHlIZWFkaW5nOiB7XG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgbWFyZ2luQm90dG9tOiA2LFxuICAgIHBhZGRpbmdIb3Jpem9udGFsOiAxMixcbiAgfSxcbiAgYm9keUhlYWRpbmdUZXh0OiB7XG4gICAgY29sb3I6IFllbGxvd0JveFN0eWxlLmdldFRleHRDb2xvcigxKSxcbiAgICBmbGV4OiAxLFxuICAgIGZvbnRTaXplOiAyMCxcbiAgICBmb250V2VpZ2h0OiAnNjAwJyxcbiAgICBpbmNsdWRlRm9udFBhZGRpbmc6IGZhbHNlLFxuICAgIGxpbmVIZWlnaHQ6IDI4LFxuICB9LFxuICBib2R5VGV4dDoge1xuICAgIGNvbG9yOiBZZWxsb3dCb3hTdHlsZS5nZXRUZXh0Q29sb3IoMSksXG4gICAgZm9udFNpemU6IDE0LFxuICAgIGluY2x1ZGVGb250UGFkZGluZzogZmFsc2UsXG4gICAgbGluZUhlaWdodDogMTgsXG4gICAgcGFkZGluZ0hvcml6b250YWw6IDEyLFxuICB9LFxuICBzdWJzdGl0dXRpb25UZXh0OiB7XG4gICAgY29sb3I6IFllbGxvd0JveFN0eWxlLmdldFRleHRDb2xvcigwLjYpLFxuICB9LFxuICBib2R5U2VjdGlvbjoge1xuICAgIG1hcmdpblRvcDogMjAsXG4gIH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBZZWxsb3dCb3hJbnNwZWN0b3I7XG4iXX0=