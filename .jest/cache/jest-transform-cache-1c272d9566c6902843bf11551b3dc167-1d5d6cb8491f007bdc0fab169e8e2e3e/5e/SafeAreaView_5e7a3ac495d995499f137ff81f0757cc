36849f110325c412fc58fb146b6f7c8d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var Platform = require("../../Utilities/Platform");

var React = require('react');

var View = require("../View/View");

var exported;

if (Platform.OS === 'android') {
  var SafeAreaView = function SafeAreaView(props, forwardedRef) {
    var emulateUnlessSupported = props.emulateUnlessSupported,
        localProps = (0, _objectWithoutProperties2.default)(props, ["emulateUnlessSupported"]);
    return React.createElement(View, (0, _extends2.default)({}, localProps, {
      ref: forwardedRef
    }));
  };

  var SafeAreaViewRef = React.forwardRef(SafeAreaView);
  SafeAreaViewRef.displayName = 'SafeAreaView';
  exported = SafeAreaViewRef;
} else {
  var RCTSafeAreaViewNativeComponent = require("./RCTSafeAreaViewNativeComponent").default;

  var _SafeAreaView = function _SafeAreaView(props, forwardedRef) {
    return React.createElement(RCTSafeAreaViewNativeComponent, (0, _extends2.default)({
      emulateUnlessSupported: true
    }, props, {
      ref: forwardedRef
    }));
  };

  var _SafeAreaViewRef = React.forwardRef(_SafeAreaView);

  _SafeAreaViewRef.displayName = 'SafeAreaView';
  exported = _SafeAreaViewRef;
}

module.exports = exported;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNhZmVBcmVhVmlldy5qcyJdLCJuYW1lcyI6WyJQbGF0Zm9ybSIsInJlcXVpcmUiLCJSZWFjdCIsIlZpZXciLCJleHBvcnRlZCIsIk9TIiwiU2FmZUFyZWFWaWV3IiwicHJvcHMiLCJmb3J3YXJkZWRSZWYiLCJlbXVsYXRlVW5sZXNzU3VwcG9ydGVkIiwibG9jYWxQcm9wcyIsIlNhZmVBcmVhVmlld1JlZiIsImZvcndhcmRSZWYiLCJkaXNwbGF5TmFtZSIsIlJDVFNhZmVBcmVhVmlld05hdGl2ZUNvbXBvbmVudCIsImRlZmF1bHQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFVQSxJQUFNQSxRQUFRLEdBQUdDLE9BQU8sNEJBQXhCOztBQUNBLElBQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsSUFBTUUsSUFBSSxHQUFHRixPQUFPLGdCQUFwQjs7QUFVQSxJQUFJRyxRQUFKOztBQVdBLElBQUlKLFFBQVEsQ0FBQ0ssRUFBVCxLQUFnQixTQUFwQixFQUErQjtBQUM3QixNQUFNQyxZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUNuQkMsS0FEbUIsRUFFbkJDLFlBRm1CLEVBR2hCO0FBQUEsUUFDSUMsc0JBREosR0FDNkNGLEtBRDdDLENBQ0lFLHNCQURKO0FBQUEsUUFDK0JDLFVBRC9CLDBDQUM2Q0gsS0FEN0M7QUFFSCxXQUFPLG9CQUFDLElBQUQsNkJBQVVHLFVBQVY7QUFBc0IsTUFBQSxHQUFHLEVBQUVGO0FBQTNCLE9BQVA7QUFDRCxHQU5EOztBQVFBLE1BQU1HLGVBQWUsR0FBR1QsS0FBSyxDQUFDVSxVQUFOLENBQWlCTixZQUFqQixDQUF4QjtBQUNBSyxFQUFBQSxlQUFlLENBQUNFLFdBQWhCLEdBQThCLGNBQTlCO0FBQ0FULEVBQUFBLFFBQVEsR0FBS08sZUFBYjtBQUNELENBWkQsTUFZTztBQUNMLE1BQU1HLDhCQUE4QixHQUFHYixPQUFPLG9DQUFQLENBQ3BDYyxPQURIOztBQUdBLE1BQU1ULGFBQVksR0FBRyxTQUFmQSxhQUFlLENBQ25CQyxLQURtQixFQUVuQkMsWUFGbUIsRUFHaEI7QUFDSCxXQUNFLG9CQUFDLDhCQUFEO0FBQ0UsTUFBQSxzQkFBc0IsRUFBRTtBQUQxQixPQUVNRCxLQUZOO0FBR0UsTUFBQSxHQUFHLEVBQUVDO0FBSFAsT0FERjtBQU9ELEdBWEQ7O0FBYUEsTUFBTUcsZ0JBQWUsR0FBR1QsS0FBSyxDQUFDVSxVQUFOLENBQWlCTixhQUFqQixDQUF4Qjs7QUFDQUssRUFBQUEsZ0JBQWUsQ0FBQ0UsV0FBaEIsR0FBOEIsY0FBOUI7QUFDQVQsRUFBQUEsUUFBUSxHQUFLTyxnQkFBYjtBQUNEOztBQUVESyxNQUFNLENBQUNDLE9BQVAsR0FBaUJiLFFBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG5cbmNvbnN0IFBsYXRmb3JtID0gcmVxdWlyZSgnLi4vLi4vVXRpbGl0aWVzL1BsYXRmb3JtJyk7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBWaWV3ID0gcmVxdWlyZSgnLi4vVmlldy9WaWV3Jyk7XG5cbmltcG9ydCB0eXBlIHtOYXRpdmVDb21wb25lbnR9IGZyb20gJy4uLy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlJztcbmltcG9ydCB0eXBlIHtWaWV3UHJvcHN9IGZyb20gJy4uL1ZpZXcvVmlld1Byb3BUeXBlcyc7XG5cbnR5cGUgUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgLi4uVmlld1Byb3BzLFxuICBlbXVsYXRlVW5sZXNzU3VwcG9ydGVkPzogYm9vbGVhbixcbnx9PjtcblxubGV0IGV4cG9ydGVkOiBDbGFzczxSZWFjdCRDb21wb25lbnQ8UHJvcHM+PiB8IENsYXNzPE5hdGl2ZUNvbXBvbmVudDxQcm9wcz4+O1xuXG4vKipcbiAqIFJlbmRlcnMgbmVzdGVkIGNvbnRlbnQgYW5kIGF1dG9tYXRpY2FsbHkgYXBwbGllcyBwYWRkaW5ncyByZWZsZWN0IHRoZSBwb3J0aW9uXG4gKiBvZiB0aGUgdmlldyB0aGF0IGlzIG5vdCBjb3ZlcmVkIGJ5IG5hdmlnYXRpb24gYmFycywgdGFiIGJhcnMsIHRvb2xiYXJzLCBhbmRcbiAqIG90aGVyIGFuY2VzdG9yIHZpZXdzLlxuICpcbiAqIE1vcmVvdmVyLCBhbmQgbW9zdCBpbXBvcnRhbnRseSwgU2FmZSBBcmVhJ3MgcGFkZGluZ3MgcmVmbGVjdCBwaHlzaWNhbFxuICogbGltaXRhdGlvbiBvZiB0aGUgc2NyZWVuLCBzdWNoIGFzIHJvdW5kZWQgY29ybmVycyBvciBjYW1lcmEgbm90Y2hlcyAoYWthXG4gKiBzZW5zb3IgaG91c2luZyBhcmVhIG9uIGlQaG9uZSBYKS5cbiAqL1xuaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgY29uc3QgU2FmZUFyZWFWaWV3ID0gKFxuICAgIHByb3BzOiBQcm9wcyxcbiAgICBmb3J3YXJkZWRSZWY/OiA/UmVhY3QuUmVmPHR5cGVvZiBWaWV3PixcbiAgKSA9PiB7XG4gICAgY29uc3Qge2VtdWxhdGVVbmxlc3NTdXBwb3J0ZWQsIC4uLmxvY2FsUHJvcHN9ID0gcHJvcHM7XG4gICAgcmV0dXJuIDxWaWV3IHsuLi5sb2NhbFByb3BzfSByZWY9e2ZvcndhcmRlZFJlZn0gLz47XG4gIH07XG5cbiAgY29uc3QgU2FmZUFyZWFWaWV3UmVmID0gUmVhY3QuZm9yd2FyZFJlZihTYWZlQXJlYVZpZXcpO1xuICBTYWZlQXJlYVZpZXdSZWYuZGlzcGxheU5hbWUgPSAnU2FmZUFyZWFWaWV3JztcbiAgZXhwb3J0ZWQgPSAoKFNhZmVBcmVhVmlld1JlZjogYW55KTogQ2xhc3M8UmVhY3QuQ29tcG9uZW50PFByb3BzPj4pO1xufSBlbHNlIHtcbiAgY29uc3QgUkNUU2FmZUFyZWFWaWV3TmF0aXZlQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9SQ1RTYWZlQXJlYVZpZXdOYXRpdmVDb21wb25lbnQnKVxuICAgIC5kZWZhdWx0O1xuXG4gIGNvbnN0IFNhZmVBcmVhVmlldyA9IChcbiAgICBwcm9wczogUHJvcHMsXG4gICAgZm9yd2FyZGVkUmVmPzogP1JlYWN0LlJlZjx0eXBlb2YgUkNUU2FmZUFyZWFWaWV3TmF0aXZlQ29tcG9uZW50PixcbiAgKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSQ1RTYWZlQXJlYVZpZXdOYXRpdmVDb21wb25lbnRcbiAgICAgICAgZW11bGF0ZVVubGVzc1N1cHBvcnRlZD17dHJ1ZX1cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgICByZWY9e2ZvcndhcmRlZFJlZn1cbiAgICAgIC8+XG4gICAgKTtcbiAgfTtcblxuICBjb25zdCBTYWZlQXJlYVZpZXdSZWYgPSBSZWFjdC5mb3J3YXJkUmVmKFNhZmVBcmVhVmlldyk7XG4gIFNhZmVBcmVhVmlld1JlZi5kaXNwbGF5TmFtZSA9ICdTYWZlQXJlYVZpZXcnO1xuICBleHBvcnRlZCA9ICgoU2FmZUFyZWFWaWV3UmVmOiBhbnkpOiBDbGFzczxOYXRpdmVDb21wb25lbnQ8UHJvcHM+Pik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7XG4iXX0=