e2cd9f389180574b914008353509a237
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var Animated = require("../../Animated/src/Animated");

var Easing = require("../../Animated/src/Easing");

var React = require('react');

var StyleSheet = require("../../StyleSheet/StyleSheet");

var Text = require("../../Text/Text");

var YellowBoxImageSource = require("./YellowBoxImageSource");

var YellowBoxPressable = require("./YellowBoxPressable");

var YellowBoxStyle = require("./YellowBoxStyle");

var YellowBoxInspectorSourceMapStatus = function (_React$Component) {
  (0, _inherits2.default)(YellowBoxInspectorSourceMapStatus, _React$Component);

  var _super = _createSuper(YellowBoxInspectorSourceMapStatus);

  function YellowBoxInspectorSourceMapStatus() {
    var _this;

    (0, _classCallCheck2.default)(this, YellowBoxInspectorSourceMapStatus);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      animation: null,
      rotate: null
    };
    return _this;
  }

  (0, _createClass2.default)(YellowBoxInspectorSourceMapStatus, [{
    key: "render",
    value: function render() {
      var image;

      switch (this.props.status) {
        case 'COMPLETE':
          image = YellowBoxImageSource.check;
          break;

        case 'FAILED':
          image = YellowBoxImageSource.alertTriangle;
          break;

        case 'PENDING':
          image = YellowBoxImageSource.loader;
          break;
      }

      return image == null ? null : React.createElement(YellowBoxPressable, {
        backgroundColor: {
          default: YellowBoxStyle.getTextColor(0.8),
          pressed: YellowBoxStyle.getTextColor(0.6)
        },
        hitSlop: {
          bottom: 8,
          left: 8,
          right: 8,
          top: 8
        },
        onPress: this.props.onPress,
        style: StyleSheet.compose(styles.root, this.props.status === 'PENDING' ? styles.pending : null)
      }, React.createElement(Animated.Image, {
        source: {
          height: 16,
          uri: image,
          width: 16
        },
        style: StyleSheet.compose(styles.image, this.state.rotate == null ? null : {
          transform: [{
            rotate: this.state.rotate
          }]
        })
      }), React.createElement(Text, {
        style: styles.text
      }, "Source Map"));
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this._updateAnimation();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this._updateAnimation();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.state.animation != null) {
        this.state.animation.stop();
      }
    }
  }, {
    key: "_updateAnimation",
    value: function _updateAnimation() {
      if (this.props.status === 'PENDING') {
        if (this.state.animation == null) {
          var animated = new Animated.Value(0);
          var animation = Animated.loop(Animated.timing(animated, {
            duration: 2000,
            easing: Easing.linear,
            toValue: 1,
            useNativeDriver: true
          }));
          this.setState({
            animation: animation,
            rotate: animated.interpolate({
              inputRange: [0, 1],
              outputRange: ['0deg', '360deg']
            })
          }, function () {
            animation.start();
          });
        }
      } else {
        if (this.state.animation != null) {
          this.state.animation.stop();
          this.setState({
            animation: null,
            rotate: null
          });
        }
      }
    }
  }]);
  return YellowBoxInspectorSourceMapStatus;
}(React.Component);

var styles = StyleSheet.create({
  root: {
    alignItems: 'center',
    borderRadius: 12,
    flexDirection: 'row',
    height: 24,
    paddingHorizontal: 8
  },
  pending: {
    backgroundColor: YellowBoxStyle.getTextColor(0.6)
  },
  image: {
    marginEnd: 4,
    tintColor: YellowBoxStyle.getBackgroundColor(1)
  },
  text: {
    color: YellowBoxStyle.getBackgroundColor(1),
    fontSize: 12,
    includeFontPadding: false,
    lineHeight: 16
  }
});
module.exports = YellowBoxInspectorSourceMapStatus;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,