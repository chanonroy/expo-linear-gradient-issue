5fad0cc7e6eb0aab8f84b1e80a4665d5
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var Animation = require("./Animation");

var _require = require("../NativeAnimatedHelper"),
    shouldUseNativeDriver = _require.shouldUseNativeDriver;

var DecayAnimation = function (_Animation) {
  (0, _inherits2.default)(DecayAnimation, _Animation);

  var _super = _createSuper(DecayAnimation);

  function DecayAnimation(config) {
    var _config$deceleration, _config$isInteraction, _config$iterations;

    var _this;

    (0, _classCallCheck2.default)(this, DecayAnimation);
    _this = _super.call(this);
    _this._deceleration = (_config$deceleration = config.deceleration) != null ? _config$deceleration : 0.998;
    _this._velocity = config.velocity;
    _this._useNativeDriver = shouldUseNativeDriver(config);
    _this.__isInteraction = (_config$isInteraction = config.isInteraction) != null ? _config$isInteraction : !_this._useNativeDriver;
    _this.__iterations = (_config$iterations = config.iterations) != null ? _config$iterations : 1;
    return _this;
  }

  (0, _createClass2.default)(DecayAnimation, [{
    key: "__getNativeAnimationConfig",
    value: function __getNativeAnimationConfig() {
      return {
        type: 'decay',
        deceleration: this._deceleration,
        velocity: this._velocity,
        iterations: this.__iterations
      };
    }
  }, {
    key: "start",
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
      this.__active = true;
      this._lastValue = fromValue;
      this._fromValue = fromValue;
      this._onUpdate = onUpdate;
      this.__onEnd = onEnd;
      this._startTime = Date.now();

      if (this._useNativeDriver) {
        this.__startNativeAnimation(animatedValue);
      } else {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: "onUpdate",
    value: function onUpdate() {
      var now = Date.now();
      var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));

      this._onUpdate(value);

      if (Math.abs(this._lastValue - value) < 0.1) {
        this.__debouncedOnEnd({
          finished: true
        });

        return;
      }

      this._lastValue = value;

      if (this.__active) {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      (0, _get2.default)((0, _getPrototypeOf2.default)(DecayAnimation.prototype), "stop", this).call(this);
      this.__active = false;
      global.cancelAnimationFrame(this._animationFrame);

      this.__debouncedOnEnd({
        finished: false
      });
    }
  }]);
  return DecayAnimation;
}(Animation);

module.exports = DecayAnimation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRlY2F5QW5pbWF0aW9uLmpzIl0sIm5hbWVzIjpbIkFuaW1hdGlvbiIsInJlcXVpcmUiLCJzaG91bGRVc2VOYXRpdmVEcml2ZXIiLCJEZWNheUFuaW1hdGlvbiIsImNvbmZpZyIsIl9kZWNlbGVyYXRpb24iLCJkZWNlbGVyYXRpb24iLCJfdmVsb2NpdHkiLCJ2ZWxvY2l0eSIsIl91c2VOYXRpdmVEcml2ZXIiLCJfX2lzSW50ZXJhY3Rpb24iLCJpc0ludGVyYWN0aW9uIiwiX19pdGVyYXRpb25zIiwiaXRlcmF0aW9ucyIsInR5cGUiLCJmcm9tVmFsdWUiLCJvblVwZGF0ZSIsIm9uRW5kIiwicHJldmlvdXNBbmltYXRpb24iLCJhbmltYXRlZFZhbHVlIiwiX19hY3RpdmUiLCJfbGFzdFZhbHVlIiwiX2Zyb21WYWx1ZSIsIl9vblVwZGF0ZSIsIl9fb25FbmQiLCJfc3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsIl9fc3RhcnROYXRpdmVBbmltYXRpb24iLCJfYW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJiaW5kIiwidmFsdWUiLCJNYXRoIiwiZXhwIiwiYWJzIiwiX19kZWJvdW5jZWRPbkVuZCIsImZpbmlzaGVkIiwiZ2xvYmFsIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFTQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxTQUFTLEdBQUdDLE9BQU8sZUFBekI7O2VBRWdDQSxPQUFPLDJCO0lBQWhDQyxxQixZQUFBQSxxQjs7SUFlREMsYzs7Ozs7QUFVSiwwQkFBWUMsTUFBWixFQUFnRDtBQUFBOztBQUFBOztBQUFBO0FBQzlDO0FBQ0EsVUFBS0MsYUFBTCwyQkFBcUJELE1BQU0sQ0FBQ0UsWUFBNUIsbUNBQTRDLEtBQTVDO0FBQ0EsVUFBS0MsU0FBTCxHQUFpQkgsTUFBTSxDQUFDSSxRQUF4QjtBQUNBLFVBQUtDLGdCQUFMLEdBQXdCUCxxQkFBcUIsQ0FBQ0UsTUFBRCxDQUE3QztBQUNBLFVBQUtNLGVBQUwsNEJBQXVCTixNQUFNLENBQUNPLGFBQTlCLG9DQUErQyxDQUFDLE1BQUtGLGdCQUFyRDtBQUNBLFVBQUtHLFlBQUwseUJBQW9CUixNQUFNLENBQUNTLFVBQTNCLGlDQUF5QyxDQUF6QztBQU44QztBQU8vQzs7OztpREFPRztBQUNGLGFBQU87QUFDTEMsUUFBQUEsSUFBSSxFQUFFLE9BREQ7QUFFTFIsUUFBQUEsWUFBWSxFQUFFLEtBQUtELGFBRmQ7QUFHTEcsUUFBQUEsUUFBUSxFQUFFLEtBQUtELFNBSFY7QUFJTE0sUUFBQUEsVUFBVSxFQUFFLEtBQUtEO0FBSlosT0FBUDtBQU1EOzs7MEJBR0NHLFMsRUFDQUMsUSxFQUNBQyxLLEVBQ0FDLGlCLEVBQ0FDLGEsRUFDTTtBQUNOLFdBQUtDLFFBQUwsR0FBZ0IsSUFBaEI7QUFDQSxXQUFLQyxVQUFMLEdBQWtCTixTQUFsQjtBQUNBLFdBQUtPLFVBQUwsR0FBa0JQLFNBQWxCO0FBQ0EsV0FBS1EsU0FBTCxHQUFpQlAsUUFBakI7QUFDQSxXQUFLUSxPQUFMLEdBQWVQLEtBQWY7QUFDQSxXQUFLUSxVQUFMLEdBQWtCQyxJQUFJLENBQUNDLEdBQUwsRUFBbEI7O0FBQ0EsVUFBSSxLQUFLbEIsZ0JBQVQsRUFBMkI7QUFDekIsYUFBS21CLHNCQUFMLENBQTRCVCxhQUE1QjtBQUNELE9BRkQsTUFFTztBQUNMLGFBQUtVLGVBQUwsR0FBdUJDLHFCQUFxQixDQUFDLEtBQUtkLFFBQUwsQ0FBY2UsSUFBZCxDQUFtQixJQUFuQixDQUFELENBQTVDO0FBQ0Q7QUFDRjs7OytCQUVnQjtBQUNmLFVBQU1KLEdBQUcsR0FBR0QsSUFBSSxDQUFDQyxHQUFMLEVBQVo7QUFFQSxVQUFNSyxLQUFLLEdBQ1QsS0FBS1YsVUFBTCxHQUNDLEtBQUtmLFNBQUwsSUFBa0IsSUFBSSxLQUFLRixhQUEzQixDQUFELElBQ0csSUFBSTRCLElBQUksQ0FBQ0MsR0FBTCxDQUFTLEVBQUUsSUFBSSxLQUFLN0IsYUFBWCxLQUE2QnNCLEdBQUcsR0FBRyxLQUFLRixVQUF4QyxDQUFULENBRFAsQ0FGRjs7QUFLQSxXQUFLRixTQUFMLENBQWVTLEtBQWY7O0FBRUEsVUFBSUMsSUFBSSxDQUFDRSxHQUFMLENBQVMsS0FBS2QsVUFBTCxHQUFrQlcsS0FBM0IsSUFBb0MsR0FBeEMsRUFBNkM7QUFDM0MsYUFBS0ksZ0JBQUwsQ0FBc0I7QUFBQ0MsVUFBQUEsUUFBUSxFQUFFO0FBQVgsU0FBdEI7O0FBQ0E7QUFDRDs7QUFFRCxXQUFLaEIsVUFBTCxHQUFrQlcsS0FBbEI7O0FBQ0EsVUFBSSxLQUFLWixRQUFULEVBQW1CO0FBQ2pCLGFBQUtTLGVBQUwsR0FBdUJDLHFCQUFxQixDQUFDLEtBQUtkLFFBQUwsQ0FBY2UsSUFBZCxDQUFtQixJQUFuQixDQUFELENBQTVDO0FBQ0Q7QUFDRjs7OzJCQUVZO0FBQ1g7QUFDQSxXQUFLWCxRQUFMLEdBQWdCLEtBQWhCO0FBQ0FrQixNQUFBQSxNQUFNLENBQUNDLG9CQUFQLENBQTRCLEtBQUtWLGVBQWpDOztBQUNBLFdBQUtPLGdCQUFMLENBQXNCO0FBQUNDLFFBQUFBLFFBQVEsRUFBRTtBQUFYLE9BQXRCO0FBQ0Q7OztFQS9FMEJyQyxTOztBQWtGN0J3QyxNQUFNLENBQUNDLE9BQVAsR0FBaUJ0QyxjQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBbmltYXRpb24gPSByZXF1aXJlKCcuL0FuaW1hdGlvbicpO1xuXG5jb25zdCB7c2hvdWxkVXNlTmF0aXZlRHJpdmVyfSA9IHJlcXVpcmUoJy4uL05hdGl2ZUFuaW1hdGVkSGVscGVyJyk7XG5cbmltcG9ydCB0eXBlIEFuaW1hdGVkVmFsdWUgZnJvbSAnLi4vbm9kZXMvQW5pbWF0ZWRWYWx1ZSc7XG5pbXBvcnQgdHlwZSB7QW5pbWF0aW9uQ29uZmlnLCBFbmRDYWxsYmFja30gZnJvbSAnLi9BbmltYXRpb24nO1xuXG5leHBvcnQgdHlwZSBEZWNheUFuaW1hdGlvbkNvbmZpZyA9IEFuaW1hdGlvbkNvbmZpZyAmIHtcbiAgdmVsb2NpdHk6IG51bWJlciB8IHt4OiBudW1iZXIsIHk6IG51bWJlcn0sXG4gIGRlY2VsZXJhdGlvbj86IG51bWJlcixcbn07XG5cbmV4cG9ydCB0eXBlIERlY2F5QW5pbWF0aW9uQ29uZmlnU2luZ2xlID0gQW5pbWF0aW9uQ29uZmlnICYge1xuICB2ZWxvY2l0eTogbnVtYmVyLFxuICBkZWNlbGVyYXRpb24/OiBudW1iZXIsXG59O1xuXG5jbGFzcyBEZWNheUFuaW1hdGlvbiBleHRlbmRzIEFuaW1hdGlvbiB7XG4gIF9zdGFydFRpbWU6IG51bWJlcjtcbiAgX2xhc3RWYWx1ZTogbnVtYmVyO1xuICBfZnJvbVZhbHVlOiBudW1iZXI7XG4gIF9kZWNlbGVyYXRpb246IG51bWJlcjtcbiAgX3ZlbG9jaXR5OiBudW1iZXI7XG4gIF9vblVwZGF0ZTogKHZhbHVlOiBudW1iZXIpID0+IHZvaWQ7XG4gIF9hbmltYXRpb25GcmFtZTogYW55O1xuICBfdXNlTmF0aXZlRHJpdmVyOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogRGVjYXlBbmltYXRpb25Db25maWdTaW5nbGUpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2RlY2VsZXJhdGlvbiA9IGNvbmZpZy5kZWNlbGVyYXRpb24gPz8gMC45OTg7XG4gICAgdGhpcy5fdmVsb2NpdHkgPSBjb25maWcudmVsb2NpdHk7XG4gICAgdGhpcy5fdXNlTmF0aXZlRHJpdmVyID0gc2hvdWxkVXNlTmF0aXZlRHJpdmVyKGNvbmZpZyk7XG4gICAgdGhpcy5fX2lzSW50ZXJhY3Rpb24gPSBjb25maWcuaXNJbnRlcmFjdGlvbiA/PyAhdGhpcy5fdXNlTmF0aXZlRHJpdmVyO1xuICAgIHRoaXMuX19pdGVyYXRpb25zID0gY29uZmlnLml0ZXJhdGlvbnMgPz8gMTtcbiAgfVxuXG4gIF9fZ2V0TmF0aXZlQW5pbWF0aW9uQ29uZmlnKCk6ICRURU1QT1JBUlkkb2JqZWN0PHt8XG4gICAgZGVjZWxlcmF0aW9uOiBudW1iZXIsXG4gICAgaXRlcmF0aW9uczogbnVtYmVyLFxuICAgIHR5cGU6ICRURU1QT1JBUlkkc3RyaW5nPCdkZWNheSc+LFxuICAgIHZlbG9jaXR5OiBudW1iZXIsXG4gIHx9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdkZWNheScsXG4gICAgICBkZWNlbGVyYXRpb246IHRoaXMuX2RlY2VsZXJhdGlvbixcbiAgICAgIHZlbG9jaXR5OiB0aGlzLl92ZWxvY2l0eSxcbiAgICAgIGl0ZXJhdGlvbnM6IHRoaXMuX19pdGVyYXRpb25zLFxuICAgIH07XG4gIH1cblxuICBzdGFydChcbiAgICBmcm9tVmFsdWU6IG51bWJlcixcbiAgICBvblVwZGF0ZTogKHZhbHVlOiBudW1iZXIpID0+IHZvaWQsXG4gICAgb25FbmQ6ID9FbmRDYWxsYmFjayxcbiAgICBwcmV2aW91c0FuaW1hdGlvbjogP0FuaW1hdGlvbixcbiAgICBhbmltYXRlZFZhbHVlOiBBbmltYXRlZFZhbHVlLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLl9fYWN0aXZlID0gdHJ1ZTtcbiAgICB0aGlzLl9sYXN0VmFsdWUgPSBmcm9tVmFsdWU7XG4gICAgdGhpcy5fZnJvbVZhbHVlID0gZnJvbVZhbHVlO1xuICAgIHRoaXMuX29uVXBkYXRlID0gb25VcGRhdGU7XG4gICAgdGhpcy5fX29uRW5kID0gb25FbmQ7XG4gICAgdGhpcy5fc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICBpZiAodGhpcy5fdXNlTmF0aXZlRHJpdmVyKSB7XG4gICAgICB0aGlzLl9fc3RhcnROYXRpdmVBbmltYXRpb24oYW5pbWF0ZWRWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2FuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMub25VcGRhdGUuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgb25VcGRhdGUoKTogdm9pZCB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGNvbnN0IHZhbHVlID1cbiAgICAgIHRoaXMuX2Zyb21WYWx1ZSArXG4gICAgICAodGhpcy5fdmVsb2NpdHkgLyAoMSAtIHRoaXMuX2RlY2VsZXJhdGlvbikpICpcbiAgICAgICAgKDEgLSBNYXRoLmV4cCgtKDEgLSB0aGlzLl9kZWNlbGVyYXRpb24pICogKG5vdyAtIHRoaXMuX3N0YXJ0VGltZSkpKTtcblxuICAgIHRoaXMuX29uVXBkYXRlKHZhbHVlKTtcblxuICAgIGlmIChNYXRoLmFicyh0aGlzLl9sYXN0VmFsdWUgLSB2YWx1ZSkgPCAwLjEpIHtcbiAgICAgIHRoaXMuX19kZWJvdW5jZWRPbkVuZCh7ZmluaXNoZWQ6IHRydWV9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9sYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICBpZiAodGhpcy5fX2FjdGl2ZSkge1xuICAgICAgdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5vblVwZGF0ZS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH1cblxuICBzdG9wKCk6IHZvaWQge1xuICAgIHN1cGVyLnN0b3AoKTtcbiAgICB0aGlzLl9fYWN0aXZlID0gZmFsc2U7XG4gICAgZ2xvYmFsLmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX2FuaW1hdGlvbkZyYW1lKTtcbiAgICB0aGlzLl9fZGVib3VuY2VkT25FbmQoe2ZpbmlzaGVkOiBmYWxzZX0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGVjYXlBbmltYXRpb247XG4iXX0=