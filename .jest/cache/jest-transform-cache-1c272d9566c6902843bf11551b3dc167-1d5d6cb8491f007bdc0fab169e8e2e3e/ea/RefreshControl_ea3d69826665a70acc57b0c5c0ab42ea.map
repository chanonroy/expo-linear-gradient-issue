{"version":3,"sources":["RefreshControl.js"],"names":["Platform","require","React","nullthrows","RefreshLayoutConsts","OS","AndroidSwipeRefreshLayout","getViewManagerConfig","Constants","SIZE","RefreshControl","_lastNativeRefreshing","_onRefresh","props","onRefresh","forceUpdate","refreshing","prevProps","_setNativePropsOnRef","setRef","ref","setNativeProps","bind","enabled","colors","progressBackgroundColor","size","progressViewOffset","tintColor","titleColor","title","Component","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;AASA;;AACA;;;;;;AARA,IAAMA,QAAQ,GAAGC,OAAO,4BAAxB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AAOA,IAAIG,mBAAJ;;AACA,IAAIJ,QAAQ,CAACK,EAAT,KAAgB,SAApB,EAA+B;AAC7B,MAAMC,yBAAyB,GAAGL,OAAO,+BAAP,CAAuCM,oBAAvC,CAChC,2BADgC,CAAlC;;AAGAH,EAAAA,mBAAmB,GAAGE,yBAAyB,GAC3CA,yBAAyB,CAACE,SADiB,GAE3C;AAACC,IAAAA,IAAI,EAAE;AAAP,GAFJ;AAGD,CAPD,MAOO;AACLL,EAAAA,mBAAmB,GAAG;AAACK,IAAAA,IAAI,EAAE;AAAP,GAAtB;AACD;;IAwGKC,c;;;;;;;;;;;;;;;UAIJC,qB,GAAwB,K;;UAsDxBC,U,GAAa,YAAM;AACjB,YAAKD,qBAAL,GAA6B,IAA7B;AAEA,YAAKE,KAAL,CAAWC,SAAX,IAAwB,MAAKD,KAAL,CAAWC,SAAX,EAAxB;;AAIA,YAAKC,WAAL;AACD,K;;;;;;;wCA5DmB;AAClB,WAAKJ,qBAAL,GAA6B,KAAKE,KAAL,CAAWG,UAAxC;AACD;;;uCAEkBC,S,EAAgC;AAIjD,UAAI,KAAKJ,KAAL,CAAWG,UAAX,KAA0BC,SAAS,CAACD,UAAxC,EAAoD;AAClD,aAAKL,qBAAL,GAA6B,KAAKE,KAAL,CAAWG,UAAxC;AACD,OAFD,MAEO,IACL,KAAKH,KAAL,CAAWG,UAAX,KAA0B,KAAKL,qBAA/B,IACA,KAAKO,oBAFA,EAGL;AACA,aAAKA,oBAAL,CAA0B;AACxBF,UAAAA,UAAU,EAAE,KAAKH,KAAL,CAAWG;AADC,SAA1B;;AAGA,aAAKL,qBAAL,GAA6B,KAAKE,KAAL,CAAWG,UAAxC;AACD;AACF;;;6BAEoB;AAAA;;AACnB,UAAMG,MAAM,GAAG,SAATA,MAAS,CAAAC,GAAG;AAAA,eACf,MAAI,CAACF,oBAAL,GAA4BE,GAAG,GAAGA,GAAG,CAACC,cAAJ,CAAmBC,IAAnB,CAAwBF,GAAxB,CAAH,GAAkC,IADlD;AAAA,OAAlB;;AAEA,UAAIpB,QAAQ,CAACK,EAAT,KAAgB,KAApB,EAA2B;AAAA,0BAQrB,KAAKQ,KARgB;AAAA,YAEvBU,OAFuB,eAEvBA,OAFuB;AAAA,YAGvBC,MAHuB,eAGvBA,MAHuB;AAAA,YAIvBC,uBAJuB,eAIvBA,uBAJuB;AAAA,YAKvBC,IALuB,eAKvBA,IALuB;AAAA,YAMvBC,kBANuB,eAMvBA,kBANuB;AAAA,YAOpBd,KAPoB;AASzB,eACE,oBAAC,yCAAD,6BACMA,KADN;AAEE,UAAA,GAAG,EAAEM,MAFP;AAGE,UAAA,SAAS,EAAE,KAAKP;AAHlB,WADF;AAOD,OAhBD,MAgBO;AAAA,2BAC4C,KAAKC,KADjD;AAAA,YACEe,SADF,gBACEA,SADF;AAAA,YACaC,UADb,gBACaA,UADb;AAAA,YACyBC,KADzB,gBACyBA,KADzB;AAAA,YACmCjB,MADnC;;AAEL,eACE,oBAAC,iDAAD,6BACMA,MADN;AAEE,UAAA,GAAG,EAAEM,MAFP;AAGE,UAAA,SAAS,EAAE,KAAKP;AAHlB,WADF;AAOD;AACF;;;EAxD0BV,KAAK,CAAC6B,S;;AAA7BrB,c,CACGD,I,GAAYL,mBAAmB,CAACK,I;AAoEzCuB,MAAM,CAACC,OAAP,GAAiBvB,cAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\n\nconst nullthrows = require('nullthrows');\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport AndroidSwipeRefreshLayoutNativeComponent from './AndroidSwipeRefreshLayoutNativeComponent';\nimport PullToRefreshViewNativeComponent from './PullToRefreshViewNativeComponent';\n\nlet RefreshLayoutConsts: any;\nif (Platform.OS === 'android') {\n  const AndroidSwipeRefreshLayout = require('../../ReactNative/UIManager').getViewManagerConfig(\n    'AndroidSwipeRefreshLayout',\n  );\n  RefreshLayoutConsts = AndroidSwipeRefreshLayout\n    ? AndroidSwipeRefreshLayout.Constants\n    : {SIZE: {}};\n} else {\n  RefreshLayoutConsts = {SIZE: {}};\n}\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * The color of the refresh indicator.\n   */\n  tintColor?: ?ColorValue,\n  /**\n   * Title color.\n   */\n  titleColor?: ?ColorValue,\n  /**\n   * The title displayed under the refresh indicator.\n   */\n  title?: ?string,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * Whether the pull to refresh functionality is enabled.\n   */\n  enabled?: ?boolean,\n  /**\n   * The colors (at least one) that will be used to draw the refresh indicator.\n   */\n  colors?: ?$ReadOnlyArray<ColorValue>,\n  /**\n   * The background color of the refresh indicator.\n   */\n  progressBackgroundColor?: ?ColorValue,\n  /**\n   * Size of the refresh indicator, see RefreshControl.SIZE.\n   */\n  size?: ?(\n    | typeof RefreshLayoutConsts.SIZE.DEFAULT\n    | typeof RefreshLayoutConsts.SIZE.LARGE\n  ),\n  /**\n   * Progress view top offset\n   */\n  progressViewOffset?: ?number,\n|}>;\n\nexport type RefreshControlProps = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n  ...AndroidProps,\n\n  /**\n   * Called when the view starts refreshing.\n   */\n  onRefresh?: ?() => void,\n\n  /**\n   * Whether the view should be indicating an active refresh.\n   */\n  refreshing: boolean,\n|}>;\n\n/**\n * This component is used inside a ScrollView or ListView to add pull to refresh\n * functionality. When the ScrollView is at `scrollY: 0`, swiping down\n * triggers an `onRefresh` event.\n *\n * ### Usage example\n *\n * ``` js\n * class RefreshableList extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       refreshing: false,\n *     };\n *   }\n *\n *   _onRefresh() {\n *     this.setState({refreshing: true});\n *     fetchData().then(() => {\n *       this.setState({refreshing: false});\n *     });\n *   }\n *\n *   render() {\n *     return (\n *       <ListView\n *         refreshControl={\n *           <RefreshControl\n *             refreshing={this.state.refreshing}\n *             onRefresh={this._onRefresh.bind(this)}\n *           />\n *         }\n *         ...\n *       >\n *       ...\n *       </ListView>\n *     );\n *   }\n *   ...\n * }\n * ```\n *\n * __Note:__ `refreshing` is a controlled prop, this is why it needs to be set to true\n * in the `onRefresh` function otherwise the refresh indicator will stop immediately.\n */\nclass RefreshControl extends React.Component<RefreshControlProps> {\n  static SIZE: any = RefreshLayoutConsts.SIZE;\n\n  _setNativePropsOnRef: ?({refreshing: boolean}) => void;\n  _lastNativeRefreshing = false;\n\n  componentDidMount() {\n    this._lastNativeRefreshing = this.props.refreshing;\n  }\n\n  componentDidUpdate(prevProps: RefreshControlProps) {\n    // RefreshControl is a controlled component so if the native refreshing\n    // value doesn't match the current js refreshing prop update it to\n    // the js value.\n    if (this.props.refreshing !== prevProps.refreshing) {\n      this._lastNativeRefreshing = this.props.refreshing;\n    } else if (\n      this.props.refreshing !== this._lastNativeRefreshing &&\n      this._setNativePropsOnRef\n    ) {\n      this._setNativePropsOnRef({\n        refreshing: this.props.refreshing,\n      });\n      this._lastNativeRefreshing = this.props.refreshing;\n    }\n  }\n\n  render(): React.Node {\n    const setRef = ref =>\n      (this._setNativePropsOnRef = ref ? ref.setNativeProps.bind(ref) : null);\n    if (Platform.OS === 'ios') {\n      const {\n        enabled,\n        colors,\n        progressBackgroundColor,\n        size,\n        progressViewOffset,\n        ...props\n      } = this.props;\n      return (\n        <PullToRefreshViewNativeComponent\n          {...props}\n          ref={setRef}\n          onRefresh={this._onRefresh}\n        />\n      );\n    } else {\n      const {tintColor, titleColor, title, ...props} = this.props;\n      return (\n        <AndroidSwipeRefreshLayoutNativeComponent\n          {...props}\n          ref={setRef}\n          onRefresh={this._onRefresh}\n        />\n      );\n    }\n  }\n\n  _onRefresh = () => {\n    this._lastNativeRefreshing = true;\n\n    this.props.onRefresh && this.props.onRefresh();\n\n    // The native component will start refreshing so force an update to\n    // make sure it stays in sync with the js component.\n    this.forceUpdate();\n  };\n}\n\nmodule.exports = RefreshControl;\n"]}