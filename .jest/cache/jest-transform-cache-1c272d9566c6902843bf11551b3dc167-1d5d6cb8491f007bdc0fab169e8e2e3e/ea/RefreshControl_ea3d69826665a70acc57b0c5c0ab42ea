a041de726af3a5fc7e5c05be2df0fd4d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _AndroidSwipeRefreshLayoutNativeComponent = _interopRequireDefault(require("./AndroidSwipeRefreshLayoutNativeComponent"));

var _PullToRefreshViewNativeComponent = _interopRequireDefault(require("./PullToRefreshViewNativeComponent"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var Platform = require("../../Utilities/Platform");

var React = require('react');

var nullthrows = require('nullthrows');

var RefreshLayoutConsts;

if (Platform.OS === 'android') {
  var AndroidSwipeRefreshLayout = require("../../ReactNative/UIManager").getViewManagerConfig('AndroidSwipeRefreshLayout');

  RefreshLayoutConsts = AndroidSwipeRefreshLayout ? AndroidSwipeRefreshLayout.Constants : {
    SIZE: {}
  };
} else {
  RefreshLayoutConsts = {
    SIZE: {}
  };
}

var RefreshControl = function (_React$Component) {
  (0, _inherits2.default)(RefreshControl, _React$Component);

  var _super = _createSuper(RefreshControl);

  function RefreshControl() {
    var _this;

    (0, _classCallCheck2.default)(this, RefreshControl);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._lastNativeRefreshing = false;

    _this._onRefresh = function () {
      _this._lastNativeRefreshing = true;
      _this.props.onRefresh && _this.props.onRefresh();

      _this.forceUpdate();
    };

    return _this;
  }

  (0, _createClass2.default)(RefreshControl, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this._lastNativeRefreshing = this.props.refreshing;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.refreshing !== prevProps.refreshing) {
        this._lastNativeRefreshing = this.props.refreshing;
      } else if (this.props.refreshing !== this._lastNativeRefreshing && this._setNativePropsOnRef) {
        this._setNativePropsOnRef({
          refreshing: this.props.refreshing
        });

        this._lastNativeRefreshing = this.props.refreshing;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var setRef = function setRef(ref) {
        return _this2._setNativePropsOnRef = ref ? ref.setNativeProps.bind(ref) : null;
      };

      if (Platform.OS === 'ios') {
        var _this$props = this.props,
            enabled = _this$props.enabled,
            colors = _this$props.colors,
            progressBackgroundColor = _this$props.progressBackgroundColor,
            size = _this$props.size,
            progressViewOffset = _this$props.progressViewOffset,
            props = (0, _objectWithoutProperties2.default)(_this$props, ["enabled", "colors", "progressBackgroundColor", "size", "progressViewOffset"]);
        return React.createElement(_PullToRefreshViewNativeComponent.default, (0, _extends2.default)({}, props, {
          ref: setRef,
          onRefresh: this._onRefresh
        }));
      } else {
        var _this$props2 = this.props,
            tintColor = _this$props2.tintColor,
            titleColor = _this$props2.titleColor,
            title = _this$props2.title,
            _props = (0, _objectWithoutProperties2.default)(_this$props2, ["tintColor", "titleColor", "title"]);

        return React.createElement(_AndroidSwipeRefreshLayoutNativeComponent.default, (0, _extends2.default)({}, _props, {
          ref: setRef,
          onRefresh: this._onRefresh
        }));
      }
    }
  }]);
  return RefreshControl;
}(React.Component);

RefreshControl.SIZE = RefreshLayoutConsts.SIZE;
module.exports = RefreshControl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,