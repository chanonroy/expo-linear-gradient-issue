d0edff41a6d4fb4fc9f65e533edf6564
'use strict';

var React = require('react');

var StyleSheet = require("../../StyleSheet/StyleSheet");

var Text = require("../../Text/Text");

var YellowBoxPressable = require("./YellowBoxPressable");

var YellowBoxStyle = require("./YellowBoxStyle");

var YellowBoxInspectorStackFrame = function YellowBoxInspectorStackFrame(props) {
  var frame = props.frame,
      onPress = props.onPress;
  return React.createElement(YellowBoxPressable, {
    backgroundColor: {
      default: YellowBoxStyle.getBackgroundColor(0),
      pressed: YellowBoxStyle.getHighlightColor(1)
    },
    onPress: onPress,
    style: styles.frame
  }, React.createElement(Text, {
    style: styles.frameName
  }, frame.methodName), React.createElement(Text, {
    ellipsizeMode: "middle",
    numberOfLines: 1,
    style: styles.frameLocation
  }, formatFrameLocation(frame)));
};

var formatFrameLocation = function formatFrameLocation(frame) {
  var file = frame.file,
      lineNumber = frame.lineNumber,
      column = frame.column;

  if (file == null) {
    return '<unknown>';
  }

  var queryIndex = file.indexOf('?');
  var query = queryIndex < 0 ? '' : file.substr(queryIndex);
  var path = queryIndex < 0 ? file : file.substr(0, queryIndex);
  var location = path.substr(path.lastIndexOf('/') + 1) + query;

  if (lineNumber == null) {
    return location;
  }

  location = location + ':' + lineNumber;

  if (column == null) {
    return location;
  }

  return location + ':' + column;
};

var styles = StyleSheet.create({
  frame: {
    paddingHorizontal: 12,
    paddingVertical: 4
  },
  frameName: {
    color: YellowBoxStyle.getTextColor(1),
    fontSize: 14,
    includeFontPadding: false,
    lineHeight: 18
  },
  frameLocation: {
    color: YellowBoxStyle.getTextColor(0.7),
    fontSize: 12,
    fontWeight: '300',
    includeFontPadding: false,
    lineHeight: 16
  }
});
module.exports = YellowBoxInspectorStackFrame;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlllbGxvd0JveEluc3BlY3RvclN0YWNrRnJhbWUuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwiU3R5bGVTaGVldCIsIlRleHQiLCJZZWxsb3dCb3hQcmVzc2FibGUiLCJZZWxsb3dCb3hTdHlsZSIsIlllbGxvd0JveEluc3BlY3RvclN0YWNrRnJhbWUiLCJwcm9wcyIsImZyYW1lIiwib25QcmVzcyIsImRlZmF1bHQiLCJnZXRCYWNrZ3JvdW5kQ29sb3IiLCJwcmVzc2VkIiwiZ2V0SGlnaGxpZ2h0Q29sb3IiLCJzdHlsZXMiLCJmcmFtZU5hbWUiLCJtZXRob2ROYW1lIiwiZnJhbWVMb2NhdGlvbiIsImZvcm1hdEZyYW1lTG9jYXRpb24iLCJmaWxlIiwibGluZU51bWJlciIsImNvbHVtbiIsInF1ZXJ5SW5kZXgiLCJpbmRleE9mIiwicXVlcnkiLCJzdWJzdHIiLCJwYXRoIiwibG9jYXRpb24iLCJsYXN0SW5kZXhPZiIsImNyZWF0ZSIsInBhZGRpbmdIb3Jpem9udGFsIiwicGFkZGluZ1ZlcnRpY2FsIiwiY29sb3IiLCJnZXRUZXh0Q29sb3IiLCJmb250U2l6ZSIsImluY2x1ZGVGb250UGFkZGluZyIsImxpbmVIZWlnaHQiLCJmb250V2VpZ2h0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7O0FBRUEsSUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxJQUFNQyxVQUFVLEdBQUdELE9BQU8sK0JBQTFCOztBQUNBLElBQU1FLElBQUksR0FBR0YsT0FBTyxtQkFBcEI7O0FBQ0EsSUFBTUcsa0JBQWtCLEdBQUdILE9BQU8sd0JBQWxDOztBQUNBLElBQU1JLGNBQWMsR0FBR0osT0FBTyxvQkFBOUI7O0FBVUEsSUFBTUssNEJBQTRCLEdBQUcsU0FBL0JBLDRCQUErQixDQUFDQyxLQUFELEVBQThCO0FBQUEsTUFDMURDLEtBRDBELEdBQ3hDRCxLQUR3QyxDQUMxREMsS0FEMEQ7QUFBQSxNQUNuREMsT0FE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QUFsQixDQUFmO0FBb0JBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUJqQyw0QkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgU3R5bGVTaGVldCA9IHJlcXVpcmUoJy4uLy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCcpO1xuY29uc3QgVGV4dCA9IHJlcXVpcmUoJy4uLy4uL1RleHQvVGV4dCcpO1xuY29uc3QgWWVsbG93Qm94UHJlc3NhYmxlID0gcmVxdWlyZSgnLi9ZZWxsb3dCb3hQcmVzc2FibGUnKTtcbmNvbnN0IFllbGxvd0JveFN0eWxlID0gcmVxdWlyZSgnLi9ZZWxsb3dCb3hTdHlsZScpO1xuXG5pbXBvcnQgdHlwZSB7UHJlc3NFdmVudH0gZnJvbSAnLi4vLi4vVHlwZXMvQ29yZUV2ZW50VHlwZXMnO1xuaW1wb3J0IHR5cGUge1N0YWNrRnJhbWV9IGZyb20gJy4uLy4uL0NvcmUvTmF0aXZlRXhjZXB0aW9uc01hbmFnZXInO1xuXG50eXBlIFByb3BzID0gJFJlYWRPbmx5PHt8XG4gIGZyYW1lOiBTdGFja0ZyYW1lLFxuICBvblByZXNzPzogPyhldmVudDogUHJlc3NFdmVudCkgPT4gdm9pZCxcbnx9PjtcblxuY29uc3QgWWVsbG93Qm94SW5zcGVjdG9yU3RhY2tGcmFtZSA9IChwcm9wczogUHJvcHMpOiBSZWFjdC5Ob2RlID0+IHtcbiAgY29uc3Qge2ZyYW1lLCBvblByZXNzfSA9IHByb3BzO1xuXG4gIHJldHVybiAoXG4gICAgPFllbGxvd0JveFByZXNzYWJsZVxuICAgICAgYmFja2dyb3VuZENvbG9yPXt7XG4gICAgICAgIGRlZmF1bHQ6IFllbGxvd0JveFN0eWxlLmdldEJhY2tncm91bmRDb2xvcigwKSxcbiAgICAgICAgcHJlc3NlZDogWWVsbG93Qm94U3R5bGUuZ2V0SGlnaGxpZ2h0Q29sb3IoMSksXG4gICAgICB9fVxuICAgICAgb25QcmVzcz17b25QcmVzc31cbiAgICAgIHN0eWxlPXtzdHlsZXMuZnJhbWV9PlxuICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5mcmFtZU5hbWV9PntmcmFtZS5tZXRob2ROYW1lfTwvVGV4dD5cbiAgICAgIDxUZXh0XG4gICAgICAgIGVsbGlwc2l6ZU1vZGU9XCJtaWRkbGVcIlxuICAgICAgICBudW1iZXJPZkxpbmVzPXsxfVxuICAgICAgICBzdHlsZT17c3R5bGVzLmZyYW1lTG9jYXRpb259PlxuICAgICAgICB7Zm9ybWF0RnJhbWVMb2NhdGlvbihmcmFtZSl9XG4gICAgICA8L1RleHQ+XG4gICAgPC9ZZWxsb3dCb3hQcmVzc2FibGU+XG4gICk7XG59O1xuXG5jb25zdCBmb3JtYXRGcmFtZUxvY2F0aW9uID0gKGZyYW1lOiBTdGFja0ZyYW1lKTogc3RyaW5nID0+IHtcbiAgY29uc3Qge2ZpbGUsIGxpbmVOdW1iZXIsIGNvbHVtbn0gPSBmcmFtZTtcbiAgaWYgKGZpbGUgPT0gbnVsbCkge1xuICAgIHJldHVybiAnPHVua25vd24+JztcbiAgfVxuICBjb25zdCBxdWVyeUluZGV4ID0gZmlsZS5pbmRleE9mKCc/Jyk7XG4gIGNvbnN0IHF1ZXJ5ID0gcXVlcnlJbmRleCA8IDAgPyAnJyA6IGZpbGUuc3Vic3RyKHF1ZXJ5SW5kZXgpO1xuXG4gIGNvbnN0IHBhdGggPSBxdWVyeUluZGV4IDwgMCA/IGZpbGUgOiBmaWxlLnN1YnN0cigwLCBxdWVyeUluZGV4KTtcbiAgbGV0IGxvY2F0aW9uID0gcGF0aC5zdWJzdHIocGF0aC5sYXN0SW5kZXhPZignLycpICsgMSkgKyBxdWVyeTtcblxuICBpZiAobGluZU51bWJlciA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGxvY2F0aW9uO1xuICB9XG5cbiAgbG9jYXRpb24gPSBsb2NhdGlvbiArICc6JyArIGxpbmVOdW1iZXI7XG5cbiAgaWYgKGNvbHVtbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGxvY2F0aW9uO1xuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uICsgJzonICsgY29sdW1uO1xufTtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBmcmFtZToge1xuICAgIHBhZGRpbmdIb3Jpem9udGFsOiAxMixcbiAgICBwYWRkaW5nVmVydGljYWw6IDQsXG4gIH0sXG4gIGZyYW1lTmFtZToge1xuICAgIGNvbG9yOiBZZWxsb3dCb3hTdHlsZS5nZXRUZXh0Q29sb3IoMSksXG4gICAgZm9udFNpemU6IDE0LFxuICAgIGluY2x1ZGVGb250UGFkZGluZzogZmFsc2UsXG4gICAgbGluZUhlaWdodDogMTgsXG4gIH0sXG4gIGZyYW1lTG9jYXRpb246IHtcbiAgICBjb2xvcjogWWVsbG93Qm94U3R5bGUuZ2V0VGV4dENvbG9yKDAuNyksXG4gICAgZm9udFNpemU6IDEyLFxuICAgIGZvbnRXZWlnaHQ6ICczMDAnLFxuICAgIGluY2x1ZGVGb250UGFkZGluZzogZmFsc2UsXG4gICAgbGluZUhlaWdodDogMTYsXG4gIH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBZZWxsb3dCb3hJbnNwZWN0b3JTdGFja0ZyYW1lO1xuIl19