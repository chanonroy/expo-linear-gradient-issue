198d8714e08f615b698cb3d8eeeb87ec
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requireNativeViewManager = requireNativeViewManager;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _omit = _interopRequireDefault(require("lodash/omit"));

var _pick = _interopRequireDefault(require("lodash/pick"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var ViewPropTypesKeys = Object.keys(_reactNative.ViewPropTypes);

function requireNativeViewManager(viewName) {
  if (__DEV__) {
    var NativeUnimoduleProxy = _reactNative.NativeModules.NativeUnimoduleProxy;

    if (!NativeUnimoduleProxy.viewManagersNames.includes(viewName)) {
      var exportedViewManagerNames = NativeUnimoduleProxy.viewManagersNames.join(', ');
      console.warn("The native view manager required by name (" + viewName + ") from NativeViewManagerAdapter isn't exported by @unimodules/react-native-adapter. Views of this type may not render correctly. Exported view managers: [" + exportedViewManagerNames + "].");
    }
  }

  var reactNativeViewName = "ViewManagerAdapter_" + viewName;
  var ReactNativeComponent = (0, _reactNative.requireNativeComponent)(reactNativeViewName);
  var reactNativeUIConfiguration = (_reactNative.UIManager.getViewManagerConfig ? _reactNative.UIManager.getViewManagerConfig(reactNativeViewName) : _reactNative.UIManager[reactNativeViewName]) || {
    NativeProps: {},
    directEventTypes: {}
  };
  var reactNativeComponentPropNames = ['children'].concat((0, _toConsumableArray2.default)(ViewPropTypesKeys), (0, _toConsumableArray2.default)(Object.keys(reactNativeUIConfiguration.NativeProps)), (0, _toConsumableArray2.default)(Object.keys(reactNativeUIConfiguration.directEventTypes)));

  function NativeComponentAdapter(props, ref) {
    var nativeProps = (0, _pick.default)(props, reactNativeComponentPropNames);
    var proxiedProps = (0, _omit.default)(props, reactNativeComponentPropNames);
    return _react.default.createElement(ReactNativeComponent, (0, _extends2.default)({}, nativeProps, {
      proxiedProperties: proxiedProps,
      ref: ref
    }));
  }

  NativeComponentAdapter.displayName = "Adapter<" + viewName + ">";
  return _react.default.forwardRef(NativeComponentAdapter);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9OYXRpdmVWaWV3TWFuYWdlckFkYXB0ZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBY0EsSUFBTSxpQkFBaUIsR0FBRyxNQUFNLENBQUMsSUFBUCxDQUFZLDBCQUFaLENBQTFCOztBQUtNLFNBQVUsd0JBQVYsQ0FBNEMsUUFBNUMsRUFBNEQ7QUFDaEUsTUFBSSxPQUFKLEVBQWE7QUFBQSxRQUNILG9CQURHLEdBQ3NCLDBCQUR0QixDQUNILG9CQURHOztBQUVYLFFBQUksQ0FBQyxvQkFBb0IsQ0FBQyxpQkFBckIsQ0FBdUMsUUFBdkMsQ0FBZ0QsUUFBaEQsQ0FBTCxFQUFnRTtBQUM5RCxVQUFNLHdCQUF3QixHQUFHLG9CQUFvQixDQUFDLGlCQUFyQixDQUF1QyxJQUF2QyxDQUE0QyxJQUE1QyxDQUFqQztBQUNBLE1BQUEsT0FBTyxDQUFDLElBQVIsZ0RBQytDLFFBRC9DLGtLQUNvTix3QkFEcE47QUFHRDtBQUNGOztBQUlELE1BQU0sbUJBQW1CLDJCQUF5QixRQUFsRDtBQUNBLE1BQU0sb0JBQW9CLEdBQUcseUNBQXVCLG1CQUF2QixDQUE3QjtBQUVBLE1BQU0sMEJBQTBCLEdBQUcsQ0FBQyx1QkFBVSxvQkFBVixHQUNoQyx1QkFBVSxvQkFBVixDQUErQixtQkFBL0IsQ0FEZ0MsR0FFaEMsdUJBQVUsbUJBQVYsQ0FGK0IsS0FFSTtBQUNyQyxJQUFBLFdBQVcsRUFBRSxFQUR3QjtBQUVyQyxJQUFBLGdCQUFnQixFQUFFO0FBRm1CLEdBRnZDO0FBTUEsTUFBTSw2QkFBNkIsSUFDakMsVUFEaUMsMENBRTlCLGlCQUY4QixvQ0FHOUIsTUFBTSxDQUFDLElBQVAsQ0FBWSwwQkFBMEIsQ0FBQyxXQUF2QyxDQUg4QixvQ0FJOUIsTUFBTSxDQUFDLElBQVAsQ0FBWSwwQkFBMEIsQ0FBQyxnQkFBdkMsQ0FKOEIsRUFBbkM7O0FBUUEsV0FBUyxzQkFBVCxDQUFnQyxLQUFoQyxFQUF1QyxHQUF2QyxFQUEwQztBQUd4QyxRQUFNLFdBQVcsR0FBRyxtQkFBSyxLQUFMLEVBQVksNkJBQVosQ0FBcEI7QUFDQSxRQUFNLFlBQVksR0FBRyxtQkFBSyxLQUFMLEVBQVksNkJBQVosQ0FBckI7QUFDQSxXQUFPLDZCQUFDLG9CQUFELDZCQUEwQixXQUExQjtBQUF1QyxNQUFBLGlCQUFpQixFQUFFLFlBQTFEO0FBQXdFLE1BQUEsR0FBRyxFQUFFO0FBQTdFLE9BQVA7QUFDRDs7QUFDRCxFQUFBLHNCQUFzQixDQUFDLFdBQXZCLGdCQUFnRCxRQUFoRDtBQUNBLFNBQU8sZUFBTSxVQUFOLENBQWlCLHNCQUFqQixDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgb21pdCBmcm9tICdsb2Rhc2gvb21pdCc7XG5pbXBvcnQgcGljayBmcm9tICdsb2Rhc2gvcGljayc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTmF0aXZlTW9kdWxlcywgVUlNYW5hZ2VyLCBWaWV3UHJvcFR5cGVzLCByZXF1aXJlTmF0aXZlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuLy8gVG8gbWFrZSB0aGUgdHJhbnNpdGlvbiBmcm9tIFJlYWN0IE5hdGl2ZSdzIGByZXF1aXJlTmF0aXZlQ29tcG9uZW50YCB0byBFeHBvJ3Ncbi8vIGByZXF1aXJlTmF0aXZlVmlld01hbmFnZXJgIGFzIGVhc3kgYXMgcG9zc2libGUsIGByZXF1aXJlTmF0aXZlVmlld01hbmFnZXJgIGlzIGEgZHJvcC1pblxuLy8gcmVwbGFjZW1lbnQgZm9yIGByZXF1aXJlTmF0aXZlQ29tcG9uZW50YC5cbi8vXG4vLyBGb3IgZWFjaCB2aWV3IG1hbmFnZXIsIHdlIGNyZWF0ZSBhIHdyYXBwZXIgY29tcG9uZW50IHRoYXQgYWNjZXB0cyBhbGwgb2YgdGhlIHByb3BzIGF2YWlsYWJsZSB0b1xuLy8gdGhlIGF1dGhvciBvZiB0aGUgdW5pdmVyc2FsIG1vZHVsZS4gVGhpcyB3cmFwcGVyIGNvbXBvbmVudCBzcGxpdHMgdGhlIHByb3BzIGludG8gdHdvIHNldHM6IHByb3BzXG4vLyBwYXNzZWQgdG8gUmVhY3QgTmF0aXZlJ3MgVmlldyAoZXg6IHN0eWxlLCB0ZXN0SUQpIGFuZCBjdXN0b20gdmlldyBwcm9wcywgd2hpY2ggYXJlIHBhc3NlZCB0byB0aGVcbi8vIGFkYXB0ZXIgdmlldyBjb21wb25lbnQgaW4gYSBwcm9wIGNhbGxlZCBgcHJveGllZFByb3BlcnRpZXNgLlxuXG4vLyBOT1RFOiBSZWFjdCBOYXRpdmUgaXMgbW92aW5nIGF3YXkgZnJvbSBydW50aW1lIFByb3BUeXBlcyBhbmQgbWF5IHJlbW92ZSBWaWV3UHJvcFR5cGVzLCBpbiB3aGljaFxuLy8gY2FzZSB3ZSB3aWxsIG5lZWQgYW5vdGhlciB3YXkgdG8gc2VwYXJhdGUgc3RhbmRhcmQgUmVhY3QgTmF0aXZlIHZpZXcgcHJvcHMgZnJvbSBvdGhlciBwcm9wcyxcbi8vIHdoaWNoIHdlIHByb3h5IHRocm91Z2ggdGhlIGFkYXB0ZXJcbmNvbnN0IFZpZXdQcm9wVHlwZXNLZXlzID0gT2JqZWN0LmtleXMoVmlld1Byb3BUeXBlcyk7XG5cbi8qKlxuICogQSBkcm9wLWluIHJlcGxhY2VtZW50IGZvciBgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudGAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXF1aXJlTmF0aXZlVmlld01hbmFnZXI8UCA9IGFueT4odmlld05hbWU6IHN0cmluZyk6IFJlYWN0LkNvbXBvbmVudFR5cGU8UD4ge1xuICBpZiAoX19ERVZfXykge1xuICAgIGNvbnN0IHsgTmF0aXZlVW5pbW9kdWxlUHJveHkgfSA9IE5hdGl2ZU1vZHVsZXM7XG4gICAgaWYgKCFOYXRpdmVVbmltb2R1bGVQcm94eS52aWV3TWFuYWdlcnNOYW1lcy5pbmNsdWRlcyh2aWV3TmFtZSkpIHtcbiAgICAgIGNvbnN0IGV4cG9ydGVkVmlld01hbmFnZXJOYW1lcyA9IE5hdGl2ZVVuaW1vZHVsZVByb3h5LnZpZXdNYW5hZ2Vyc05hbWVzLmpvaW4oJywgJyk7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBUaGUgbmF0aXZlIHZpZXcgbWFuYWdlciByZXF1aXJlZCBieSBuYW1lICgke3ZpZXdOYW1lfSkgZnJvbSBOYXRpdmVWaWV3TWFuYWdlckFkYXB0ZXIgaXNuJ3QgZXhwb3J0ZWQgYnkgQHVuaW1vZHVsZXMvcmVhY3QtbmF0aXZlLWFkYXB0ZXIuIFZpZXdzIG9mIHRoaXMgdHlwZSBtYXkgbm90IHJlbmRlciBjb3JyZWN0bHkuIEV4cG9ydGVkIHZpZXcgbWFuYWdlcnM6IFske2V4cG9ydGVkVmlld01hbmFnZXJOYW1lc31dLmBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gU2V0IHVwIHRoZSBSZWFjdCBOYXRpdmUgbmF0aXZlIGNvbXBvbmVudCwgd2hpY2ggaXMgYW4gYWRhcHRlciB0byB0aGUgdW5pdmVyc2FsIG1vZHVsZSdzIHZpZXdcbiAgLy8gbWFuYWdlclxuICBjb25zdCByZWFjdE5hdGl2ZVZpZXdOYW1lID0gYFZpZXdNYW5hZ2VyQWRhcHRlcl8ke3ZpZXdOYW1lfWA7XG4gIGNvbnN0IFJlYWN0TmF0aXZlQ29tcG9uZW50ID0gcmVxdWlyZU5hdGl2ZUNvbXBvbmVudChyZWFjdE5hdGl2ZVZpZXdOYW1lKTtcbiAgLy8gQHRzLWlnbm9yZTogVUlNYW5hZ2VyLmdldFZpZXdNYW5hZ2VyQ29uZmlnIGlzIG5vdCBkZWNsYXJlZFxuICBjb25zdCByZWFjdE5hdGl2ZVVJQ29uZmlndXJhdGlvbiA9IChVSU1hbmFnZXIuZ2V0Vmlld01hbmFnZXJDb25maWdcbiAgICA/IFVJTWFuYWdlci5nZXRWaWV3TWFuYWdlckNvbmZpZyhyZWFjdE5hdGl2ZVZpZXdOYW1lKVxuICAgIDogVUlNYW5hZ2VyW3JlYWN0TmF0aXZlVmlld05hbWVdKSB8fCB7XG4gICAgTmF0aXZlUHJvcHM6IHt9LFxuICAgIGRpcmVjdEV2ZW50VHlwZXM6IHt9LFxuICB9O1xuICBjb25zdCByZWFjdE5hdGl2ZUNvbXBvbmVudFByb3BOYW1lcyA9IFtcbiAgICAnY2hpbGRyZW4nLFxuICAgIC4uLlZpZXdQcm9wVHlwZXNLZXlzLFxuICAgIC4uLk9iamVjdC5rZXlzKHJlYWN0TmF0aXZlVUlDb25maWd1cmF0aW9uLk5hdGl2ZVByb3BzKSxcbiAgICAuLi5PYmplY3Qua2V5cyhyZWFjdE5hdGl2ZVVJQ29uZmlndXJhdGlvbi5kaXJlY3RFdmVudFR5cGVzKSxcbiAgXTtcblxuICAvLyBEZWZpbmUgYSBjb21wb25lbnQgZm9yIHVuaXZlcnNhbC1tb2R1bGUgYXV0aG9ycyB0byBhY2Nlc3MgdGhlaXIgbmF0aXZlIHZpZXcgbWFuYWdlclxuICBmdW5jdGlvbiBOYXRpdmVDb21wb25lbnRBZGFwdGVyKHByb3BzLCByZWYpIHtcbiAgICAvLyBUT0RPOiBgb21pdGAgbWF5IGluY3VyIGEgbWVhbmluZ2Z1bCBwZXJmb3JtYW5jZSBjb3N0IGFjcm9zcyBtYW55IG5hdGl2ZSBjb21wb25lbnRzIHJlbmRlcmVkXG4gICAgLy8gaW4gdGhlIHNhbWUgdXBkYXRlLiBQcm9maWxlIHRoaXMgYW5kIHdyaXRlIG91dCBhIHBhcnRpdGlvbiBmdW5jdGlvbiBpZiB0aGlzIGlzIGEgYm90dGxlbmVjay5cbiAgICBjb25zdCBuYXRpdmVQcm9wcyA9IHBpY2socHJvcHMsIHJlYWN0TmF0aXZlQ29tcG9uZW50UHJvcE5hbWVzKTtcbiAgICBjb25zdCBwcm94aWVkUHJvcHMgPSBvbWl0KHByb3BzLCByZWFjdE5hdGl2ZUNvbXBvbmVudFByb3BOYW1lcyk7XG4gICAgcmV0dXJuIDxSZWFjdE5hdGl2ZUNvbXBvbmVudCB7Li4ubmF0aXZlUHJvcHN9IHByb3hpZWRQcm9wZXJ0aWVzPXtwcm94aWVkUHJvcHN9IHJlZj17cmVmfSAvPjtcbiAgfVxuICBOYXRpdmVDb21wb25lbnRBZGFwdGVyLmRpc3BsYXlOYW1lID0gYEFkYXB0ZXI8JHt2aWV3TmFtZX0+YDtcbiAgcmV0dXJuIFJlYWN0LmZvcndhcmRSZWYoTmF0aXZlQ29tcG9uZW50QWRhcHRlcik7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9