36fc1478bf2f8b0ec4ac7a6eacb5ff6e
'use strict';

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var symbolicateStackTrace = require("../../Core/Devtools/symbolicateStackTrace");

var cache = new Map();
var YellowBoxSymbolication = {
  delete: function _delete(stack) {
    cache.delete(getCacheKey(stack));
  },
  symbolicate: function symbolicate(stack) {
    var key = getCacheKey(stack);
    var promise = cache.get(key);

    if (promise == null) {
      promise = symbolicateStackTrace(stack).then(sanitize);
      cache.set(key, promise);
    }

    return promise;
  }
};

var getCacheKey = function getCacheKey(stack) {
  return JSON.stringify(stack);
};

var sanitize = function sanitize(maybeStack) {
  if (!Array.isArray(maybeStack)) {
    throw new Error('Expected stack to be an array.');
  }

  var stack = [];

  for (var _iterator = _createForOfIteratorHelperLoose(maybeStack), _step; !(_step = _iterator()).done;) {
    var maybeFrame = _step.value;

    if (typeof maybeFrame !== 'object' || maybeFrame == null) {
      throw new Error('Expected each stack frame to be an object.');
    }

    if (typeof maybeFrame.column !== 'number' && maybeFrame.column != null) {
      throw new Error('Expected stack frame `column` to be a nullable number.');
    }

    if (typeof maybeFrame.file !== 'string') {
      throw new Error('Expected stack frame `file` to be a string.');
    }

    if (typeof maybeFrame.lineNumber !== 'number') {
      throw new Error('Expected stack frame `lineNumber` to be a number.');
    }

    if (typeof maybeFrame.methodName !== 'string') {
      throw new Error('Expected stack frame `methodName` to be a string.');
    }

    stack.push({
      column: maybeFrame.column,
      file: maybeFrame.file,
      lineNumber: maybeFrame.lineNumber,
      methodName: maybeFrame.methodName
    });
  }

  return stack;
};

module.exports = YellowBoxSymbolication;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlllbGxvd0JveFN5bWJvbGljYXRpb24uanMiXSwibmFtZXMiOlsic3ltYm9saWNhdGVTdGFja1RyYWNlIiwicmVxdWlyZSIsImNhY2hlIiwiTWFwIiwiWWVsbG93Qm94U3ltYm9saWNhdGlvbiIsImRlbGV0ZSIsInN0YWNrIiwiZ2V0Q2FjaGVLZXkiLCJzeW1ib2xpY2F0ZSIsImtleSIsInByb21pc2UiLCJnZXQiLCJ0aGVuIiwic2FuaXRpemUiLCJzZXQiLCJKU09OIiwic3RyaW5naWZ5IiwibWF5YmVTdGFjayIsIkFycmF5IiwiaXNBcnJheSIsIkVycm9yIiwibWF5YmVGcmFtZSIsImNvbHVtbiIsImZpbGUiLCJsaW5lTnVtYmVyIiwibWV0aG9kTmFtZSIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7QUFFQSxJQUFNQSxxQkFBcUIsR0FBR0MsT0FBTyw2Q0FBckM7O0FBUUEsSUFBTUMsS0FBb0MsR0FBRyxJQUFJQyxHQUFKLEVBQTdDO0FBRUEsSUFBTUMsc0JBQXNCLEdBQUc7QUFDN0JDLEVBQUFBLE1BRDZCLG1CQUN0QkMsS0FEc0IsRUFDRjtBQUN6QkosSUFBQUEsS0FBSyxDQUFDRyxNQUFOLENBQWFFLFdBQVcsQ0FBQ0QsS0FBRCxDQUF4QjtBQUNELEdBSDRCO0FBSzdCRSxFQUFBQSxXQUw2Qix1QkFLakJGLEtBTGlCLEVBS2E7QUFDeEMsUUFBTUcsR0FBRyxHQUFHRixXQUFXLENBQUNELEtBQUQsQ0FBdkI7QUFFQSxRQUFJSSxPQUFPLEdBQUdSLEtBQUssQ0FBQ1MsR0FBTixDQUFVRixHQUFWLENBQWQ7O0FBQ0EsUUFBSUMsT0FBTyxJQUFJLElBQWYsRUFBcUI7QUFDbkJBLE1BQUFBLE9BQU8sR0FBR1YscUJBQXFCLENBQUNNLEtBQUQsQ0FBckIsQ0FBNkJNLElBQTdCLENBQWtDQyxRQUFsQyxDQUFWO0FBQ0FYLE1BQUFBLEtBQUssQ0FBQ1ksR0FBTixDQUFVTCxHQUFWLEVBQWVDLE9BQWY7QUFDRDs7QUFFRCxXQUFPQSxPQUFQO0FBQ0Q7QUFmNEIsQ0FBL0I7O0FBa0JBLElBQU1ILFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQUNELEtBQUQsRUFBNEI7QUFDOUMsU0FBT1MsSUFBSSxDQUFDQyxTQUFMLENBQWVWLEtBQWYsQ0FBUDtBQUNELENBRkQ7O0FBT0EsSUFBTU8sUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBQ0ksVUFBRCxFQUE4QjtBQUM3QyxNQUFJLENBQUNDLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixVQUFkLENBQUwsRUFBZ0M7QUFDOUIsVUFBTSxJQUFJRyxLQUFKLENBQVUsZ0NBQVYsQ0FBTjtBQUNEOztBQUNELE1BQU1kLEtBQUssR0FBRyxFQUFkOztBQUNBLHVEQUF5QlcsVUFBekIsd0NBQXFDO0FBQUEsUUFBMUJJLFVBQTBCOztBQUNuQyxRQUFJLE9BQU9BLFVBQVAsS0FBc0IsUUFBdEIsSUFBa0NBLFVBQVUsSUFBSSxJQUFwRCxFQUEwRDtBQUN4RCxZQUFNLElBQUlELEtBQUosQ0FBVSw0Q0FBVixDQUFOO0FBQ0Q7O0FBQ0QsUUFBSSxPQUFPQyxVQUFVLENBQUNDLE1BQWxCLEtBQTZCLFFBQTdCLElBQXlDRCxVQUFVLENBQUNDLE1BQVgsSUFBcUIsSUFBbEUsRUFBd0U7QUFDdEUsWUFBTSxJQUFJRixLQUFKLENBQVUsd0RBQVYsQ0FBTjtBQUNEOztBQUNELFFBQUksT0FBT0MsVUFBVSxDQUFDRSxJQUFsQixLQUEyQixRQUEvQixFQUF5QztBQUN2QyxZQUFNLElBQUlILEtBQUosQ0FBVSw2Q0FBVixDQUFOO0FBQ0Q7O0FBQ0QsUUFBSSxPQUFPQyxVQUFVLENBQUNHLFVBQWxCLEtBQWlDLFFBQXJDLEVBQStDO0FBQzdDLFlBQU0sSUFBSUosS0FBSixDQUFVLG1EQUFWLENBQU47QUFDRDs7QUFDRCxRQUFJLE9BQU9DLFVBQVUsQ0FBQ0ksVUFBbEIsS0FBaUMsUUFBckMsRUFBK0M7QUFDN0MsWUFBTSxJQUFJTCxLQUFKLENBQVUsbURBQVYsQ0FBTjtBQUNEOztBQUNEZCxJQUFBQSxLQUFLLENBQUNvQixJQUFOLENBQVc7QUFDVEosTUFBQUEsTUFBTSxFQUFFRCxVQUFVLENBQUNDLE1BRFY7QUFFVEMsTUFBQUEsSUFBSSxFQUFFRixVQUFVLENBQUNFLElBRlI7QUFHVEMsTUFBQUEsVUFBVSxFQUFFSCxVQUFVLENBQUNHLFVBSGQ7QUFJVEMsTUFBQUEsVUFBVSxFQUFFSixVQUFVLENBQUNJO0FBSmQsS0FBWDtBQU1EOztBQUNELFNBQU9uQixLQUFQO0FBQ0QsQ0E3QkQ7O0FBK0JBcUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCeEIsc0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IHN5bWJvbGljYXRlU3RhY2tUcmFjZSA9IHJlcXVpcmUoJy4uLy4uL0NvcmUvRGV2dG9vbHMvc3ltYm9saWNhdGVTdGFja1RyYWNlJyk7XG5cbmltcG9ydCB0eXBlIHtTdGFja0ZyYW1lfSBmcm9tICcuLi8uLi9Db3JlL05hdGl2ZUV4Y2VwdGlvbnNNYW5hZ2VyJztcblxudHlwZSBDYWNoZUtleSA9IHN0cmluZztcblxuZXhwb3J0IHR5cGUgU3RhY2sgPSBBcnJheTxTdGFja0ZyYW1lPjtcblxuY29uc3QgY2FjaGU6IE1hcDxDYWNoZUtleSwgUHJvbWlzZTxTdGFjaz4+ID0gbmV3IE1hcCgpO1xuXG5jb25zdCBZZWxsb3dCb3hTeW1ib2xpY2F0aW9uID0ge1xuICBkZWxldGUoc3RhY2s6IFN0YWNrKTogdm9pZCB7XG4gICAgY2FjaGUuZGVsZXRlKGdldENhY2hlS2V5KHN0YWNrKSk7XG4gIH0sXG5cbiAgc3ltYm9saWNhdGUoc3RhY2s6IFN0YWNrKTogUHJvbWlzZTxTdGFjaz4ge1xuICAgIGNvbnN0IGtleSA9IGdldENhY2hlS2V5KHN0YWNrKTtcblxuICAgIGxldCBwcm9taXNlID0gY2FjaGUuZ2V0KGtleSk7XG4gICAgaWYgKHByb21pc2UgPT0gbnVsbCkge1xuICAgICAgcHJvbWlzZSA9IHN5bWJvbGljYXRlU3RhY2tUcmFjZShzdGFjaykudGhlbihzYW5pdGl6ZSk7XG4gICAgICBjYWNoZS5zZXQoa2V5LCBwcm9taXNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfSxcbn07XG5cbmNvbnN0IGdldENhY2hlS2V5ID0gKHN0YWNrOiBTdGFjayk6IENhY2hlS2V5ID0+IHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0YWNrKTtcbn07XG5cbi8qKlxuICogU2FuaXRpemUgYmVjYXVzZSBzb21ldGltZXMsIGBzeW1ib2xpY2F0ZVN0YWNrVHJhY2VgIGdpdmVzIHVzIGludmFsaWQgdmFsdWVzLlxuICovXG5jb25zdCBzYW5pdGl6ZSA9IChtYXliZVN0YWNrOiBtaXhlZCk6IFN0YWNrID0+IHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KG1heWJlU3RhY2spKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBzdGFjayB0byBiZSBhbiBhcnJheS4nKTtcbiAgfVxuICBjb25zdCBzdGFjayA9IFtdO1xuICBmb3IgKGNvbnN0IG1heWJlRnJhbWUgb2YgbWF5YmVTdGFjaykge1xuICAgIGlmICh0eXBlb2YgbWF5YmVGcmFtZSAhPT0gJ29iamVjdCcgfHwgbWF5YmVGcmFtZSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGVhY2ggc3RhY2sgZnJhbWUgdG8gYmUgYW4gb2JqZWN0LicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG1heWJlRnJhbWUuY29sdW1uICE9PSAnbnVtYmVyJyAmJiBtYXliZUZyYW1lLmNvbHVtbiAhPSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHN0YWNrIGZyYW1lIGBjb2x1bW5gIHRvIGJlIGEgbnVsbGFibGUgbnVtYmVyLicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG1heWJlRnJhbWUuZmlsZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgc3RhY2sgZnJhbWUgYGZpbGVgIHRvIGJlIGEgc3RyaW5nLicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG1heWJlRnJhbWUubGluZU51bWJlciAhPT0gJ251bWJlcicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgc3RhY2sgZnJhbWUgYGxpbmVOdW1iZXJgIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG1heWJlRnJhbWUubWV0aG9kTmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgc3RhY2sgZnJhbWUgYG1ldGhvZE5hbWVgIHRvIGJlIGEgc3RyaW5nLicpO1xuICAgIH1cbiAgICBzdGFjay5wdXNoKHtcbiAgICAgIGNvbHVtbjogbWF5YmVGcmFtZS5jb2x1bW4sXG4gICAgICBmaWxlOiBtYXliZUZyYW1lLmZpbGUsXG4gICAgICBsaW5lTnVtYmVyOiBtYXliZUZyYW1lLmxpbmVOdW1iZXIsXG4gICAgICBtZXRob2ROYW1lOiBtYXliZUZyYW1lLm1ldGhvZE5hbWUsXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHN0YWNrO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBZZWxsb3dCb3hTeW1ib2xpY2F0aW9uO1xuIl19